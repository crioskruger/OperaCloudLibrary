//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OperaCloud.Customer.Client
{
    using System.Net.Http.Headers;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(string baseUrl)
        {
            BaseUrl = baseUrl;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// This API facilitates creation of a company/agent/group/source profile in OPERA.
        /// </summary>
        /// <param name="company">Request object for creation of company profile. This object contains profile details with unique identifiers of a profile. The standard optional Opera Context element is also included.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> PostCompanyProfileAsync(Company company, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return PostCompanyProfileAsync(company, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// This API facilitates creation of a company/agent/group/source profile in OPERA.
        /// </summary>
        /// <param name="company">Request object for creation of company profile. This object contains profile details with unique identifiers of a profile. The standard optional Opera Context element is also included.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> PostCompanyProfileAsync(Company company, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (company == null)
                throw new System.ArgumentNullException("company");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/companies");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(company, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get company profile by corporate ID
        /// </summary>
        /// <param name="corporateID">Unique OPERA Corporate ID used to find company/agent/group/source profile in OPERA.</param>
        /// <param name="fetchInstructions">Delivery methods associated with the profile.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching unique company profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Company> GetCompanyProfileAsync(string corporateID, System.Collections.Generic.IEnumerable<Anonymous> fetchInstructions, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetCompanyProfileAsync(corporateID, fetchInstructions, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get company profile by corporate ID
        /// </summary>
        /// <param name="corporateID">Unique OPERA Corporate ID used to find company/agent/group/source profile in OPERA.</param>
        /// <param name="fetchInstructions">Delivery methods associated with the profile.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching unique company profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Company> GetCompanyProfileAsync(string corporateID, System.Collections.Generic.IEnumerable<Anonymous> fetchInstructions, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (corporateID == null)
                throw new System.ArgumentNullException("corporateID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/companies/{corporateID}?");
            urlBuilder_.Replace("{corporateID}", System.Uri.EscapeDataString(ConvertToString(corporateID, System.Globalization.CultureInfo.InvariantCulture)));
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Company>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("CompanyProfile not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get profile by external ID
        /// </summary>
        /// <param name="profileExternalId">External System's ID used to get the profile.</param>
        /// <param name="extSystemCode">Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.</param>
        /// <param name="hotelId">Hotel Code used to filter hotel specific information regarding the profile.</param>
        /// <param name="logViewProfile">This element tells when the view profile should be logged.</param>
        /// <param name="showInactiveRoomOwners">Flag to show inactive Room Owners.</param>
        /// <param name="fetchInstructions">Delivery methods associated with the profile.</param>
        /// <param name="instructionParameterType">Simple type enumerating the different parameters accepted by a profile Instructions. Parameter names have the name of the instruction expecting it, and the parameter name itself.</param>
        /// <param name="value">Value of Profile Instruction Parameter</param>
        /// <param name="allowedAction">Flag indicating whether Profile is Enrolled to Primary Membership Program.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Profile> GetProfileByExtIdAsync(string profileExternalId, string extSystemCode, string hotelId, bool? logViewProfile, bool? showInactiveRoomOwners, System.Collections.Generic.IEnumerable<Anonymous2> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous3> instructionParameterType, System.Collections.Generic.IEnumerable<string> value, System.Collections.Generic.IEnumerable<Anonymous4> allowedAction, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetProfileByExtIdAsync(profileExternalId, extSystemCode, hotelId, logViewProfile, showInactiveRoomOwners, fetchInstructions, instructionParameterType, value, allowedAction, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get profile by external ID
        /// </summary>
        /// <param name="profileExternalId">External System's ID used to get the profile.</param>
        /// <param name="extSystemCode">Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.</param>
        /// <param name="hotelId">Hotel Code used to filter hotel specific information regarding the profile.</param>
        /// <param name="logViewProfile">This element tells when the view profile should be logged.</param>
        /// <param name="showInactiveRoomOwners">Flag to show inactive Room Owners.</param>
        /// <param name="fetchInstructions">Delivery methods associated with the profile.</param>
        /// <param name="instructionParameterType">Simple type enumerating the different parameters accepted by a profile Instructions. Parameter names have the name of the instruction expecting it, and the parameter name itself.</param>
        /// <param name="value">Value of Profile Instruction Parameter</param>
        /// <param name="allowedAction">Flag indicating whether Profile is Enrolled to Primary Membership Program.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Profile> GetProfileByExtIdAsync(string profileExternalId, string extSystemCode, string hotelId, bool? logViewProfile, bool? showInactiveRoomOwners, System.Collections.Generic.IEnumerable<Anonymous2> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous3> instructionParameterType, System.Collections.Generic.IEnumerable<string> value, System.Collections.Generic.IEnumerable<Anonymous4> allowedAction, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (profileExternalId == null)
                throw new System.ArgumentNullException("profileExternalId");

            if (extSystemCode == null)
                throw new System.ArgumentNullException("extSystemCode");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalSystems/{extSystemCode}/profiles/{profileExternalId}?");
            urlBuilder_.Replace("{profileExternalId}", System.Uri.EscapeDataString(ConvertToString(profileExternalId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{extSystemCode}", System.Uri.EscapeDataString(ConvertToString(extSystemCode, System.Globalization.CultureInfo.InvariantCulture)));
            if (hotelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hotelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logViewProfile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logViewProfile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logViewProfile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showInactiveRoomOwners != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showInactiveRoomOwners") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showInactiveRoomOwners, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (instructionParameterType != null)
            {
                foreach (var item_ in instructionParameterType) { urlBuilder_.Append(System.Uri.EscapeDataString("instructionParameterType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (value != null)
            {
                foreach (var item_ in value) { urlBuilder_.Append(System.Uri.EscapeDataString("value") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (allowedAction != null)
            {
                foreach (var item_ in allowedAction) { urlBuilder_.Append(System.Uri.EscapeDataString("allowedAction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Profile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("ProfileByExtId not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a guest, contact or employee profile in OPERA
        /// </summary>
        /// <param name="guest">Request object for creation of guest profile. This object contains profile details with unique identifiers of a profile. The standard optional Opera Context element is also included.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> PostGuestProfileAsync(Guest guest, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return PostGuestProfileAsync(guest, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a guest, contact or employee profile in OPERA
        /// </summary>
        /// <param name="guest">Request object for creation of guest profile. This object contains profile details with unique identifiers of a profile. The standard optional Opera Context element is also included.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> PostGuestProfileAsync(Guest guest, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (guest == null)
                throw new System.ArgumentNullException("guest");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/guests");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(guest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get guest profile by guest ID
        /// </summary>
        /// <param name="guestId">Unique OPERA internal ID used to find guest/contact/employee profile in OPERA.</param>
        /// <param name="fetchInstructions">Delivery methods associated with the profile.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching unique guest profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Guest> GetGuestProfileAsync(string guestId, System.Collections.Generic.IEnumerable<Anonymous5> fetchInstructions, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetGuestProfileAsync(guestId, fetchInstructions, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get guest profile by guest ID
        /// </summary>
        /// <param name="guestId">Unique OPERA internal ID used to find guest/contact/employee profile in OPERA.</param>
        /// <param name="fetchInstructions">Delivery methods associated with the profile.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching unique guest profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Guest> GetGuestProfileAsync(string guestId, System.Collections.Generic.IEnumerable<Anonymous5> fetchInstructions, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (guestId == null)
                throw new System.ArgumentNullException("guestId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/guests/{guestId}?");
            urlBuilder_.Replace("{guestId}", System.Uri.EscapeDataString(ConvertToString(guestId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    //request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Headers.Authorization = new AuthenticationHeaderValue("Bearer", authorization);

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Guest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("GuestProfile not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get available preferences
        /// </summary>
        /// <param name="id">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="hotelId">Property for which preferences are to be fetched.</param>
        /// <param name="maxFetchSize">Maximum records to be fetched.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>A collection of preferences</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AvailablePreferences> GetAvailablePreferencesAsync(string id, string hotelId, int? maxFetchSize, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetAvailablePreferencesAsync(id, hotelId, maxFetchSize, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available preferences
        /// </summary>
        /// <param name="id">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="hotelId">Property for which preferences are to be fetched.</param>
        /// <param name="maxFetchSize">Maximum records to be fetched.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>A collection of preferences</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AvailablePreferences> GetAvailablePreferencesAsync(string id, string hotelId, int? maxFetchSize, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profileListOfValues/availablePreferences?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("hotelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (maxFetchSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxFetchSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxFetchSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AvailablePreferences>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("AvailablePreferences not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for profile(s)
        /// </summary>
        /// <param name="excludeInactive">Indicates whether to exclude Inactive Profiles, when true indicates that only profiles with active status will be displayed.</param>
        /// <param name="hotelId">Hotel Code, It is used to filter hotel specific children to this specific hotel code.</param>
        /// <param name="includeHasHierarchyOnly">Include profiles that have one or more relationships in the search.</param>
        /// <param name="includePrimaryOwnersOnly">Include primary owners in the search.</param>
        /// <param name="includePurgeProfiles">Include purged profiles in the search.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="offset">Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.</param>
        /// <param name="searchType">When search type is PatronTrackingSystemMemberProfiles, the FetchProfiles will return the Membership Number of the searched Membership Type regardless of primary flag or sequence of the profile memberships.</param>
        /// <param name="summaryInfo">When true response will return summary information otherwise detailed information.</param>
        /// <param name="searchString">Search string to be used for super search.</param>
        /// <param name="includeAnonymized">Indicates whether to include Anonymized Profiles.</param>
        /// <param name="profileType">The types of Profile handled by the web service.</param>
        /// <param name="profileIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalReferenceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalSystemCodes">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="corporateIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="profileName">Family name, last name or Company Name.</param>
        /// <param name="givenName">Given name, first name or names.</param>
        /// <param name="incognitoName">Family name, last name or Company Name.</param>
        /// <param name="incognitoGivenName">Given name, first name or names.</param>
        /// <param name="city">City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).</param>
        /// <param name="postalCode">Post Office Code number.</param>
        /// <param name="state">State or Province name (e.g., Texas).</param>
        /// <param name="countryCode">Code for a country or a nationality.</param>
        /// <param name="streetAddress">First Line of Street Address. For profile search it matches the first Address line.</param>
        /// <param name="keyword">Keyword associated to the profile.</param>
        /// <param name="communication">Any communication method associated to the profile such as phone, fax, eMail id.</param>
        /// <param name="membership">Membership number associated to the profile.</param>
        /// <param name="membershipType">Member Type of searching profile.</param>
        /// <param name="membershipLevel">Membership level associated to the profile.</param>
        /// <param name="aRNumber">Account Receivable associated to the profile.</param>
        /// <param name="businessSegment">Business/Market Segment associated to the profile.</param>
        /// <param name="accountsReceivables">When true indicates that only profiles with AR account fetched.</param>
        /// <param name="corporateProfiles">When true indicates that only profiles with client id are searched for.</param>
        /// <param name="excludeIncompleteProfiles">When true indicates that only profiles with an Address Line 1 and Country or at least one Communications Type will be displayed.</param>
        /// <param name="negotiatedRates">When true indicates that this option has to be included in advanced search.</param>
        /// <param name="relatedProfileExcludeInactive">Indicates whether to exclude Inactive Profiles, when true indicates that only profiles with active status will be displayed.</param>
        /// <param name="realtedProfileIncludeHasHierarchyOnly">Include profiles that have one or more relationships in the search.</param>
        /// <param name="relatedProfileNegotiatedRates">When true indicates that this option has to be included in advanced search.</param>
        /// <param name="relatedProfileType">The types of Profile handled by the web service.</param>
        /// <param name="relatedProfileName">Family name, last name or Company Name.</param>
        /// <param name="protectedProfiles">Indicates whether to exclude Protected Profiles.</param>
        /// <param name="identificationNo">Any identification number associated with the profile such as Passport Number, StateID.</param>
        /// <param name="fetchInstructions">Room Ownership information associated with the profile.</param>
        /// <param name="allowedAction">Flag indicating whether Profile is Enrolled to Primary Membership Program.</param>
        /// <param name="predefinedFilterId">Unique ID of the Filter used to filter profiles.</param>
        /// <param name="predefinedFilterCode">Filter code.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching profiles. This object contains profile primary details,profile summary details,master info list containing code and description used as lookup for description.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProfileSummaries> GetProfilesAsync(bool? excludeInactive, string hotelId, bool? includeHasHierarchyOnly, bool? includePrimaryOwnersOnly, bool? includePurgeProfiles, int? limit, int? offset, SearchType? searchType, bool? summaryInfo, string searchString, bool? includeAnonymized, System.Collections.Generic.IEnumerable<Anonymous6> profileType, System.Collections.Generic.IEnumerable<string> profileIds, System.Collections.Generic.IEnumerable<string> externalReferenceIds, System.Collections.Generic.IEnumerable<string> externalSystemCodes, System.Collections.Generic.IEnumerable<string> corporateIds, string profileName, string givenName, string incognitoName, string incognitoGivenName, string city, string postalCode, string state, string countryCode, string streetAddress, string keyword, string communication, string membership, string membershipType, string membershipLevel, string aRNumber, System.Collections.Generic.IEnumerable<string> businessSegment, bool? accountsReceivables, bool? corporateProfiles, bool? excludeIncompleteProfiles, bool? negotiatedRates, bool? relatedProfileExcludeInactive, bool? realtedProfileIncludeHasHierarchyOnly, bool? relatedProfileNegotiatedRates, RelatedProfileType? relatedProfileType, string relatedProfileName, bool? protectedProfiles, string identificationNo, System.Collections.Generic.IEnumerable<Anonymous7> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous8> allowedAction, System.Collections.Generic.IEnumerable<string> vipCodes, double? predefinedFilterId, string predefinedFilterCode, System.Collections.Generic.IEnumerable<string> prioritieCodes, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetProfilesAsync(excludeInactive, hotelId, includeHasHierarchyOnly, includePrimaryOwnersOnly, includePurgeProfiles, limit, offset, searchType, summaryInfo, searchString, includeAnonymized, profileType, profileIds, externalReferenceIds, externalSystemCodes, corporateIds, profileName, givenName, incognitoName, incognitoGivenName, city, postalCode, state, countryCode, streetAddress, keyword, communication, membership, membershipType, membershipLevel, aRNumber, businessSegment, accountsReceivables, corporateProfiles, excludeIncompleteProfiles, negotiatedRates, relatedProfileExcludeInactive, realtedProfileIncludeHasHierarchyOnly, relatedProfileNegotiatedRates, relatedProfileType, relatedProfileName, protectedProfiles, identificationNo, fetchInstructions, allowedAction, vipCodes, predefinedFilterId, predefinedFilterCode, prioritieCodes, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for profile(s)
        /// </summary>
        /// <param name="excludeInactive">Indicates whether to exclude Inactive Profiles, when true indicates that only profiles with active status will be displayed.</param>
        /// <param name="hotelId">Hotel Code, It is used to filter hotel specific children to this specific hotel code.</param>
        /// <param name="includeHasHierarchyOnly">Include profiles that have one or more relationships in the search.</param>
        /// <param name="includePrimaryOwnersOnly">Include primary owners in the search.</param>
        /// <param name="includePurgeProfiles">Include purged profiles in the search.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="offset">Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.</param>
        /// <param name="searchType">When search type is PatronTrackingSystemMemberProfiles, the FetchProfiles will return the Membership Number of the searched Membership Type regardless of primary flag or sequence of the profile memberships.</param>
        /// <param name="summaryInfo">When true response will return summary information otherwise detailed information.</param>
        /// <param name="searchString">Search string to be used for super search.</param>
        /// <param name="includeAnonymized">Indicates whether to include Anonymized Profiles.</param>
        /// <param name="profileType">The types of Profile handled by the web service.</param>
        /// <param name="profileIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalReferenceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalSystemCodes">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="corporateIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="profileName">Family name, last name or Company Name.</param>
        /// <param name="givenName">Given name, first name or names.</param>
        /// <param name="incognitoName">Family name, last name or Company Name.</param>
        /// <param name="incognitoGivenName">Given name, first name or names.</param>
        /// <param name="city">City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).</param>
        /// <param name="postalCode">Post Office Code number.</param>
        /// <param name="state">State or Province name (e.g., Texas).</param>
        /// <param name="countryCode">Code for a country or a nationality.</param>
        /// <param name="streetAddress">First Line of Street Address. For profile search it matches the first Address line.</param>
        /// <param name="keyword">Keyword associated to the profile.</param>
        /// <param name="communication">Any communication method associated to the profile such as phone, fax, eMail id.</param>
        /// <param name="membership">Membership number associated to the profile.</param>
        /// <param name="membershipType">Member Type of searching profile.</param>
        /// <param name="membershipLevel">Membership level associated to the profile.</param>
        /// <param name="aRNumber">Account Receivable associated to the profile.</param>
        /// <param name="businessSegment">Business/Market Segment associated to the profile.</param>
        /// <param name="accountsReceivables">When true indicates that only profiles with AR account fetched.</param>
        /// <param name="corporateProfiles">When true indicates that only profiles with client id are searched for.</param>
        /// <param name="excludeIncompleteProfiles">When true indicates that only profiles with an Address Line 1 and Country or at least one Communications Type will be displayed.</param>
        /// <param name="negotiatedRates">When true indicates that this option has to be included in advanced search.</param>
        /// <param name="relatedProfileExcludeInactive">Indicates whether to exclude Inactive Profiles, when true indicates that only profiles with active status will be displayed.</param>
        /// <param name="realtedProfileIncludeHasHierarchyOnly">Include profiles that have one or more relationships in the search.</param>
        /// <param name="relatedProfileNegotiatedRates">When true indicates that this option has to be included in advanced search.</param>
        /// <param name="relatedProfileType">The types of Profile handled by the web service.</param>
        /// <param name="relatedProfileName">Family name, last name or Company Name.</param>
        /// <param name="protectedProfiles">Indicates whether to exclude Protected Profiles.</param>
        /// <param name="identificationNo">Any identification number associated with the profile such as Passport Number, StateID.</param>
        /// <param name="fetchInstructions">Room Ownership information associated with the profile.</param>
        /// <param name="allowedAction">Flag indicating whether Profile is Enrolled to Primary Membership Program.</param>
        /// <param name="predefinedFilterId">Unique ID of the Filter used to filter profiles.</param>
        /// <param name="predefinedFilterCode">Filter code.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching profiles. This object contains profile primary details,profile summary details,master info list containing code and description used as lookup for description.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProfileSummaries> GetProfilesAsync(bool? excludeInactive, string hotelId, bool? includeHasHierarchyOnly, bool? includePrimaryOwnersOnly, bool? includePurgeProfiles, int? limit, int? offset, SearchType? searchType, bool? summaryInfo, string searchString, bool? includeAnonymized, System.Collections.Generic.IEnumerable<Anonymous6> profileType, System.Collections.Generic.IEnumerable<string> profileIds, System.Collections.Generic.IEnumerable<string> externalReferenceIds, System.Collections.Generic.IEnumerable<string> externalSystemCodes, System.Collections.Generic.IEnumerable<string> corporateIds, string profileName, string givenName, string incognitoName, string incognitoGivenName, string city, string postalCode, string state, string countryCode, string streetAddress, string keyword, string communication, string membership, string membershipType, string membershipLevel, string aRNumber, System.Collections.Generic.IEnumerable<string> businessSegment, bool? accountsReceivables, bool? corporateProfiles, bool? excludeIncompleteProfiles, bool? negotiatedRates, bool? relatedProfileExcludeInactive, bool? realtedProfileIncludeHasHierarchyOnly, bool? relatedProfileNegotiatedRates, RelatedProfileType? relatedProfileType, string relatedProfileName, bool? protectedProfiles, string identificationNo, System.Collections.Generic.IEnumerable<Anonymous7> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous8> allowedAction, System.Collections.Generic.IEnumerable<string> vipCodes, double? predefinedFilterId, string predefinedFilterCode, System.Collections.Generic.IEnumerable<string> prioritieCodes, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles?");
            if (excludeInactive != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeInactive") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeInactive, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hotelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hotelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHasHierarchyOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHasHierarchyOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHasHierarchyOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePrimaryOwnersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePrimaryOwnersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePrimaryOwnersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePurgeProfiles != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePurgeProfiles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePurgeProfiles, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (summaryInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("summaryInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(summaryInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeAnonymized != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeAnonymized") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeAnonymized, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (profileType != null)
            {
                foreach (var item_ in profileType) { urlBuilder_.Append(System.Uri.EscapeDataString("profileType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (profileIds != null)
            {
                foreach (var item_ in profileIds) { urlBuilder_.Append(System.Uri.EscapeDataString("profileIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalReferenceIds != null)
            {
                foreach (var item_ in externalReferenceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("externalReferenceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalSystemCodes != null)
            {
                foreach (var item_ in externalSystemCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("externalSystemCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (corporateIds != null)
            {
                foreach (var item_ in corporateIds) { urlBuilder_.Append(System.Uri.EscapeDataString("corporateIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (profileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("profileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(profileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (givenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("givenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(givenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (incognitoName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("incognitoName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(incognitoName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (incognitoGivenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("incognitoGivenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(incognitoGivenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (city != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("city") + "=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postalCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postalCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("countryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (streetAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("streetAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(streetAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (keyword != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("keyword") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (communication != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("communication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (membership != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("membership") + "=").Append(System.Uri.EscapeDataString(ConvertToString(membership, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (membershipType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("membershipType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(membershipType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (membershipLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("membershipLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(membershipLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aRNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("aRNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aRNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (businessSegment != null)
            {
                foreach (var item_ in businessSegment) { urlBuilder_.Append(System.Uri.EscapeDataString("businessSegment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (accountsReceivables != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("accountsReceivables") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountsReceivables, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (corporateProfiles != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("corporateProfiles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(corporateProfiles, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeIncompleteProfiles != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeIncompleteProfiles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeIncompleteProfiles, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (negotiatedRates != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("negotiatedRates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(negotiatedRates, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (relatedProfileExcludeInactive != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("relatedProfileExcludeInactive") + "=").Append(System.Uri.EscapeDataString(ConvertToString(relatedProfileExcludeInactive, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (realtedProfileIncludeHasHierarchyOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("realtedProfileIncludeHasHierarchyOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(realtedProfileIncludeHasHierarchyOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (relatedProfileNegotiatedRates != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("relatedProfileNegotiatedRates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(relatedProfileNegotiatedRates, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (relatedProfileType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("relatedProfileType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(relatedProfileType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (relatedProfileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("relatedProfileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(relatedProfileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (protectedProfiles != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("protectedProfiles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(protectedProfiles, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (identificationNo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("identificationNo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(identificationNo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (allowedAction != null)
            {
                foreach (var item_ in allowedAction) { urlBuilder_.Append(System.Uri.EscapeDataString("allowedAction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (vipCodes != null)
            {
                foreach (var item_ in vipCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("vipCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (predefinedFilterId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("predefinedFilterId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(predefinedFilterId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (predefinedFilterCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("predefinedFilterCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(predefinedFilterCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prioritieCodes != null)
            {
                foreach (var item_ in prioritieCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("prioritieCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProfileSummaries>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("Profiles not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a profile
        /// </summary>
        /// <param name="profile">Request object for creation of profiles. This object contains profile details with unique identifiers for each profile. The standard optional Opera Context element is also included.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> PostProfileAsync(Profile2 profile, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return PostProfileAsync(profile, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a profile
        /// </summary>
        /// <param name="profile">Request object for creation of profiles. This object contains profile details with unique identifiers for each profile. The standard optional Opera Context element is also included.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> PostProfileAsync(Profile2 profile, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (profile == null)
                throw new System.ArgumentNullException("profile");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    //request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Headers.Authorization = new AuthenticationHeaderValue("Bearer", authorization);

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(profile, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get profile by ID
        /// </summary>
        /// <param name="profileId">Unique OPERA internal profile ID which is used to find any type of profile from OPERA. This ID is a primary identification of a profile in OPERA.</param>
        /// <param name="hotelId">Hotel Code used to filter hotel specific information regarding the profile.</param>
        /// <param name="logViewProfile">This element tells when the view profile should be logged.</param>
        /// <param name="showInactiveRoomOwners">Flag to show inactive Room Owners.</param>
        /// <param name="markAsRecentlyAccessed">Providing this flag marks the profile as recently accessed.</param>
        /// <param name="fetchInstructions">Delivery methods associated with the profile.</param>
        /// <param name="instructionParameterType">Simple type enumerating the different parameters accepted by a profile Instructions. Parameter names have the name of the instruction expecting it, and the parameter name itself.</param>
        /// <param name="value">Value of Profile Instruction Parameter</param>
        /// <param name="allowedAction">Flag indicating whether Profile is Enrolled to Primary Membership Program.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Profile> GetProfileAsync(string profileId, string hotelId, bool? logViewProfile, bool? showInactiveRoomOwners, bool? markAsRecentlyAccessed, System.Collections.Generic.IEnumerable<Anonymous9> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous10> instructionParameterType, System.Collections.Generic.IEnumerable<string> value, System.Collections.Generic.IEnumerable<Anonymous11> allowedAction, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetProfileAsync(profileId, hotelId, logViewProfile, showInactiveRoomOwners, markAsRecentlyAccessed, fetchInstructions, instructionParameterType, value, allowedAction, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get profile by ID
        /// </summary>
        /// <param name="profileId">Unique OPERA internal profile ID which is used to find any type of profile from OPERA. This ID is a primary identification of a profile in OPERA.</param>
        /// <param name="hotelId">Hotel Code used to filter hotel specific information regarding the profile.</param>
        /// <param name="logViewProfile">This element tells when the view profile should be logged.</param>
        /// <param name="showInactiveRoomOwners">Flag to show inactive Room Owners.</param>
        /// <param name="markAsRecentlyAccessed">Providing this flag marks the profile as recently accessed.</param>
        /// <param name="fetchInstructions">Delivery methods associated with the profile.</param>
        /// <param name="instructionParameterType">Simple type enumerating the different parameters accepted by a profile Instructions. Parameter names have the name of the instruction expecting it, and the parameter name itself.</param>
        /// <param name="value">Value of Profile Instruction Parameter</param>
        /// <param name="allowedAction">Flag indicating whether Profile is Enrolled to Primary Membership Program.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Profile> GetProfileAsync(string profileId, string hotelId, bool? logViewProfile, bool? showInactiveRoomOwners, bool? markAsRecentlyAccessed, System.Collections.Generic.IEnumerable<Anonymous9> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous10> instructionParameterType, System.Collections.Generic.IEnumerable<string> value, System.Collections.Generic.IEnumerable<Anonymous11> allowedAction, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{profileId}?");
            urlBuilder_.Replace("{profileId}", System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (hotelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hotelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (logViewProfile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("logViewProfile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(logViewProfile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showInactiveRoomOwners != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showInactiveRoomOwners") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showInactiveRoomOwners, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (markAsRecentlyAccessed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("markAsRecentlyAccessed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(markAsRecentlyAccessed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (instructionParameterType != null)
            {
                foreach (var item_ in instructionParameterType) { urlBuilder_.Append(System.Uri.EscapeDataString("instructionParameterType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (value != null)
            {
                foreach (var item_ in value) { urlBuilder_.Append(System.Uri.EscapeDataString("value") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (allowedAction != null)
            {
                foreach (var item_ in allowedAction) { urlBuilder_.Append(System.Uri.EscapeDataString("allowedAction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Profile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("Profile not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a profile by ID
        /// </summary>
        /// <param name="profileId">OPERA internal profile ID which is used to uniquely identify the profile in OPERA. This ID is a primary identification of a profile in OPERA.</param>
        /// <param name="profile">Request object for change/modification of profile details. This object contains modified profile details with unique identifiers for each profile. The standard optional Opera Context element is also included.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for change/modification of profile details. This object contains the profile details with unique identifiers for each profile. Also Success,Warnings and Errors related to this operation.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Profile> PutProfileAsync(string profileId, Profile3 profile, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return PutProfileAsync(profileId, profile, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a profile by ID
        /// </summary>
        /// <param name="profileId">OPERA internal profile ID which is used to uniquely identify the profile in OPERA. This ID is a primary identification of a profile in OPERA.</param>
        /// <param name="profile">Request object for change/modification of profile details. This object contains modified profile details with unique identifiers for each profile. The standard optional Opera Context element is also included.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for change/modification of profile details. This object contains the profile details with unique identifiers for each profile. Also Success,Warnings and Errors related to this operation.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Profile> PutProfileAsync(string profileId, Profile3 profile, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");

            if (profile == null)
                throw new System.ArgumentNullException("profile");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{profileId}");
            urlBuilder_.Replace("{profileId}", System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(profile, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Profile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forget or delete a profile by ID
        /// </summary>
        /// <param name="profileId">OPERA internal profile ID which is used to uniquely identify the profile in OPERA. This ID is a primary identification of a profile in OPERA.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> DeleteProfileAsync(string profileId, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return DeleteProfileAsync(profileId, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forget or delete a profile by ID
        /// </summary>
        /// <param name="profileId">OPERA internal profile ID which is used to uniquely identify the profile in OPERA. This ID is a primary identification of a profile in OPERA.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> DeleteProfileAsync(string profileId, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{profileId}");
            urlBuilder_.Replace("{profileId}", System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an Email.
        /// </summary>
        /// <param name="profileId">Profile ID linked to an Email.</param>
        /// <param name="emailMessageType">Request object for storing an email.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> StoreEmailAsync(string profileId, EmailMessageType2 emailMessageType, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return StoreEmailAsync(profileId, emailMessageType, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an Email.
        /// </summary>
        /// <param name="profileId">Profile ID linked to an Email.</param>
        /// <param name="emailMessageType">Request object for storing an email.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> StoreEmailAsync(string profileId, EmailMessageType2 emailMessageType, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");

            if (emailMessageType == null)
                throw new System.ArgumentNullException("emailMessageType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{profileId}/emails");
            urlBuilder_.Replace("{profileId}", System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailMessageType, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
        /// </summary>
        /// <param name="relationshipPrimaryProfile">Type of Profile to be fetched from OPERA.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching profile relationships.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProfileRelationships> GetProfileRelationshipsAsync(string profileId, bool? relationshipPrimaryProfile, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetProfileRelationshipsAsync(profileId, relationshipPrimaryProfile, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
        /// </summary>
        /// <param name="relationshipPrimaryProfile">Type of Profile to be fetched from OPERA.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching profile relationships.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProfileRelationships> GetProfileRelationshipsAsync(string profileId, bool? relationshipPrimaryProfile, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{profileId}/relationships?");
            urlBuilder_.Replace("{profileId}", System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (relationshipPrimaryProfile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("relationshipPrimaryProfile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(relationshipPrimaryProfile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProfileRelationships>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("ProfileRelationships not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
        /// </summary>
        /// <param name="hotelId">Hotel Code used to filter hotel specific information regarding the profile.</param>
        /// <param name="includePurgeProfiles">Providing this flag includes purged profiles in the result.</param>
        /// <param name="markAsRecentlyAccessed">Providing this flag marks the profile as recently accessed.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="fetchInstructions">Simple type for instructions that can be used in requests for partial operations to fetch past and future reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for showing stay history and future reservations of specific profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProfileStayHistory> GetStayHistoryAsync(string profileId, string hotelId, bool? includePurgeProfiles, bool? markAsRecentlyAccessed, System.Collections.Generic.IEnumerable<int> limit, System.Collections.Generic.IEnumerable<Anonymous12> fetchInstructions, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetStayHistoryAsync(profileId, hotelId, includePurgeProfiles, markAsRecentlyAccessed, limit, fetchInstructions, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
        /// </summary>
        /// <param name="hotelId">Hotel Code used to filter hotel specific information regarding the profile.</param>
        /// <param name="includePurgeProfiles">Providing this flag includes purged profiles in the result.</param>
        /// <param name="markAsRecentlyAccessed">Providing this flag marks the profile as recently accessed.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="fetchInstructions">Simple type for instructions that can be used in requests for partial operations to fetch past and future reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for showing stay history and future reservations of specific profile.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProfileStayHistory> GetStayHistoryAsync(string profileId, string hotelId, bool? includePurgeProfiles, bool? markAsRecentlyAccessed, System.Collections.Generic.IEnumerable<int> limit, System.Collections.Generic.IEnumerable<Anonymous12> fetchInstructions, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{profileId}/stayHistory?");
            urlBuilder_.Replace("{profileId}", System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture)));
            if (hotelId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hotelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePurgeProfiles != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePurgeProfiles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePurgeProfiles, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (markAsRecentlyAccessed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("markAsRecentlyAccessed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(markAsRecentlyAccessed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                foreach (var item_ in limit) { urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProfileStayHistory>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("StayHistory not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
        /// </summary>
        /// <param name="profileRelationship">Request object for creating profile relationship.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> PostProfileRelationshipAsync(string targetProfileId, string sourceProfileId, ProfileRelationship2 profileRelationship, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return PostProfileRelationshipAsync(targetProfileId, sourceProfileId, profileRelationship, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
        /// </summary>
        /// <param name="profileRelationship">Request object for creating profile relationship.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> PostProfileRelationshipAsync(string targetProfileId, string sourceProfileId, ProfileRelationship2 profileRelationship, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (targetProfileId == null)
                throw new System.ArgumentNullException("targetProfileId");

            if (sourceProfileId == null)
                throw new System.ArgumentNullException("sourceProfileId");

            if (profileRelationship == null)
                throw new System.ArgumentNullException("profileRelationship");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{sourceProfileId}/relationships/{targetProfileId}");
            urlBuilder_.Replace("{targetProfileId}", System.Uri.EscapeDataString(ConvertToString(targetProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceProfileId}", System.Uri.EscapeDataString(ConvertToString(sourceProfileId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(profileRelationship, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
        /// </summary>
        /// <param name="profileRelationshipToBeChanged">Request object for changing profile relationship.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Existing Operations Responses will eventually be modified to be extended from this type.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> PutProfileRelationshipAsync(string targetProfileId, string sourceProfileId, ProfileRelationshipToBeChanged2 profileRelationshipToBeChanged, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return PutProfileRelationshipAsync(targetProfileId, sourceProfileId, profileRelationshipToBeChanged, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
        /// </summary>
        /// <param name="profileRelationshipToBeChanged">Request object for changing profile relationship.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Existing Operations Responses will eventually be modified to be extended from this type.</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> PutProfileRelationshipAsync(string targetProfileId, string sourceProfileId, ProfileRelationshipToBeChanged2 profileRelationshipToBeChanged, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (targetProfileId == null)
                throw new System.ArgumentNullException("targetProfileId");

            if (sourceProfileId == null)
                throw new System.ArgumentNullException("sourceProfileId");

            if (profileRelationshipToBeChanged == null)
                throw new System.ArgumentNullException("profileRelationshipToBeChanged");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{sourceProfileId}/relationships/{targetProfileId}");
            urlBuilder_.Replace("{targetProfileId}", System.Uri.EscapeDataString(ConvertToString(targetProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceProfileId}", System.Uri.EscapeDataString(ConvertToString(sourceProfileId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(profileRelationshipToBeChanged, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
        /// </summary>
        /// <param name="sourceRelation">Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).</param>
        /// <param name="targetRelation">Indicates the type of relationship the related profile(Target Profile) has with the current profile(Source Profile).</param>
        /// <param name="primary">Indicates if this relationship is the primary relationship.</param>
        /// <param name="sourceRelationDescription">Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).This needs to be passed if the attribute primary is sent as true.</param>
        /// <param name="targetRelationDescription">Displays the description of relationship the related profile(Target Profile) has with the current profile(Source Profile).</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> RemoveProfileRelationshipAsync(string targetProfileId, string sourceProfileId, string sourceRelation, string targetRelation, bool? primary, string sourceRelationDescription, string targetRelationDescription, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return RemoveProfileRelationshipAsync(targetProfileId, sourceProfileId, sourceRelation, targetRelation, primary, sourceRelationDescription, targetRelationDescription, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
        /// </summary>
        /// <param name="sourceRelation">Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).</param>
        /// <param name="targetRelation">Indicates the type of relationship the related profile(Target Profile) has with the current profile(Source Profile).</param>
        /// <param name="primary">Indicates if this relationship is the primary relationship.</param>
        /// <param name="sourceRelationDescription">Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).This needs to be passed if the attribute primary is sent as true.</param>
        /// <param name="targetRelationDescription">Displays the description of relationship the related profile(Target Profile) has with the current profile(Source Profile).</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> RemoveProfileRelationshipAsync(string targetProfileId, string sourceProfileId, string sourceRelation, string targetRelation, bool? primary, string sourceRelationDescription, string targetRelationDescription, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (targetProfileId == null)
                throw new System.ArgumentNullException("targetProfileId");

            if (sourceProfileId == null)
                throw new System.ArgumentNullException("sourceProfileId");

            if (sourceRelation == null)
                throw new System.ArgumentNullException("sourceRelation");

            if (targetRelation == null)
                throw new System.ArgumentNullException("targetRelation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{sourceProfileId}/relationships/{targetProfileId}?");
            urlBuilder_.Replace("{targetProfileId}", System.Uri.EscapeDataString(ConvertToString(targetProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{sourceProfileId}", System.Uri.EscapeDataString(ConvertToString(sourceProfileId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("sourceRelation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sourceRelation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("targetRelation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(targetRelation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (primary != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("primary") + "=").Append(System.Uri.EscapeDataString(ConvertToString(primary, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sourceRelationDescription != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sourceRelationDescription") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sourceRelationDescription, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (targetRelationDescription != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("targetRelationDescription") + "=").Append(System.Uri.EscapeDataString(ConvertToString(targetRelationDescription, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Merge two profiles by ID
        /// </summary>
        /// <param name="survivorProfileId">Original Profile ID to which profiles will be merged in OPERA.</param>
        /// <param name="profileToBeMerged">Request object for merging profiles.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Status> MergeProfilesAsync(string survivorProfileId, ProfileToBeMerged2 profileToBeMerged, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return MergeProfilesAsync(survivorProfileId, profileToBeMerged, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merge two profiles by ID
        /// </summary>
        /// <param name="survivorProfileId">Original Profile ID to which profiles will be merged in OPERA.</param>
        /// <param name="profileToBeMerged">Request object for merging profiles.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="CustomerExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Status> MergeProfilesAsync(string survivorProfileId, ProfileToBeMerged2 profileToBeMerged, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (survivorProfileId == null)
                throw new System.ArgumentNullException("survivorProfileId");

            if (profileToBeMerged == null)
                throw new System.ArgumentNullException("profileToBeMerged");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/profiles/{survivorProfileId}/merges");
            urlBuilder_.Replace("{survivorProfileId}", System.Uri.EscapeDataString(ConvertToString(survivorProfileId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(profileToBeMerged, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new CustomerExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new CustomerExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new CustomerExeption(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new CustomerExeption(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Request object for creation of company/agent/group/source profile. This object contains profile details with unique identifiers of a profile. The standard optional Opera Context element is also included.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Company
    {
        /// <summary>
        /// Unique identifiers of Profile for both internal and external systems. In case of Travel Agent the IATA code and in case of Company can be any form of identifier as ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList CompanyIdList { get; set; }

        /// <summary>
        /// External Reference information for Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ExternalReferencesType ExternalReferences { get; set; }

        /// <summary>
        /// Provides detailed information of a company profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyProfileType CompanyDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UniqueID_Type
    {
        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// This type contains unique information of external reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExternalReferencesType : System.Collections.ObjectModel.Collection<ExternalReferenceType>
    {

    }

    /// <summary>
    /// This type contains unique information of external reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExternalReferenceType
    {
        /// <summary>
        /// Unique ID of external reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// ID context for external reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

    }

    /// <summary>
    /// Type provides the detailed information about the profile and its children.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanyProfileType
    {
        /// <summary>
        /// Detailed company information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyType Company { get; set; }

        /// <summary>
        /// The profile image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageSetType ProfileImage { get; set; }

        /// <summary>
        /// List of customer addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses Addresses { get; set; }

        /// <summary>
        /// Business/Market Segment associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessSegments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> BusinessSegments { get; set; }

        /// <summary>
        /// Territory associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("territory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Territory { get; set; }

        /// <summary>
        /// Trace Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TraceCode { get; set; }

        /// <summary>
        /// Owner Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Influence Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("influenceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InfluenceCode { get; set; }

        /// <summary>
        /// List of Telephone Number Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Telephones Telephones { get; set; }

        /// <summary>
        /// List of email address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Emails Emails { get; set; }

        /// <summary>
        /// List of Information on a URL for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLs URLs { get; set; }

        /// <summary>
        /// List of Notes for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        /// <summary>
        /// List of loyalty program(s) the profile is subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileMemberships ProfileMemberships { get; set; }

        /// <summary>
        /// List of customer preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferenceCollection PreferenceCollection { get; set; }

        /// <summary>
        /// List of customer keywords.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Keywords Keywords { get; set; }

        /// <summary>
        /// List of profile negotiated rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NegotiatedRates NegotiatedRates { get; set; }

        /// <summary>
        /// List of channel negotiated rates that this profile has been assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GdsNegotiatedRates GdsNegotiatedRates { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ProfileIndicators { get; set; }

        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationships Relationships { get; set; }

        /// <summary>
        /// Information on last stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastStayInfoType LastStayInfo { get; set; }

        /// <summary>
        /// Detailed information on access type associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileAccessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileAccessType ProfileAccessType { get; set; }

        /// <summary>
        /// Detailed information on restrictions associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileRestrictions ProfileRestrictions { get; set; }

        /// <summary>
        /// Contains collection of mailing action list associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mailingActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MailingActionsType MailingActions { get; set; }

        /// <summary>
        /// Contains privacy related information associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivacyInfoType PrivacyInfo { get; set; }

        /// <summary>
        /// Contains cashiering related details for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCashieringType Cashiering { get; set; }

        /// <summary>
        /// Contains commission related details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileCommissionType> CommissionInfoList { get; set; }

        /// <summary>
        /// Collections of user defined fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDefinedFieldsType UserDefinedFields { get; set; }

        /// <summary>
        /// List of Web User Accounts of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webUserAccounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WebUserAccountsType WebUserAccounts { get; set; }

        /// <summary>
        /// Profile information about tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileTaxInfoType TaxInfo { get; set; }

        /// <summary>
        /// Sales information of the profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesInfoType SalesInfo { get; set; }

        /// <summary>
        /// E-Certificate associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ECertificatesType ECertificates { get; set; }

        /// <summary>
        /// List of profile subscriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileSubscriptionListType Subscriptions { get; set; }

        /// <summary>
        /// Localization Guest Type associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localizationGuestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LocalizationGuestType { get; set; }

        /// <summary>
        /// Eligible for Fiscal Folio/Payload generation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eligibleForFiscalFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EligibleForFiscalFolio { get; set; }

        /// <summary>
        /// Type of profile such as Agent, Company, Group and Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompanyProfileTypeType? ProfileType { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// Hotel which this profile is registered with. This attribute is not used for configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

        /// <summary>
        /// Hotel which this profile is to be registered. This attribute is only used during creation of profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestForHotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RequestForHotel { get; set; }

        /// <summary>
        /// What level this profile is protected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProtectedBy { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Mark this profile as recently accessed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markAsRecentlyAccessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkAsRecentlyAccessed { get; set; }

        /// <summary>
        /// "true" setting marks the profile to be kept from being purged, once the profile is marked inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markForHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkForHistory { get; set; }

        /// <summary>
        /// Populates true if the profile has commission configured false otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCommission { get; set; }

        /// <summary>
        /// Flag to indicate if the negotiated rates are inherited from master profile. Flag is available only when the profile is linked to master profile and master profile has negotiated rate codes attached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inheritedNegRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InheritedNegRates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanyType
    {
        /// <summary>
        /// Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Second Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName2 { get; set; }

        /// <summary>
        /// Third Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName3 { get; set; }

        /// <summary>
        /// Alternate Name of the Company. Mainly, it's the name of the company written in the Alternate Language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AlternateName { get; set; }

        /// <summary>
        /// Alternate Language of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AlternateLanguage { get; set; }

        /// <summary>
        /// A jurisdiction(Territory) in which a company is authorized to do business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string BusinessLocale { get; set; }

        /// <summary>
        /// IATA Information of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iATAInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IATAInfoType IATAInfo { get; set; }

        /// <summary>
        /// Business Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BusinessTitle { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Nationality code identification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nationality { get; set; }

        /// <summary>
        /// Nationality code description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationalityDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NationalityDescription { get; set; }

        /// <summary>
        /// Commission code of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// Credit Rating of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreditRating { get; set; }

        /// <summary>
        /// The type of corporate ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CorporateIdType { get; set; }

        /// <summary>
        /// VIP status of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipStatus { get; set; }

        /// <summary>
        /// Description of the VIP status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string VipDescription { get; set; }

        /// <summary>
        /// This element tells if profile is blacklisted or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Blacklist { get; set; }

    }

    /// <summary>
    /// IATA Information of the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IATAInfoType
    {
        /// <summary>
        /// IATA Company Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iATACompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IATACompany { get; set; }

        /// <summary>
        /// IATA Consortia.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iATAConsortia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string IATAConsortia { get; set; }

        /// <summary>
        /// IATA Validation Result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iATAValidationResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IATAValidationResult { get; set; }

    }

    /// <summary>
    /// Represents on image set record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ImageSetType
    {
        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// The image set name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(800)]
        public string ImageSet { get; set; }

        /// <summary>
        /// The image set sequence ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SequenceId { get; set; }

        /// <summary>
        /// The image set enumerated style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageStyleType? ImageStyle { get; set; }

        /// <summary>
        /// The image set type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ImageType { get; set; }

        /// <summary>
        /// The image set hotel code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The image set chain code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChainCode { get; set; }

        /// <summary>
        /// The image set URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ImageURL { get; set; }

        /// <summary>
        /// The image set description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// The image set order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageOrder { get; set; }

        /// <summary>
        /// The image set website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Website { get; set; }

    }

    /// <summary>
    /// An enumeration of image styles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ImageStyleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Thumbnail")]
        Thumbnail = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Icon")]
        Icon = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Square")]
        Square = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Banner")]
        Banner = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Button")]
        Button = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Lowres")]
        Lowres = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Highres")]
        Highres = 7,

    }

    /// <summary>
    /// Provides address information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddressInfoType
    {
        /// <summary>
        /// Address details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType Address { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Provides address information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddressType
    {
        /// <summary>
        /// Indicator to define if the Address is validated by the Address Validation System.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValidated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValidated { get; set; }

        /// <summary>
        /// When the address is unformatted (FormattedInd="false") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CityName { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Post Office City Extension Code number. City Extension mainly used for UK addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CityExtension { get; set; }

        /// <summary>
        /// County or District Name (e.g., Fairfax). This is read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string County { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType Country { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Defines the type of address (e.g. home, business, other).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Indicates whether to update the reservations or not. If true and the address is primary, then all associated active reservations will be updated with the new primary address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateReservations { get; set; }

        /// <summary>
        /// The postal barcode for the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BarCode { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Code for a country or a nationality.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CountryNameType
    {
        /// <summary>
        /// Used for Character Strings, length 0 to 200.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Value { get; set; }

        /// <summary>
        /// Code for a country or a nationality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Information on a telephone number for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TelephoneInfoType
    {
        /// <summary>
        /// Phone details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneType Telephone { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Information on a telephone number for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TelephoneType
    {
        /// <summary>
        /// Indicates type of technology associated with this telephone number, such as Voice, Data, Fax, Pager, Mobile, TTY, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneTechType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PhoneTechType { get; set; }

        /// <summary>
        /// Describes the type of telephone number, in the context of its general use (e.g. Home, Business, Emergency Contact, Travel Arranger, Day, Evening).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneUseType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PhoneUseType { get; set; }

        /// <summary>
        /// Description of the PhoneUseType code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneUseTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PhoneUseTypeDescription { get; set; }

        /// <summary>
        /// Telephone number assigned to a single location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Extension to reach a specific party at the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Extension { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Information on an email for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EmailInfoType
    {
        /// <summary>
        /// eMail deatils for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailType Email { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Information on an email for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EmailType
    {
        /// <summary>
        /// Defines the e-mail address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Defines the purpose of the e-mail address (e.g. personal, business, listserve).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the Type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// Supported Email format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailTypeEmailFormat? EmailFormat { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Web site address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class URLInfoType
    {
        /// <summary>
        /// Provides URL information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLType Url { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Web site address, in IETF(The Internet Engineering Task Force) specified format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class URLType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Defines the purpose of the URL address, such as personal, business, public, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the Type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    /// <summary>
    /// Comment related to the profile/reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CommentInfoType
    {
        /// <summary>
        /// Comment details for the comment. It will be empty in case of delete comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentType Comment { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// An indication of a new paragraph for a sub-section of a formatted text message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CommentType
    {
        /// <summary>
        /// Formatted text content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormattedTextTextType Text { get; set; }

        /// <summary>
        /// Specifies Comment's Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CommentTitle { get; set; }

        /// <summary>
        /// Notification Location associated with the Note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NotificationLocation { get; set; }

        /// <summary>
        /// Specifies type of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Comment type Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, the comment may not be shown to the consumer. When false, the comment may be shown to the consumer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Internal { get; set; }

        /// <summary>
        /// When true, the comment may be confidential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confidential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Confidential { get; set; }

        /// <summary>
        /// When true, the note internal could be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideInternal { get; set; }

        /// <summary>
        /// When true, the note title will be populated from the note type description and couldn't be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProtectDescription { get; set; }

        /// <summary>
        /// If specified comment belongs to the Hotel, otherwise it is a global comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Specifies type of action described in the comments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ActionType { get; set; }

        /// <summary>
        /// Indicates at which date an action described in the comment must be taken.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActionDate { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Provides text and indicates whether it is formatted or not.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FormattedTextTextType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

    }

    /// <summary>
    /// Detailed information of the memberships.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileMembershipType
    {
        /// <summary>
        /// Additional comments regarding to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParagraphType Comment { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newMembershipNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NewMembershipNumber { get; set; }

        /// <summary>
        /// Name to be displayed on the membership card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameOnCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// Description of the membership program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("programDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ProgramDescription { get; set; }

        /// <summary>
        /// Indicates the membership level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipLevel { get; set; }

        /// <summary>
        /// Indicates the membership level description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevelDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string MembershipLevelDescription { get; set; }

        /// <summary>
        /// Indicates the membership class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipClass { get; set; }

        /// <summary>
        /// Earning preference to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earningPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MembershipEarningPreferenceType? EarningPreference { get; set; }

        /// <summary>
        /// Indicates whether membership is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// benefits for the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BenefitsType Benefits { get; set; }

        /// <summary>
        /// Defines the degree of participation for this membership in the tier management portion of the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tierAdministration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierAdministrationType? TierAdministration { get; set; }

        /// <summary>
        /// Defines how downgrading will be handled for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DowngradeType? Downgrade { get; set; }

        /// <summary>
        /// The status of issuing new membership card to the member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reIssueNewCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardReIssueType? ReIssueNewCard { get; set; }

        /// <summary>
        /// True if you want to exclude the member from the Membership Fulfillment extract,the member's actions will not be included in the fulfillment extract until this value set to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeFromBatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeFromBatch { get; set; }

        /// <summary>
        /// Indicates Upgrade information which includes member's next tier level, requirements for the next upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string UpgradeDescription { get; set; }

        /// <summary>
        /// Indicates information regarding the member's possible downgrades.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string DowngradeDescription { get; set; }

        /// <summary>
        /// Value Rating Type Description for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Rating { get; set; }

        /// <summary>
        /// Indicates how the guest enrolled in the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipEnrollmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipEnrollmentCode { get; set; }

        /// <summary>
        /// Indicates where the guest is in the membership enrollment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MemberStatus { get; set; }

        /// <summary>
        /// Profile MemberShip Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentPoints { get; set; }

        /// <summary>
        /// Label used to refer to points for this membership type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pointsLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PointsLabel { get; set; }

        /// <summary>
        /// Source from where the enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentSource { get; set; }

        /// <summary>
        /// Resort/CRO where enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentResort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentResort { get; set; }

        /// <summary>
        /// Preferred Card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreferredCard { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipId { get; set; }

        /// <summary>
        /// Type of membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipType { get; set; }

        /// <summary>
        /// Indicator if Membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembershipYn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string PrimaryMembershipYn { get; set; }

        /// <summary>
        /// Boolean indicator set to True implies membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryMembership { get; set; }

        /// <summary>
        /// Membership ID Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipIdNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MembershipIdNo { get; set; }

        /// <summary>
        /// Ranking assigned to the Player Profile by the Gaming system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerRanking { get; set; }

        /// <summary>
        /// Indicates how the award points for this membership type will be managed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("centralSetup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CentralSetup { get; set; }

        /// <summary>
        /// Indicates when the member signed up for the loyalty program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SignupDate { get; set; }

        /// <summary>
        /// Indicates the starting date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }

        /// <summary>
        /// Indicates the ending date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpireDate { get; set; }

        /// <summary>
        /// When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDateExclusiveIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpireDateExclusiveIndicator { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// An indication of a new paragraph for a sub-section of a formatted text message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ParagraphType
    {
        /// <summary>
        /// Formatted text content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormattedTextTextType Text { get; set; }

        /// <summary>
        /// A URL for this paragraph.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

    }

    /// <summary>
    /// The earning preference of a membership, it depends on the type of property. eg. when the property is a airline it should be Miles, other than Points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MembershipEarningPreferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Points")]
        Points = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Miles")]
        Miles = 1,

    }

    /// <summary>
    /// Basic information about membership benefit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BenefitsType : System.Collections.ObjectModel.Collection<BenefitType>
    {

    }

    /// <summary>
    /// Basic information about membership benefit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BenefitType
    {
        /// <summary>
        /// Benefit code associated with a membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Processing message for membership benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Message { get; set; }

        /// <summary>
        /// Indicates whether membership benefit is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

    }

    /// <summary>
    /// Do not upgrade membership. The membership may be downgraded.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TierAdministrationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NoUpgrade")]
        NoUpgrade = 1,

    }

    /// <summary>
    /// Do not downgrade membership when the next downgrade process runs. When the downgrade process runs, the membership will be automatically set to Grace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum DowngradeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Grace")]
        Grace = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Never")]
        Never = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Period")]
        Period = 2,

    }

    /// <summary>
    /// Request to re issue a new card.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CardReIssueType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotApplicable")]
        NotApplicable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 2,

    }

    /// <summary>
    /// Preference details for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PreferenceTypeType
    {
        /// <summary>
        /// Collection of Preferences for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceType> Preference { get; set; }

        /// <summary>
        /// Preference group code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferenceType { get; set; }

        /// <summary>
        /// Preference group description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PreferenceTypeDescription { get; set; }

        /// <summary>
        /// Preference Sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Sequence { get; set; }

        /// <summary>
        /// Maximum quantity of preferences allowed per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxQuantity { get; set; }

        /// <summary>
        /// Available quantity of preferences (maximum quantity - Existing preferences)per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableQuantity { get; set; }

        /// <summary>
        /// Maximum quantity of preferences used by any resort per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResortUsedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxResortUsedQuantity { get; set; }

        /// <summary>
        /// Whether this preference is reservation preference or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReservationPreference { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Guest Preference details for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PreferenceType
    {
        /// <summary>
        /// Preference value for display purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string PreferenceValue { get; set; }

        /// <summary>
        /// Preference Description for display purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Whether this preference is property specific or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Global { get; set; }

        /// <summary>
        /// Source of the preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Source { get; set; }

        /// <summary>
        /// If specified preference belongs to the Hotels listed, otherwise it is a global preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Hotels { get; set; }

        [Newtonsoft.Json.JsonProperty("preferenceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferenceCode { get; set; }

        /// <summary>
        /// Specifies the count of preferences excluded for the attached reservation preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludedPreferencesCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExcludedPreferencesCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class KeywordType
    {
        /// <summary>
        /// The keyword new value, in case keyword value is modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywordDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KeywordDetailType KeywordDetail { get; set; }

        /// <summary>
        /// The type of keyword
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The keyword value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Keyword { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class KeywordDetailType
    {
        /// <summary>
        /// The new keyword value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newKeyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NewKeyword { get; set; }

    }

    /// <summary>
    /// This holds a list of NegotiatedInfoType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NegotiatedType
    {
        [Newtonsoft.Json.JsonProperty("negotiatedInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<NegotiatedInfoType> NegotiatedInfoList { get; set; }

        /// <summary>
        /// Hotel code for the negotiated rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Rate plan code for the negotiated rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateCode { get; set; }

    }

    /// <summary>
    /// This provides information for a profile negotiated rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NegotiatedInfoType
    {
        /// <summary>
        /// The master identifier for multiple offices/locations under the same company profile. This is optional
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateAgreementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CorporateAgreementId { get; set; }

        /// <summary>
        /// Informational purposes only in numeric format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ComissionCode { get; set; }

        /// <summary>
        /// The sell order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>
        /// Negotiated Rate is inactive or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    /// <summary>
    /// This holds a list of GdsNegotiatedInfoType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GdsNegotiatedType
    {
        /// <summary>
        /// List of channel negotiated rates for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<GdsNegotiatedInfoType> GdsNegotiatedInfoList { get; set; }

        /// <summary>
        /// Booking Channel Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingChannelCode { get; set; }

        /// <summary>
        /// Hotel Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Channel Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelRatePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChannelRatePlanCode { get; set; }

    }

    /// <summary>
    /// This provides information for a channel negotiated rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GdsNegotiatedInfoType
    {
        /// <summary>
        /// The GDS negotiated rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AccessCode { get; set; }

        /// <summary>
        /// The sell order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>
        /// The GDS Negotiated Rate is inactive or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    /// <summary>
    /// Collection of lamp indicators.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IndicatorsType : System.Collections.ObjectModel.Collection<IndicatorType>
    {

    }

    /// <summary>
    /// Lamp indicator Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IndicatorType
    {
        /// <summary>
        /// Name of the indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indicatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IndicatorName { get; set; }

        /// <summary>
        /// Indicates number of occurrences of the indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Relationship Type contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipInfoType
    {
        /// <summary>
        /// Information about the changes in relationship for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeRelationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChangeRelationsType ChangeRelationship { get; set; }

        /// <summary>
        /// Refer to Relationship Profile type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipProfileType RelationshipProfile { get; set; }

        /// <summary>
        /// Refer to Master Profile type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterAccountInfoType MasterAccountInfo { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Relation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string RelationDescription { get; set; }

        /// <summary>
        /// Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of the target relation(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    /// <summary>
    /// Detailed information regarding the changes made to relationships for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangeRelationsType
    {
        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Relation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string RelationDescription { get; set; }

        /// <summary>
        /// Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of the target relation(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipProfileType
    {
        /// <summary>
        /// Detailed information of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerType Customer { get; set; }

        /// <summary>
        /// Detailed information of the Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyType Company { get; set; }

        /// <summary>
        /// Information on telephone details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType Telephone { get; set; }

        /// <summary>
        /// Information on address details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInfoType Address { get; set; }

        /// <summary>
        /// Information on email address for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType Email { get; set; }

        /// <summary>
        /// Information on web url/address for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLInfoType URLs { get; set; }

        /// <summary>
        /// Primary Owner of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OwnerType PrimaryOwner { get; set; }

        /// <summary>
        /// Original profile details for which the relationships was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ProfileIdList { get; set; }

        /// <summary>
        /// Updated/changed profile details for the relationships created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeProfileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ChangeProfileIdList { get; set; }

        /// <summary>
        /// Indicates if this relationship is the primary relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Primary { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

    }

    /// <summary>
    /// Contains basic data on the customer's identity, location, relationships, finances, memberships, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerType
    {
        /// <summary>
        /// Detailed name information for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<PersonNameType> PersonName { get; set; }

        /// <summary>
        /// Provides information about the guest's anonymization status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnonymizationType Anonymization { get; set; }

        /// <summary>
        /// Name of the (self-professed) country that is claimed for citizenship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType CitizenCountry { get; set; }

        /// <summary>
        /// List of identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifications Identifications { get; set; }

        /// <summary>
        /// Profession of a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Profession { get; set; }

        /// <summary>
        /// Immigration/visa information of a foreign person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlienInfoType AlienInfo { get; set; }

        /// <summary>
        /// Country of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType BirthCountry { get; set; }

        /// <summary>
        /// Name Of the company the individual is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string LegalCompany { get; set; }

        /// <summary>
        /// Company Information of the Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyInfoType CompanyInfo { get; set; }

        /// <summary>
        /// Business Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BusinessTitle { get; set; }

        /// <summary>
        /// Identifies the gender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerTypeGender? Gender { get; set; }

        /// <summary>
        /// Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// Indicates the date of birth as masked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDateMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BirthDateMasked { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Nationality code identification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nationality { get; set; }

        /// <summary>
        /// Nationality code description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationalityDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NationalityDescription { get; set; }

        /// <summary>
        /// The supplier's ranking of the customer (e.g., VIP, numerical ranking).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CustomerValue { get; set; }

        /// <summary>
        /// Credit Rating of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreditRating { get; set; }

        /// <summary>
        /// VIP status of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipStatus { get; set; }

        /// <summary>
        /// Description of the VIP status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string VipDescription { get; set; }

        /// <summary>
        /// Place of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BirthPlace { get; set; }

        /// <summary>
        /// This element tells profile is property exclusive or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrivateProfile { get; set; }

        /// <summary>
        /// This element tells if profile is blacklisted or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Blacklist { get; set; }

    }

    /// <summary>
    /// This provides name information for a person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PersonNameType
    {
        /// <summary>
        /// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// The middle name of the person name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Family name, last name. May also be used for full name if the sending system does not have the ability to separate a full name into its parts, e.g. the surname element may be used to pass the full name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        /// <summary>
        /// Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Title Suffix. Must be populated if ADVANCED_TITLE is on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitleSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NameTitleSuffix { get; set; }

        /// <summary>
        /// Envelope Greeting of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("envelopeGreeting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EnvelopeGreeting { get; set; }

        /// <summary>
        /// Salutation of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salutation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Salutation { get; set; }

        /// <summary>
        /// Type of name of the individual, such as former, nickname, alternate or alias name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonNameTypeType? NameType { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

    }

    /// <summary>
    /// Person's name in an external system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PersonNameTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alternate")]
        Alternate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Incognito")]
        Incognito = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Phonetic")]
        Phonetic = 4,

    }

    /// <summary>
    /// Provides information about guest's anonymization status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AnonymizationType
    {
        /// <summary>
        /// Status of anonymization such as Requested or Anonymized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymizationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnonymizationStatusType? AnonymizationStatus { get; set; }

        /// <summary>
        /// Date and Time when the guest was anonymized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymizationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AnonymizationDate { get; set; }

    }

    /// <summary>
    /// Guest has been anonymized.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AnonymizationStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Anonymized")]
        Anonymized = 1,

    }

    /// <summary>
    /// Information on the identification of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IdentificationInfoType
    {
        /// <summary>
        /// Detailed information on the identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentificationType Identification { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Identification information of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IdentificationType
    {
        /// <summary>
        /// Identification Type. Eg Passport, Driving License etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string IdType { get; set; }

        /// <summary>
        /// Identification Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Masked Identification Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idNumberMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdNumberMasked { get; set; }

        /// <summary>
        /// The country where Identification was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IssuedCountry { get; set; }

        /// <summary>
        /// Issued date of Identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssuedDate { get; set; }

        /// <summary>
        /// The place where Identification was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IssuedPlace { get; set; }

        /// <summary>
        /// Expiration date of Identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        /// <summary>
        /// Property where the identification belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    /// <summary>
    /// immigration/visa information of a foreign person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AlienInfoType
    {
        /// <summary>
        /// Alien Registration Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienRegistrationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlienRegistrationNo { get; set; }

        /// <summary>
        /// Immigration Status on an Alien.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("immigrationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ImmigrationStatus { get; set; }

        /// <summary>
        /// Visa Type of an Alien.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaValidityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VisaValidityType { get; set; }

    }

    /// <summary>
    /// Company Information of the Profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanyInfoType
    {
        /// <summary>
        /// Legal Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LegalCompany { get; set; }

        /// <summary>
        /// Department of the Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Department { get; set; }

        /// <summary>
        /// Business Title or Position of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Position { get; set; }

    }

    /// <summary>
    /// Generic type for information about an owner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OwnerType
    {
        /// <summary>
        /// Hotel to which the owner belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Hotel { get; set; }

        /// <summary>
        /// Unique application user ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type UserId { get; set; }

        /// <summary>
        /// Unique application user name of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string UserName { get; set; }

        /// <summary>
        /// Unique Code to identify the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Unique owner profile information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Provides name information of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonNameType Name { get; set; }

        /// <summary>
        /// Department to which the owner belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Department { get; set; }

        /// <summary>
        /// Email information of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType Email { get; set; }

        /// <summary>
        /// Information on the telephone number of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType Phone { get; set; }

        /// <summary>
        /// Relationship of the owner within the profile or block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Relationship { get; set; }

        /// <summary>
        /// When true, this is a primary owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

    }

    /// <summary>
    /// This contains a generic code and description information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CodeDescriptionType
    {
        /// <summary>
        /// Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileId
    {
        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UniqueIDListType : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 1,

    }

    /// <summary>
    /// The types of Profile handled by the web service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
        Employee = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Vendor")]
        Vendor = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Purge")]
        Purge = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessHeader")]
        BusinessHeader = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingAccount")]
        BillingAccount = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Activity")]
        Activity = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Potential")]
        Potential = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Account")]
        Account = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MasterAccountInfoType
    {
        /// <summary>
        /// Unique ID of the Master account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type MasterAccountId { get; set; }

        /// <summary>
        /// Name of the Master account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MasterAccountName { get; set; }

    }

    /// <summary>
    /// Contains last stay related details for the profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LastStayInfoType
    {
        /// <summary>
        /// Used to hold last stay information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastVisit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastVisit { get; set; }

        /// <summary>
        /// Used to hold last room information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LastRoom { get; set; }

        /// <summary>
        /// Used to hold last rate information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType LastRate { get; set; }

        /// <summary>
        /// The total number of previous stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalStay { get; set; }

    }

    /// <summary>
    /// A monetary value expressed with a currency code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CurrencyAmountType
    {
        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileAccessType
    {
        /// <summary>
        /// Indicates the Chain code where the profile was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string ChainCode { get; set; }

        /// <summary>
        /// Indicates the CRO code where the profile was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("croCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CroCode { get; set; }

        /// <summary>
        /// Indicates the Hotel code where the profile was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string HotelId { get; set; }

        /// <summary>
        /// Indicates whether the profile is shared at the following levels : global/property/CRO
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileSharedLevelType? SharedLevel { get; set; }

    }

    /// <summary>
    /// Simple types for Shared level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileSharedLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cro")]
        Cro = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileRestrictions
    {
        /// <summary>
        /// Restriction reason associated with the current profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Reason { get; set; }

        /// <summary>
        /// Description of restriction reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ReasonDescription { get; set; }

        /// <summary>
        /// True indicates there are restrictions associated with the current profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restricted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restricted { get; set; }

    }

    /// <summary>
    /// Defines mailing action list for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MailingActionsType
    {
        /// <summary>
        /// Defines mailing action code and description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mailingAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CodeDescriptionType> MailingAction { get; set; }

        /// <summary>
        /// When true indicates that profile has subscribed to the mailing list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Defines Privacy related information for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PrivacyInfoType
    {
        /// <summary>
        /// Indicates if the profile participates in market research.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketResearchParticipation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarketResearchParticipation { get; set; }

        /// <summary>
        /// Indicate the last privacy prompt date of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastPrivacyPromptDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPrivacyPromptDate { get; set; }

        /// <summary>
        /// Indicates if the profile is ok getting info from third parties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("infoFromThirdParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InfoFromThirdParty { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to be automatically enrolled in the property's loyalty program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoEnrollLoyaltyProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoEnrollLoyaltyProgram { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to allow phone calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowPhone { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to allow SMS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowSMS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowSMS { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to allow Email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowEmail { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Mailing List.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInMailingList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInMailingList { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Market Research.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInMarketResearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInMarketResearch { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Third Party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInThirdParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInThirdParty { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Auto Enrolment Member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInAutoEnrollmentMember", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInAutoEnrollmentMember { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInPhone { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for SMS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInSms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInSms { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInEmail { get; set; }

    }

    /// <summary>
    /// Contains cashiering related details for the profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileCashieringType
    {
        /// <summary>
        /// Contains the direct billing related information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("directBillingList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<DirectBillingType> DirectBillingList { get; set; }

        /// <summary>
        /// Contains the auto folio settlement type for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoFolioSettlementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AutoFolioSettlementType { get; set; }

        /// <summary>
        /// Ability to define on the account, the number of days after which the invoice should be paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentDueDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PaymentDueDays { get; set; }

        /// <summary>
        /// Tax1 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent1 { get; set; }

        /// <summary>
        /// Tax2 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent2 { get; set; }

        /// <summary>
        /// Tax3 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent3 { get; set; }

        /// <summary>
        /// Tax4 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent4 { get; set; }

        /// <summary>
        /// Tax5 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent5 { get; set; }

        /// <summary>
        /// Account Receivables Central Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arNoCentral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ArNoCentral { get; set; }

        /// <summary>
        /// Reference Currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceCurrency { get; set; }

        /// <summary>
        /// VAT Offset Flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vATOffsetYN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string VATOffsetYN { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

    }

    /// <summary>
    /// This is the preconfigured routing instruction type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DirectBillingType
    {
        /// <summary>
        /// Hotel Code for which the details of direct billing is provided for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Hotel Code for which the details of direct billing is provided for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aRNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ARNumber { get; set; }

    }

    /// <summary>
    /// This is the preconfigured routing instruction type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileCommissionType
    {
        /// <summary>
        /// Hotel Code for the commission being used for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// commission Code for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// Bank account used for the commission for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BankAccount { get; set; }

        /// <summary>
        /// Type of payment associated with the bank account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommissionPaymentMethods? PaymentMethod { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

    }

    /// <summary>
    /// Check
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CommissionPaymentMethods
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cent")]
        Cent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Eft")]
        Eft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Chk")]
        Chk = 2,

    }

    /// <summary>
    /// A common type used to hold user defined fields(UDFs). This type should be used to handle UDFs on RReservation, Profiles, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserDefinedFieldsType
    {
        /// <summary>
        /// Collection of user defined fields of Character/String Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("characterUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CharacterUDFsType CharacterUDFs { get; set; }

        /// <summary>
        /// Collection of user defined fields of Numeric Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numericUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public NumericUDFsType NumericUDFs { get; set; }

        /// <summary>
        /// Collection of user defined fields of Date Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DateUDFsType DateUDFs { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Character/String Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CharacterUDFsType : System.Collections.ObjectModel.Collection<CharacterUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Character/String Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CharacterUDFType
    {
        /// <summary>
        /// Used to hold user defined field of Character Type. It is highly recommended to use UDFC01, UDFC02,...UDFC40 (Total 40) as Character/String UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Numeric Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NumericUDFsType : System.Collections.ObjectModel.Collection<NumericUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Numeric Type. It is highly recommended to use UDFN01, UDFN02,...UDFN40 (Total 40) as Numeric UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NumericUDFType
    {
        /// <summary>
        /// Name of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Date Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DateUDFsType : System.Collections.ObjectModel.Collection<DateUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Date Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DateUDFType
    {
        /// <summary>
        /// Used to hold user defined field of Date Type. It is highly recommended to use UDFD01, UDFD02,...UDFN20 (Total 20) as Date UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// Web User Accounts List.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebUserAccountsType : System.Collections.ObjectModel.Collection<WebUserAccountType>
    {

    }

    /// <summary>
    /// Web User Account of the guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebUserAccountType
    {
        /// <summary>
        /// Security Question and its Code associated with the account to verify the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityQuestion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType SecurityQuestion { get; set; }

        /// <summary>
        /// Answer to the Security Question.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityAnswer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string SecurityAnswer { get; set; }

        /// <summary>
        /// Comments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Comments { get; set; }

        /// <summary>
        /// Web User Account History.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WebUserHistoryType History { get; set; }

        /// <summary>
        /// New Login Name of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newLoginName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NewLoginName { get; set; }

        /// <summary>
        /// Login Password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NewPassword { get; set; }

        /// <summary>
        /// A flag which determines if the password is auto generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoGeneratePassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoGeneratePassword { get; set; }

        /// <summary>
        /// Login Name of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loginName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string LoginName { get; set; }

        /// <summary>
        /// Domain code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DomainCode { get; set; }

        /// <summary>
        /// Boolean flag that indicates whether the web account is locked or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Locked { get; set; }

        /// <summary>
        /// Boolean flag that indicates whether the web account is inactive or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

    }

    /// <summary>
    /// Creation date time, Creator Id, last modification date time and last Modifier Id.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebUserHistoryType
    {
        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Last login date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastLogin { get; set; }

        /// <summary>
        /// Last Password change date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastPasswordChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPasswordChange { get; set; }

        /// <summary>
        /// Inactive date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InactiveDate { get; set; }

    }

    /// <summary>
    /// Profile information related to tax.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileTaxInfoType
    {
        /// <summary>
        /// The tax id of this profile. Usually issued by a government agency. Used by 1099 printing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax1No", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Tax1No { get; set; }

        /// <summary>
        /// Tax 2 id of this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax2No", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Tax2No { get; set; }

        /// <summary>
        /// Tax Category to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TaxCategory { get; set; }

        /// <summary>
        /// Tax Office to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxOffice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TaxOffice { get; set; }

        /// <summary>
        /// Tax type to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TaxType { get; set; }

        /// <summary>
        /// Business ID. The maximum length of this element should not exceed 120 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string BusinessId { get; set; }

        /// <summary>
        /// Business Registration Code. The maximum length of this element should not exceed 120 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string BusinessRegistration { get; set; }

    }

    /// <summary>
    /// Provides sales information about the profiles of type company, travel agent, source and contact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesInfoType
    {
        /// <summary>
        /// Defines the scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Scope { get; set; }

        /// <summary>
        /// Defines the scope city.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scopeCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ScopeCity { get; set; }

        /// <summary>
        /// Defines the account type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AccountType { get; set; }

        /// <summary>
        /// Defines the account source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AccountSource { get; set; }

        /// <summary>
        /// Defines the industry code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string IndustryCode { get; set; }

        /// <summary>
        /// Defines the Business segments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessSegments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BusinessSegments { get; set; }

        /// <summary>
        /// Defines the priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Priority { get; set; }

        /// <summary>
        /// Defines the rooms potential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomsPotential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RoomsPotential { get; set; }

        /// <summary>
        /// Defines the action code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ActionCode { get; set; }

        /// <summary>
        /// Defines the competition code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("competitionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CompetitionCode { get; set; }

        /// <summary>
        /// Defines the influence for the contact profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("influence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Influence { get; set; }

        /// <summary>
        /// Defines the Preferred Room for profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferredRoom { get; set; }

        /// <summary>
        /// Hotel Code used to filter the sales information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// List of e-certificates for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificatesType : System.Collections.ObjectModel.Collection<ECertificateType>
    {

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateType
    {
        /// <summary>
        /// System generated unique certificate id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CertificateId { get; set; }

        /// <summary>
        /// System generated unique voucher number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voucherNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VoucherNo { get; set; }

        /// <summary>
        /// Printed certificate no. This has to be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CertificateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("eCertificateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateInfoType ECertificateInfo { get; set; }

        /// <summary>
        /// Date of expiry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }

        /// <summary>
        /// New Date of expiry to extend e-certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewExpiryDate { get; set; }

        /// <summary>
        /// NameId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        [Newtonsoft.Json.JsonProperty("consumptionDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateConsumptionType ConsumptionDetail { get; set; }

        /// <summary>
        /// Status of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateStatusType? Status { get; set; }

        /// <summary>
        /// Print status of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Printed { get; set; }

        /// <summary>
        /// Date the record was marked as inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InactiveDate { get; set; }

        /// <summary>
        /// AwardID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardId AwardId { get; set; }

        /// <summary>
        /// External reference from which the record is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("databaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DatabaseId { get; set; }

        /// <summary>
        /// Source of e-certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateIssueSourceType? Source { get; set; }

        /// <summary>
        /// Process action issued the certificate. valid values are assigned (a),opt in (o) and purchased (p).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateIssueType? IssueType { get; set; }

        /// <summary>
        /// Date when certificate was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }

        /// <summary>
        /// Award points if any in case of certificate use membership award.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwardPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("generationDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateGenerationType GenerationDetail { get; set; }

        /// <summary>
        /// In case of in lieu of certificate this will contain the original voucher no.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalVoucherNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OriginalVoucherNo { get; set; }

        /// <summary>
        /// In case of in lieu of certificate this will contain the original certificate no.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalCertificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OriginalCertificateNo { get; set; }

        /// <summary>
        /// Seq of the in lieu of certificate. 1..n. original certificate will be treated as null = 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inLieuSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InLieuSequence { get; set; }

        /// <summary>
        /// Date on which the cancellation was requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelRequestDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CancelRequestDate { get; set; }

        /// <summary>
        /// Number of times e-certificate is already extended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extensionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExtensionCount { get; set; }

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateInfoType
    {
        /// <summary>
        /// User defined certificate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CertificateType { get; set; }

        /// <summary>
        /// Membership type to which the certificate is linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipType { get; set; }

        /// <summary>
        /// Award type to which the certificate is linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AwardCode { get; set; }

        /// <summary>
        /// Promotion code to which certificate is attached to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Voucher benefit code attached to the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voucherBenefitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VoucherBenefitCode { get; set; }

        /// <summary>
        /// Hotel to which certificate is attached to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hotels Hotels { get; set; }

        /// <summary>
        /// Description about the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Detail description about the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Label for the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Label { get; set; }

        /// <summary>
        /// Number of times e-certificate can be extended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxExtensionAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxExtensionAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("usageCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateUsageCriteriaType UsageCriteria { get; set; }

        /// <summary>
        /// Value of the certificate for the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Value { get; set; }

        /// <summary>
        /// Cost of certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Cost { get; set; }

        /// <summary>
        /// Summary of Benefits attached to this ECertificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefitSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string BenefitSummary { get; set; }

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is available for a specific list of hotels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MultiHotel")]
        MultiHotel = 2,

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateUsageCriteriaType
    {
        /// <summary>
        /// Indicates if certificate is to be used against reservation or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reservation { get; set; }

        /// <summary>
        /// Indicates if web certificate can be consumed in OWS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Web { get; set; }

        /// <summary>
        /// Indicates if certificate consumption allowable on the web.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WebAllowed { get; set; }

        /// <summary>
        /// Indicates to attach a rate code to the e-certificate as a benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Benefit { get; set; }

        /// <summary>
        /// Indicates if web certificate can be consumed in hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hotel { get; set; }

        /// <summary>
        /// Specify if the certificate number verification is required at time of consumption or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verifyCertificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VerifyCertificateNo { get; set; }

        /// <summary>
        /// Identify if cancel is allowed or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CancelAllowed { get; set; }

        /// <summary>
        /// Identify if in lieu of certificate can be generated or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generateInLieuCertificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GenerateInLieuCertificate { get; set; }

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateConsumptionType
    {
        /// <summary>
        /// Property where certificate was consumed for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Source of consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateConsumeSourceType? Source { get; set; }

        /// <summary>
        /// Last name of the person who consumed the certificate..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        /// <summary>
        /// First name of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string FirstName { get; set; }

        /// <summary>
        /// Middle name of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Email of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Email { get; set; }

        /// <summary>
        /// Date the certificate was consumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Application user who created the consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string UserName { get; set; }

        /// <summary>
        /// Any notes on the certificate entered at time of consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string UserNotes { get; set; }

        /// <summary>
        /// Any reference like reservation no etc against which the certificate was consumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ReferenceId { get; set; }

        /// <summary>
        /// Consumption location type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LocationType { get; set; }

        /// <summary>
        /// Authorization code for consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Date on which the service is due (arrival date in case of reservation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ServiceDate { get; set; }

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is consumed by hotelPMS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateConsumeSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Central")]
        Central = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 2,

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is reserved.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumed")]
        Consumed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Expired")]
        Expired = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Issued")]
        Issued = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 5,

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AwardId
    {
        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is issued by external system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateIssueSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Opera")]
        Opera = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Interface")]
        Interface = 2,

    }

    /// <summary>
    /// Indicates that guest purchased OPERA E-Certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateIssueType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Assigned")]
        Assigned = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OptedIn")]
        OptedIn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Purchased")]
        Purchased = 2,

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateGenerationType
    {
        /// <summary>
        /// Key to identify the generation rule id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type RuleId { get; set; }

        /// <summary>
        /// Reason for which e-certificate was generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generationDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string GenerationDetail { get; set; }

        /// <summary>
        /// Type of value that is in the certificate.valid values are membership_level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceValue { get; set; }

    }

    /// <summary>
    /// Details of the OPERA Profile subscription to external system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileSubscriptionListType : System.Collections.ObjectModel.Collection<ProfileSubscriptionType>
    {

    }

    /// <summary>
    /// Contains details of the profile subscription. The subscription represents the link between the OPERA profile and the external profile within a particular external system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileSubscriptionType
    {
        /// <summary>
        /// OPERA Profile ID that this subscription record corresponds to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Profile ID within the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ExternalProfileId { get; set; }

        /// <summary>
        /// This provides name information for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileInfo ProfileInfo { get; set; }

        /// <summary>
        /// Indicates if the profile was distributed to the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Distributed { get; set; }

        /// <summary>
        /// Indicates if the profile information should be overwritten by the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("force", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Force { get; set; }

        /// <summary>
        /// Timestamp when the profile was subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubscriptionDate { get; set; }

        /// <summary>
        /// Timestamp of the most recent distribution of this profile to the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastDistributionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastDistributionDate { get; set; }

        /// <summary>
        /// Timestamp of the most recent update of the subscription information by the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastExternalUpdateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastExternalUpdateDate { get; set; }

        /// <summary>
        /// Indicates whether this subscription is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Code of system where profile is subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string SystemCode { get; set; }

        /// <summary>
        /// Type of system where profile is subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string SystemType { get; set; }

    }

    /// <summary>
    /// The types of Profile handled by the web service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CompanyProfileTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Links : System.Collections.ObjectModel.Collection<InstanceLink>
    {

    }

    /// <summary>
    /// Metadata describing link description objects that MAY appear in the JSON instance representation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InstanceLink
    {
        /// <summary>
        /// URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the "templated" property must be set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Href { get; set; }

        /// <summary>
        /// Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Rel { get; set; }

        /// <summary>
        /// Boolean flag that specifies that "href" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Templated { get; set; } = false;

        /// <summary>
        /// HTTP method for requesting the target of the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstanceLinkMethod Method { get; set; }

        /// <summary>
        /// Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetSchema { get; set; }

        /// <summary>
        /// The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationId { get; set; }

        /// <summary>
        /// Exact copy of the "summary" field on the linked operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

    }

    /// <summary>
    /// Used in conjunction with the Success element to define a business error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WarningsType : System.Collections.ObjectModel.Collection<WarningType>
    {

    }

    /// <summary>
    /// Used when a message has been successfully processed to report any warnings or business errors that occurred.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WarningType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// An abbreviated version of the error in textual format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ShortText { get; set; }

        /// <summary>
        /// If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// If present, this URL refers to an online description of the error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DocURL { get; set; }

        /// <summary>
        /// If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Status { get; set; }

        /// <summary>
        /// If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Tag { get; set; }

        /// <summary>
        /// If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RecordId { get; set; }

        /// <summary>
        /// The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type ="Unknown".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Reference Place Holder used as an index for this warning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string Rph { get; set; }

    }

    /// <summary>
    /// Existing Operations Responses will eventually be modified to be extended from this type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Status
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

    }

    /// <summary>
    /// Complex type that contains error details for a REST call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExceptionDetailType
    {
        /// <summary>
        /// Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status code for this occurrence of the problem, set by the origin server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Human-readable description specific to this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>
        /// Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Application error code, which is different from HTTP error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorCode { get; set; }

        /// <summary>
        /// Path to the problem at the resource or property level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorPath { get; set; }

        /// <summary>
        /// Details of the error message, consisting of a hierarchical tree structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorInstance> O_errorDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

    }

    /// <summary>
    /// Complex type that contains error instance details for a REST call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorInstance
    {
        /// <summary>
        /// Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status code for this occurrence of the problem, set by the origin server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Human-readable description specific to this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>
        /// Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Application error code, which is different from HTTP error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorCode { get; set; }

        /// <summary>
        /// Path to the problem at the resource or property level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorPath { get; set; }

    }

    /// <summary>
    /// Object for creation of profiles. This object contains profile details with unique identifiers for each profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Profile
    {
        /// <summary>
        /// Unique identifiers for the Profile for both internal and external systems. In case of Travel Agent the IATA code and in case of Company can be any form of identifier as ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

        /// <summary>
        /// External Reference information for Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ExternalReferencesType ExternalReferences { get; set; }

        /// <summary>
        /// Provides detailed information regarding either a company or a customer profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileType ProfileDetails { get; set; }

        /// <summary>
        /// Provides the actions needed to apply on the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileAllowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public ProfileAllowedActionsType ProfileAllowedActions { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Type provides the detailed information about the profile and its children.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileType
    {
        /// <summary>
        /// Detailed customer information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerType Customer { get; set; }

        /// <summary>
        /// Detailed company information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyType Company { get; set; }

        /// <summary>
        /// The profile image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageSetType ProfileImage { get; set; }

        /// <summary>
        /// List of customer addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses2 Addresses { get; set; }

        /// <summary>
        /// Business/Market Segment associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessSegments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> BusinessSegments { get; set; }

        /// <summary>
        /// Territory associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("territory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Territory { get; set; }

        /// <summary>
        /// Trace Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TraceCode { get; set; }

        /// <summary>
        /// Owner Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Influence Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("influenceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InfluenceCode { get; set; }

        /// <summary>
        /// List of Telephone Number Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Telephones2 Telephones { get; set; }

        /// <summary>
        /// List of email address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Emails2 Emails { get; set; }

        /// <summary>
        /// List of Information on a URL for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLs2 URLs { get; set; }

        /// <summary>
        /// List of Notes for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments2 Comments { get; set; }

        /// <summary>
        /// List of Delivery methods configured against a Property for this Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileDeliveryMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileDeliveryMethods ProfileDeliveryMethods { get; set; }

        /// <summary>
        /// List of loyalty program(s) the profile is subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileMemberships2 ProfileMemberships { get; set; }

        /// <summary>
        /// List of customer preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferenceCollection2 PreferenceCollection { get; set; }

        /// <summary>
        /// List of customer keywords.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Keywords2 Keywords { get; set; }

        /// <summary>
        /// List of profile negotiated rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NegotiatedRates2 NegotiatedRates { get; set; }

        /// <summary>
        /// List of channel negotiated rates that this profile has been assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GdsNegotiatedRates2 GdsNegotiatedRates { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ProfileIndicators { get; set; }

        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationships2 Relationships { get; set; }

        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipsSummary2 RelationshipsSummary { get; set; }

        /// <summary>
        /// Collection of Detailed information on history and future reservations associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stayReservationInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationStayHistoryFutureInfoType StayReservationInfoList { get; set; }

        /// <summary>
        /// Information on last stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastStayInfoType LastStayInfo { get; set; }

        /// <summary>
        /// Detailed information on access type associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileAccessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileAccessType ProfileAccessType { get; set; }

        /// <summary>
        /// Detailed information on restrictions associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileRestrictions ProfileRestrictions { get; set; }

        /// <summary>
        /// Contains collection of mailing action list associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mailingActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MailingActionsType MailingActions { get; set; }

        /// <summary>
        /// Contains privacy related information associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivacyInfoType PrivacyInfo { get; set; }

        /// <summary>
        /// Contains cashiering related details for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCashieringType Cashiering { get; set; }

        /// <summary>
        /// Contains commission related details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileCommissionType> CommissionInfoList { get; set; }

        /// <summary>
        /// Collections of user defined fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDefinedFieldsType UserDefinedFields { get; set; }

        /// <summary>
        /// List of Web User Accounts of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webUserAccounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WebUserAccountsType WebUserAccounts { get; set; }

        /// <summary>
        /// Profile information about tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileTaxInfoType TaxInfo { get; set; }

        /// <summary>
        /// Sales information of the profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesInfoType SalesInfo { get; set; }

        /// <summary>
        /// E-Certificate assosiated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ECertificatesType ECertificates { get; set; }

        /// <summary>
        /// List of profile subscriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileSubscriptionListType Subscriptions { get; set; }

        /// <summary>
        /// Localization Guest Type assocaited to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localizationGuestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LocalizationGuestType { get; set; }

        /// <summary>
        /// Eligible for Fiscal Folio/Payload generation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eligibleForFiscalFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EligibleForFiscalFolio { get; set; }

        /// <summary>
        /// Room Ownership records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomOwnershipsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoomOwnershipsList RoomOwnershipsList { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType1 { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// Hotel which this profile is registered with. This attribute is not used for configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

        /// <summary>
        /// Hotel which this profile is to be registered. This attribute is only used during creation of profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestForHotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RequestForHotel { get; set; }

        /// <summary>
        /// What level this profile is protected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProtectedBy { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Mark this profile as recently accessed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markAsRecentlyAccessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkAsRecentlyAccessed { get; set; }

        /// <summary>
        /// "true" setting marks the profile to be kept from being purged, once the profile is marked inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markForHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkForHistory { get; set; }

        /// <summary>
        /// Populates true if the profile has commission configured false otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCommission { get; set; }

        /// <summary>
        /// Flag to indicate if the negotiated rates are inherited from master profile. Flag is available only when the profile is linked to master profile and master profile has negotiated rate codes attached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inheritedNegRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InheritedNegRates { get; set; }

        /// <summary>
        /// Flag to show inactive Room Owners.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showInactiveRoomOwners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowInactiveRoomOwners { get; set; }

    }

    /// <summary>
    /// Delivery Information type to the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileDeliveryMethod
    {
        /// <summary>
        /// Delivery ID. It will be empty in case of new delivery method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type DeliveryId { get; set; }

        /// <summary>
        /// Delivery type can have a value EMAIL, ELECTRONIC etc and it depends on the parameter set in OPERA Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// Delivery value holds the corresponding value of the delivery type..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DeliveryValue { get; set; }

        /// <summary>
        /// Property that has delivery methods configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Module where this delivery type will be used. Example : EFolio Export, EInvoice , Fiscal, etc..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryModule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileDeliveryModuleType? DeliveryModule { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    /// <summary>
    /// Module where this delivery type will be used. Example : EFolio Export, EInvoice , Fiscal, etc..
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileDeliveryModuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EfolioExport")]
        EfolioExport = 0,

    }

    /// <summary>
    /// RelationshipInfoSummaryType contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipInfoSummaryType
    {
        /// <summary>
        /// Refer to Relationship Profile Summary type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipProfileSummaryType RelationshipProfile { get; set; }

        /// <summary>
        /// Refer to Master Profile type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterAccountInfoType MasterAccountDetails { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string RelationshipID { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceRelation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string SourceRelationDescription { get; set; }

        /// <summary>
        /// Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of the target relation(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipProfileSummaryType
    {
        /// <summary>
        /// Name of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Telephone number assigned to a single location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Information on address details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipAddressType Address { get; set; }

        /// <summary>
        /// Defines the e-mail address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Unique Code to identify the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Original profile details for which the relationships was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ProfileIdList { get; set; }

        /// <summary>
        /// Indicates if this relationship is the primary relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? ProfileStatus { get; set; }

        /// <summary>
        /// When true, this is a primary owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryOwnerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryOwnerCode { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

    }

    /// <summary>
    /// Provides address information for a Relationship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipAddressType
    {
        /// <summary>
        /// When the address is unformatted (FormattedInd="false") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string City { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Country { get; set; }

    }

    /// <summary>
    /// Information of History and Future Reservation details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationStayHistoryFutureInfoType
    {
        /// <summary>
        /// Refer to History list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayHistoryListType HistoryList { get; set; }

        /// <summary>
        /// Refer to Future list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("futureList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayFutureListType FutureList { get; set; }

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StayHistoryListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : History reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StayReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// The Reservation class contains the current reservation being created or altered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StayReservationInfoType
    {
        /// <summary>
        /// Unique identifiers for the reservation for both internal and external systems
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// Collection of room stays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayInfoType RoomStay { get; set; }

        /// <summary>
        /// List of attached profiles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachedProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResAttachedProfileListType AttachedProfiles { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// Details on the Room Stay including Guest Counts, Time Span of this Room Stay, pointers to Res Guests, guest Memberships, Comments and Special Requests pertaining to this particular Room Stay and finally financial information related to the Room Stay, including Guarantee, Deposit and Payment and Cancellation Penalties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StayInfoType
    {
        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ArrivalDate { get; set; }

        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DepartureDate { get; set; }

        /// <summary>
        /// The Original Time Span covers the Room Stay dates of the original reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType OriginalTimeSpan { get; set; }

        /// <summary>
        /// The expected arrival, return and departure times of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResExpectedTimesType ExpectedTimes { get; set; }

        /// <summary>
        /// A collection of Guest Counts associated with Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adultCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdultCount { get; set; }

        /// <summary>
        /// A collection of Child Counts associated with Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChildCount { get; set; }

        /// <summary>
        /// Room class code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomClass { get; set; }

        /// <summary>
        /// Room type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        /// <summary>
        /// True indicates room type is a component type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("componentRoomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ComponentRoomType { get; set; }

        /// <summary>
        /// Room Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfRooms { get; set; }

        /// <summary>
        /// Room Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// Rate plan code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Rate amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType RateAmount { get; set; }

        /// <summary>
        /// The Points contains the number of points used to book a particular room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType Points { get; set; }

        /// <summary>
        /// Whether this rate should be suppressed from view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateSuppressed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateSuppressed { get; set; }

        /// <summary>
        /// Key information about the block for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationBlockType ReservationBlock { get; set; }

        /// <summary>
        /// Booking channel code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingChannelCode { get; set; }

        /// <summary>
        /// Party code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LinkCode { get; set; }

        /// <summary>
        /// True if the rate is a fixed rate, otherwise false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FixedRate { get; set; }

        /// <summary>
        /// The total amount charged for the Room Stay including additional occupant amounts and fees. If TaxInclusive is set to True, then taxes are included in the total amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalAmount { get; set; }

        /// <summary>
        /// The guarantee information associated to the Room Stay. A maximum of 5 occurances are available for use depending on the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        /// <summary>
        /// Promotion Codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PromotionType Promotion { get; set; }

        /// <summary>
        /// Market code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MarketCode { get; set; }

        /// <summary>
        /// Description of Market code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string MarketDescription { get; set; }

        /// <summary>
        /// Source of business
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Description of the source of business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string SourceCodeDescription { get; set; }

        /// <summary>
        /// Balance amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        /// <summary>
        /// Comp Balance amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType CompBalance { get; set; }

        /// <summary>
        /// Room type code that was charged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypeCharged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomTypeCharged { get; set; }

        /// <summary>
        /// A collection of deposit and/or payments for the Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType DepositPayments { get; set; }

        /// <summary>
        /// Service Status of In House guest like DND or MUP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestServiceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuestHousekeepingServiceRequestType? GuestServiceStatus { get; set; }

        /// <summary>
        /// Indicates that this reservation is scheduled for automated check out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledCheckoutTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduledCheckoutTime { get; set; }

        /// <summary>
        /// When true, indicates a room number cannot be changed. When false, indicates a room number may be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomNumberLocked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomNumberLocked { get; set; }

        /// <summary>
        /// True indicates as pseudo room type. This is usually used for a posting master reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pseudoRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PseudoRoom { get; set; }

        /// <summary>
        /// Represents the room was assigned by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AssignedByAI { get; set; }

        /// <summary>
        /// Represents the room was assigned by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpgradedByAI { get; set; }

    }

    /// <summary>
    /// Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TimeSpanType
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }

    }

    /// <summary>
    /// Holds the Arrival and Departure Time Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResExpectedTimesType
    {
        /// <summary>
        /// Arrival Time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationExpectedArrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReservationExpectedArrivalTime { get; set; }

        /// <summary>
        /// Departure Time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationExpectedDepartureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReservationExpectedDepartureTime { get; set; }

    }

    /// <summary>
    /// The Redeem Points contains the number of points required to book a room type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PointsType
    {
        /// <summary>
        /// Awards type for the award type rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AwardsType { get; set; }

        /// <summary>
        /// No of points required to book this Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points { get; set; }

    }

    /// <summary>
    /// Key information about the block for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationBlockType
    {
        /// <summary>
        /// Collection of unique block identifiers for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BlockIdList BlockIdList { get; set; }

        /// <summary>
        /// The Name of the block that is attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string BlockName { get; set; }

        /// <summary>
        /// This is the HotelCode of the Block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BlockIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// Validations type record returned after Validations are done.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResGuaranteeType
    {
        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GuaranteeCode { get; set; }

        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onHold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnHold { get; set; }

    }

    /// <summary>
    /// Type to specify a rate promotion. Usually attached to a reservation to indicate a specific promotion is applied to the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PromotionType
    {
        /// <summary>
        /// Promotion code associated with the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Promotion code Name associated with the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionName { get; set; }

        /// <summary>
        /// Promotion Coupon Code when promotion is setup to have a valid coupon code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("couponCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CouponCode { get; set; }

    }

    /// <summary>
    /// Possible values for the Guest Service Status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum GuestHousekeepingServiceRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DoNotDisturb")]
        DoNotDisturb = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MakeUpRoom")]
        MakeUpRoom = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoStatusSelected")]
        NoStatusSelected = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResAttachedProfileListType : System.Collections.ObjectModel.Collection<ResAttachedProfileType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResAttachedProfileType
    {
        /// <summary>
        /// Attached profile name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Name { get; set; }

        /// <summary>
        /// Collection of unique profile identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResProfileTypeType? ReservationProfileType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ResProfileTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TravelAgent")]
        TravelAgent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationContact")]
        ReservationContact = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingContact")]
        BillingContact = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Addressee")]
        Addressee = 7,

    }

    /// <summary>
    /// This reservation is in checked in status and the business date is past departure date. This could occur when ORS and PMS are in same environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PMS_ResStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Waitlisted")]
        Waitlisted = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DueIn")]
        DueIn = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DueOut")]
        DueOut = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Walkin")]
        Walkin = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingCheckout")]
        PendingCheckout = 10,

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StayFutureListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : Future reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StayReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Define the search criteria for retrieving room ownership records
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomOwnershipType
    {
        /// <summary>
        /// Contract ID of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractId { get; set; }

        /// <summary>
        /// Contract number for room owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Unit for room owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Unit { get; set; }

        /// <summary>
        /// Room Category of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomCategory { get; set; }

        /// <summary>
        /// Room Type of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomType { get; set; }

        /// <summary>
        /// Start Date of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End Date of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Profile ID of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ProfileId { get; set; }

        /// <summary>
        /// Status of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Status { get; set; }

    }

    /// <summary>
    /// Allowed actions for profile operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileAllowedActionsType : System.Collections.ObjectModel.Collection<ProfileAllowedActionType>
    {

    }

    /// <summary>
    /// Flag indicating whether Profile is Enrolled to Primary Membership Program.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileAllowedActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NameChange")]
        NameChange = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxIDChange")]
        TaxIDChange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollToPrimaryMembership")]
        EnrollToPrimaryMembership = 2,

    }

    /// <summary>
    /// Request object for creation of guest/contact/employee profile. This object contains profile details with unique identifiers of a profile. The standard optional Opera Context element is also included.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Guest
    {
        /// <summary>
        /// Unique identifiers of Profile for both internal and external systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList GuestIdList { get; set; }

        /// <summary>
        /// External Reference information for Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ExternalReferencesType ExternalReferences { get; set; }

        /// <summary>
        /// Provides detailed information of a customer profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestProfileType GuestDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Type provides the detailed information about the profile and its children.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GuestProfileType
    {
        /// <summary>
        /// Detailed customer information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerType Customer { get; set; }

        /// <summary>
        /// The profile image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageSetType ProfileImage { get; set; }

        /// <summary>
        /// List of customer addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses3 Addresses { get; set; }

        /// <summary>
        /// Trace Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TraceCode { get; set; }

        /// <summary>
        /// Owner Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Influence Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("influenceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InfluenceCode { get; set; }

        /// <summary>
        /// List of Telephone Number Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Telephones3 Telephones { get; set; }

        /// <summary>
        /// List of email address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Emails3 Emails { get; set; }

        /// <summary>
        /// List of Information on a URL for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLs3 URLs { get; set; }

        /// <summary>
        /// List of Notes for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments3 Comments { get; set; }

        /// <summary>
        /// List of loyalty program(s) the profile is subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileMemberships3 ProfileMemberships { get; set; }

        /// <summary>
        /// List of customer preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferenceCollection3 PreferenceCollection { get; set; }

        /// <summary>
        /// List of customer keywords.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Keywords3 Keywords { get; set; }

        /// <summary>
        /// List of profile negotiated rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NegotiatedRates3 NegotiatedRates { get; set; }

        /// <summary>
        /// List of channel negotiated rates that this profile has been assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GdsNegotiatedRates3 GdsNegotiatedRates { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ProfileIndicators { get; set; }

        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationships3 Relationships { get; set; }

        /// <summary>
        /// Information on last stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastStayInfoType LastStayInfo { get; set; }

        /// <summary>
        /// Detailed information on access type associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileAccessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileAccessType ProfileAccessType { get; set; }

        /// <summary>
        /// Detailed information on restrictions associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileRestrictions ProfileRestrictions { get; set; }

        /// <summary>
        /// Contains collection of mailing action list associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mailingActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MailingActionsType MailingActions { get; set; }

        /// <summary>
        /// Contains privacy related information associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivacyInfoType PrivacyInfo { get; set; }

        /// <summary>
        /// Contains cashiering related details for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCashieringType Cashiering { get; set; }

        /// <summary>
        /// Contains commission related details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileCommissionType> CommissionInfoList { get; set; }

        /// <summary>
        /// Collections of user defined fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDefinedFieldsType UserDefinedFields { get; set; }

        /// <summary>
        /// List of Web User Accounts of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webUserAccounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WebUserAccountsType WebUserAccounts { get; set; }

        /// <summary>
        /// Profile information about tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileTaxInfoType TaxInfo { get; set; }

        /// <summary>
        /// Sales information of the profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesInfoType SalesInfo { get; set; }

        /// <summary>
        /// E-Certificate associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ECertificatesType ECertificates { get; set; }

        /// <summary>
        /// List of profile subscriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileSubscriptionListType Subscriptions { get; set; }

        /// <summary>
        /// Localization Guest Type associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localizationGuestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LocalizationGuestType { get; set; }

        /// <summary>
        /// Eligible for Fiscal Folio/Payload generation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eligibleForFiscalFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EligibleForFiscalFolio { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Employee or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuestProfileTypeType? ProfileType { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// Hotel which this profile is registered with. This attribute is not used for configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

        /// <summary>
        /// Hotel which this profile is to be registered. This attribute is only used during creation of profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestForHotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RequestForHotel { get; set; }

        /// <summary>
        /// What level this profile is protected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProtectedBy { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Mark this profile as recently accessed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markAsRecentlyAccessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkAsRecentlyAccessed { get; set; }

        /// <summary>
        /// "true" setting marks the profile to be kept from being purged, once the profile is marked inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markForHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkForHistory { get; set; }

        /// <summary>
        /// Populates true if the profile has commission configured false otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCommission { get; set; }

        /// <summary>
        /// Flag to indicate if the negotiated rates are inherited from master profile. Flag is available only when the profile is linked to master profile and master profile has negotiated rate codes attached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inheritedNegRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InheritedNegRates { get; set; }

    }

    /// <summary>
    /// The types of Profile handled by the web service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum GuestProfileTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
        Employee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailablePreferences
    {
        /// <summary>
        /// A collection of preferences
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PreferenceTypeType> PreferenceCollection { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Response object for fetching profiles. This object contains profile primary details,profile summary details,master info list containing code and description used as lookup for description.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileSummaries
    {
        /// <summary>
        /// Type contains Profile's summary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileSummaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileSummariesType ProfileSummaries1 { get; set; }

        /// <summary>
        /// Refer to Generic common types document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MasterInfoType> MasterInfoList { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// A complex type containing the collection of Profile objects or Unique IDs of Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileSummariesType
    {
        /// <summary>
        /// A collection of Profiles or Unique IDs of Profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileSummaryInfoType> ProfileInfo { get; set; }

        /// <summary>
        /// Evaluated total page count based on the requested max fetch count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>
        /// Indicates maximum number of records a Web Service should return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Summary information about a profile and the associated Unique IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileSummaryInfoType
    {
        /// <summary>
        /// Unique identifiers for the Profile for both internal and external systems. In case of Travel Agent the IATA code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

        /// <summary>
        /// Provides summary information regarding profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileSummaryType Profile { get; set; }

    }

    /// <summary>
    /// Type provides the basic information about the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileSummaryType
    {
        /// <summary>
        /// This provides name information for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormerName FormerName { get; set; }

        /// <summary>
        /// Profile Name information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileNameType AltName { get; set; }

        /// <summary>
        /// Provides information about the guest's anonymization status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnonymizationType Anonymization { get; set; }

        /// <summary>
        /// Detailed information on an address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInfoType AddressInfo { get; set; }

        /// <summary>
        /// Detailed information on telephone/ fax for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType TelephoneInfo { get; set; }

        /// <summary>
        /// Detailed information on an eMail address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType EmailInfo { get; set; }

        /// <summary>
        /// Information on membership for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileMembershipType ProfileMembership { get; set; }

        /// <summary>
        /// Detailed information on web url/address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLInfoType URLInfo { get; set; }

        /// <summary>
        /// Name of the (self-professed) country that is claimed for citizenship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType CitizenCountry { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ProfileIndicators { get; set; }

        /// <summary>
        /// Super Search matching terms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchMatches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public SearchMatchesType SearchMatches { get; set; }

        /// <summary>
        /// Detailed information on access type associated with the profile.Information on whether the profile is created in CRO/Hotel/Chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileAccessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileAccessType ProfileAccessType { get; set; }

        /// <summary>
        /// Detailed information on restrictions associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileRestrictions ProfileRestrictions { get; set; }

        /// <summary>
        /// VIP status of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VIPStatusType VipStatus { get; set; }

        /// <summary>
        /// Owner of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public OwnersType Owners { get; set; }

        /// <summary>
        /// Primary Company of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PrimaryCompany { get; set; }

        /// <summary>
        /// AR Account information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aRAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DirectBillingType ARAccount { get; set; }

        /// <summary>
        /// Commission Code and description of the requested HotelCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Commission { get; set; }

        /// <summary>
        /// Profile information about tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileTaxInfoType TaxInfo { get; set; }

        /// <summary>
        /// Contains cashiering related details for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCashieringType Cashiering { get; set; }

        /// <summary>
        /// Information on last stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastStayInfoType LastStayInfo { get; set; }

        /// <summary>
        /// Collection of allowed actions for profile search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public ProfileAllowedActionsType AllowedActions { get; set; }

        /// <summary>
        /// Contains primary account information (Profile Id, Profile Type and Profile Name) for the contacts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryAccountInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryProfileInfoType PrimaryAccountInfo { get; set; }

        /// <summary>
        /// Sales information of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesInfoType SalesInfo { get; set; }

        /// <summary>
        /// Additional Information about the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileAdditionalInfoType AdditionalInfo { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

        /// <summary>
        /// This element tells If there is an active subscription for this external profile .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Subscription { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// What level this profile is protected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Protected { get; set; }

        /// <summary>
        /// This element tells profile is property exclusive or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrivateProfile { get; set; }

        /// <summary>
        /// Flag to indicate if the negotiated rates are inherited from master profile. Flag is available only when the profile is linked to master profile and master profile has negotiated rate codes attached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inheritedNegRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InheritedNegRates { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Property this profile is registered with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

    }

    /// <summary>
    /// This provides name information for a person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileNameType
    {
        /// <summary>
        /// Family name, last name or Company Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// Full display Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string FullName { get; set; }

        /// <summary>
        /// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// The middle name of the person name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Type of name of the individual, such as former, nickname, alternate or alias name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonNameTypeType? NameType { get; set; }

    }

    /// <summary>
    /// List of Generic Name-Value-Pair Parameters used for super search matches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchMatchesType : System.Collections.ObjectModel.Collection<SearchMatchType>
    {

    }

    /// <summary>
    /// Search match indicating attribute and the matching value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchMatchType
    {
        /// <summary>
        /// Search match attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Attribute { get; set; }

        /// <summary>
        /// Search match value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

    }

    /// <summary>
    /// VIP status of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VIPStatusType
    {
        /// <summary>
        /// Used for Character Strings, length 0 to 2000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

        /// <summary>
        /// VIP status of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Generic type for a list of owners.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OwnersType : System.Collections.ObjectModel.Collection<OwnerType>
    {

    }

    /// <summary>
    /// Contains basic information of profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PrimaryProfileInfoType
    {
        /// <summary>
        /// Unique Identifier for OPERA Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ProfileId { get; set; }

        /// <summary>
        /// Type of account such as Agent, Company, and Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

        /// <summary>
        /// Name of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProfileName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileAdditionalInfoType
    {
        /// <summary>
        /// Primary Owner of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryOwnerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PrimaryOwnerCode { get; set; }

        /// <summary>
        /// Territory associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("territory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Territory { get; set; }

        /// <summary>
        /// Indicates if the profile is a Master Account for one or more Subsidiary Accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MasterAccount { get; set; }

        /// <summary>
        /// Indicates if the profile is a Subsidiary Account of a Master/Parent Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subsidiaryAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SubsidiaryAccount { get; set; }

        /// <summary>
        /// Business Title or Position of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string BusinessPosition { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MasterInfoType
    {
        [Newtonsoft.Json.JsonProperty("codeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CodeInfoType> CodeInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("codeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MasterType? CodeType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CodeInfoType
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("addtionalCodeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AddtionalCodeInfoType AddtionalCodeInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Holds name of additional code information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddtionalCodeInfoType : System.Collections.ObjectModel.Collection<Anonymous13>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MasterInfoCodeDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LongDescription")]
        LongDescription = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ShortDescription")]
        ShortDescription = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MasterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Country")]
        Country = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"State")]
        State = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AddressType")]
        AddressType = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PhoneType")]
        PhoneType = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RateCategory")]
        RateCategory = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CalculationRule")]
        CalculationRule = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PostingRythym")]
        PostingRythym = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingInstruction")]
        BillingInstruction = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TransactionCode")]
        TransactionCode = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DisplaySet")]
        DisplaySet = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MailingActions")]
        MailingActions = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DistanceType")]
        DistanceType = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"District")]
        District = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Territory")]
        Territory = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FiscalRegion")]
        FiscalRegion = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"InventoryItem")]
        InventoryItem = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomFeaturePreference")]
        RoomFeaturePreference = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialPreference")]
        SpecialPreference = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Promotion")]
        Promotion = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Department")]
        Department = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationPreference")]
        ReservationPreference = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"FacilityTask")]
        FacilityTask = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomType")]
        RoomType = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"RateCode")]
        RateCode = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfOrderReason")]
        OutOfOrderReason = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Block")]
        Block = 26,

    }

    /// <summary>
    /// Request object for storing an email.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EmailMessageType
    {
        /// <summary>
        /// ID of the Block that is associated with the email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BlockId { get; set; }

        /// <summary>
        /// The address that originated the email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FromAddress { get; set; }

        /// <summary>
        /// A collection of email addresses for recipients who were sent the email message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BasicEmailListType ToAddress { get; set; }

        /// <summary>
        /// The subject line of the email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Subject { get; set; }

        /// <summary>
        /// Email in base64 binary format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] EmailBody { get; set; }

        /// <summary>
        /// Global ID of the email message from the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string MessageId { get; set; }

        /// <summary>
        /// The date the email was received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailReceiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EmailReceiveDate { get; set; }

        /// <summary>
        /// Indicates whether the email was sent with an attachment (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasAttachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAttachment { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BasicEmailListType : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileRelationships
    {
        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipsSummary Relationships { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Contains details relationships related to a profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipsSummary
    {
        /// <summary>
        /// A collection of the profiles summary that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoSummaryType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Response object for showing stay history and future reservations of specific profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileStayHistory
    {
        /// <summary>
        /// Type contains stay history and future reservations of the specific profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileStayDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileStayDetailsType ProfileStayDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Type provides the stay history and future reservations of specific profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileStayDetailsType
    {
        /// <summary>
        /// Collection of Detailed information on history and future reservations associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationStayHistoryFutureInfoType ReservationInfoList { get; set; }

    }

    /// <summary>
    /// Request object for creating profile relationship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileRelationship
    {
        /// <summary>
        /// Refer to Relationship Profile request criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipCriteriaType Relationship { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Contains Criteria Information for a profile relationship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipCriteriaType
    {
        /// <summary>
        /// Indicates if this relationship is the primary relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceRelation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).This needs to be passed if the attribute primary is sent as true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string SourceRelationDescription { get; set; }

        /// <summary>
        /// Used to specify a source profile type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? SourceProfileType { get; set; }

        /// <summary>
        /// Indicates the type of relationship the related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of relationship the related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

        /// <summary>
        /// Used to specify a target profile type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? TargetProfileType { get; set; }

    }

    /// <summary>
    /// Request object for changing profile relationship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileRelationshipToBeChanged
    {
        /// <summary>
        /// Refer to Relationship Profile request criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChangeRelationshipCriteriaType Relationship { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Information about the changes in relationship for the profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangeRelationshipCriteriaType
    {
        /// <summary>
        /// Information about the changes in relationship for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeRelationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChangeRelationsInfoType ChangeRelationship { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string RelationshipID { get; set; }

        /// <summary>
        /// Indicates the type of existing relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceRelation { get; set; }

        /// <summary>
        /// Displays the description of existing relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string SourceRelationDescription { get; set; }

        /// <summary>
        /// Indicates the type of existing relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of existing relationship the related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    /// <summary>
    /// Detailed information regarding to be changed relationships for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangeRelationsInfoType
    {
        /// <summary>
        /// Unique id of the profile to be changed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeProfileID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ChangeProfileID { get; set; }

        /// <summary>
        /// Indicates if this relationship is the primary relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Used to specify a source profile type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? SourceProfileType { get; set; }

        /// <summary>
        /// Indicates the type of to be changed relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceRelation { get; set; }

        /// <summary>
        /// Displays the description of to be changed relationship the current profile(Source Profile) has with the related profile(Target Profile).This needs to be passed if the attribute primary is sent as true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string SourceRelationDescription { get; set; }

        /// <summary>
        /// Indicates the type of to be changed relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of to be changed relationship the related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

        /// <summary>
        /// Used to specify a target profile type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? TargetProfileType { get; set; }

    }

    /// <summary>
    /// Profile Resource will be merged.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileToBeMerged
    {
        /// <summary>
        /// Provides detailed information regarding either a company or a customer profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("victimProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType VictimProfileId { get; set; }

        /// <summary>
        /// Provides detailed information regarding either a company or a customer profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileType ProfileDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Address")]
        Address = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Communication")]
        Communication = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Comment")]
        Comment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Membership")]
        Membership = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Preference")]
        Preference = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Keyword")]
        Keyword = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Profile")]
        Profile = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesInfo")]
        SalesInfo = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Relationship")]
        Relationship = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Address")]
        Address = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Communication")]
        Communication = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Comment")]
        Comment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Membership")]
        Membership = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Preference")]
        Preference = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Keyword")]
        Keyword = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Profile")]
        Profile = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesInfo")]
        SalesInfo = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Relationship")]
        Relationship = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscriptions")]
        Subscriptions = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryMethods")]
        DeliveryMethods = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"GdsNegotiatedRate")]
        GdsNegotiatedRate = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRate")]
        NegotiatedRate = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"HistoryReservation")]
        HistoryReservation = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FutureReservation")]
        FutureReservation = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"WebUserAccount")]
        WebUserAccount = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRateShowInactive")]
        NegotiatedRateShowInactive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRateResort")]
        NegotiatedRateResort = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRateMaxFetchCount")]
        NegotiatedRateMaxFetchCount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRateCode")]
        NegotiatedRateCode = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GdsNegotiatedRateShowInactive")]
        GdsNegotiatedRateShowInactive = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PreferencesShowInactive")]
        PreferencesShowInactive = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ResortForRoutingInstructions")]
        ResortForRoutingInstructions = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RelationshipPrimaryProfile")]
        RelationshipPrimaryProfile = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AddressPrimaryOnly")]
        AddressPrimaryOnly = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CommunicationPrimaryOnly")]
        CommunicationPrimaryOnly = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryMethodsHotelCode")]
        DeliveryMethodsHotelCode = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NameChange")]
        NameChange = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxIDChange")]
        TaxIDChange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollToPrimaryMembership")]
        EnrollToPrimaryMembership = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Address")]
        Address = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Communication")]
        Communication = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Comment")]
        Comment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Membership")]
        Membership = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Preference")]
        Preference = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Keyword")]
        Keyword = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Profile")]
        Profile = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesInfo")]
        SalesInfo = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Relationship")]
        Relationship = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WebUserAccount")]
        WebUserAccount = 11,

    }

    /// <summary>
    /// When search type is PatronTrackingSystemMemberProfiles, the FetchProfiles will return the Membership Number of the searched Membership Type regardless of primary flag or sequence of the profile memberships.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SearchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PurgeableProfiles")]
        PurgeableProfiles = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PatronTrackingSystemMemberProfiles")]
        PatronTrackingSystemMemberProfiles = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
        Employee = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Vendor")]
        Vendor = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Purge")]
        Purge = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessHeader")]
        BusinessHeader = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingAccount")]
        BillingAccount = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Activity")]
        Activity = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Potential")]
        Potential = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Account")]
        Account = 14,

    }

    /// <summary>
    /// The types of Profile handled by the web service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum RelatedProfileType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
        Employee = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Vendor")]
        Vendor = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Purge")]
        Purge = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessHeader")]
        BusinessHeader = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingAccount")]
        BillingAccount = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Activity")]
        Activity = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Potential")]
        Potential = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Account")]
        Account = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Address")]
        Address = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Communication")]
        Communication = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRate")]
        NegotiatedRate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GdsNegotiatedRate")]
        GdsNegotiatedRate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Comment")]
        Comment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Membership")]
        Membership = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Preference")]
        Preference = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Keyword")]
        Keyword = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HistoryReservation")]
        HistoryReservation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FutureReservation")]
        FutureReservation = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Relationship")]
        Relationship = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Routing")]
        Routing = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Profile")]
        Profile = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"WebUserAccount")]
        WebUserAccount = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesInfo")]
        SalesInfo = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ECertificate")]
        ECertificate = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscriptions")]
        Subscriptions = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PrimaryAccountInfo")]
        PrimaryAccountInfo = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryMethods")]
        DeliveryMethods = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomOwnership")]
        RoomOwnership = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NameChange")]
        NameChange = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxIDChange")]
        TaxIDChange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollToPrimaryMembership")]
        EnrollToPrimaryMembership = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Profile2 : Profile
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Address")]
        Address = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Communication")]
        Communication = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Comment")]
        Comment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Membership")]
        Membership = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Preference")]
        Preference = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Keyword")]
        Keyword = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Profile")]
        Profile = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesInfo")]
        SalesInfo = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Relationship")]
        Relationship = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscriptions")]
        Subscriptions = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryMethods")]
        DeliveryMethods = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"GdsNegotiatedRate")]
        GdsNegotiatedRate = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRate")]
        NegotiatedRate = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"HistoryReservation")]
        HistoryReservation = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FutureReservation")]
        FutureReservation = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"WebUserAccount")]
        WebUserAccount = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRateShowInactive")]
        NegotiatedRateShowInactive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRateResort")]
        NegotiatedRateResort = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRateMaxFetchCount")]
        NegotiatedRateMaxFetchCount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NegotiatedRateCode")]
        NegotiatedRateCode = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GdsNegotiatedRateShowInactive")]
        GdsNegotiatedRateShowInactive = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PreferencesShowInactive")]
        PreferencesShowInactive = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ResortForRoutingInstructions")]
        ResortForRoutingInstructions = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RelationshipPrimaryProfile")]
        RelationshipPrimaryProfile = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AddressPrimaryOnly")]
        AddressPrimaryOnly = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CommunicationPrimaryOnly")]
        CommunicationPrimaryOnly = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryMethodsHotelCode")]
        DeliveryMethodsHotelCode = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NameChange")]
        NameChange = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxIDChange")]
        TaxIDChange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollToPrimaryMembership")]
        EnrollToPrimaryMembership = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Profile3 : Profile
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EmailMessageType2 : EmailMessageType
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HistoryReservation")]
        HistoryReservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FutureReservation")]
        FutureReservation = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileRelationship2 : ProfileRelationship
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileRelationshipToBeChanged2 : ProfileRelationshipToBeChanged
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileToBeMerged2 : ProfileToBeMerged
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Addresses
    {
        /// <summary>
        /// Collection of Detailed information on an address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<AddressInfoType> AddressInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Telephones
    {
        /// <summary>
        /// Collection of Detailed information on telephone/fax for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TelephoneInfoType> TelephoneInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Emails
    {
        /// <summary>
        /// Collection of Detailed information on an eMail address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<EmailInfoType> EmailInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class URLs
    {
        /// <summary>
        /// Collection of Detailed information on web url/address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<URLInfoType> URLInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Comments
    {
        /// <summary>
        /// Collection of Detailed information on comments for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> CommentInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileMemberships
    {
        /// <summary>
        /// Collection of Detailed information on memberships for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileMembershipType> ProfileMembership { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PreferenceCollection
    {
        /// <summary>
        /// Collection of Detailed information on preferences of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceTypeType> PreferenceType { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Keywords
    {
        /// <summary>
        /// Collection of keywords attached to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<KeywordType> Keyword { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NegotiatedRates
    {
        /// <summary>
        /// Collection of Detailed information on profile negotiated rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<NegotiatedType> NegotiatedRate { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GdsNegotiatedRates
    {
        /// <summary>
        /// Collection of Detailed information on channel negotiated rates for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<GdsNegotiatedType> GdsNegotiatedRate { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Relationships
    {
        /// <summary>
        /// A collection of the profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum EmailTypeEmailFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Html")]
        Html = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Identifications
    {
        /// <summary>
        /// Collection of detailed information on the identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identificationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<IdentificationInfoType> IdentificationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerTypeGender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Hotels
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Code { get; set; }

        /// <summary>
        /// Scope of e-cert: global,single property or multi property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateScopeType? Scope { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileInfo
    {
        /// <summary>
        /// Family name, last name or Company Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// Full display Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string FullName { get; set; }

        /// <summary>
        /// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// The middle name of the person name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Type of name of the individual, such as former, nickname, alternate or alias name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonNameTypeType? NameType { get; set; }

        /// <summary>
        /// OPERA profile type such as Individual or Company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum InstanceLinkMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIONS")]
        OPTIONS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HEAD")]
        HEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Addresses2
    {
        /// <summary>
        /// Collection of Detailed information on an address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<AddressInfoType> AddressInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Telephones2
    {
        /// <summary>
        /// Collection of Detailed information on telephone/fax for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TelephoneInfoType> TelephoneInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Emails2
    {
        /// <summary>
        /// Collection of Detailed information on an eMail address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<EmailInfoType> EmailInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class URLs2
    {
        /// <summary>
        /// Collection of Detailed information on web url/address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<URLInfoType> URLInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Comments2
    {
        /// <summary>
        /// Collection of Detailed information on comments for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> CommentInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileDeliveryMethods
    {
        /// <summary>
        /// Collection of delivery methods for this Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileDeliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileDeliveryMethod> ProfileDeliveryMethod { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileMemberships2
    {
        /// <summary>
        /// Collection of Detailed information on memberships for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileMembershipType> ProfileMembership { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PreferenceCollection2
    {
        /// <summary>
        /// Collection of Detailed information on preferences of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceTypeType> PreferenceType { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Keywords2
    {
        /// <summary>
        /// Collection of keywords attached to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<KeywordType> Keyword { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NegotiatedRates2
    {
        /// <summary>
        /// Collection of Detailed information on profile negotiated rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<NegotiatedType> NegotiatedRate { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GdsNegotiatedRates2
    {
        /// <summary>
        /// Collection of Detailed information on channel negotiated rates for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<GdsNegotiatedType> GdsNegotiatedRate { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Relationships2
    {
        /// <summary>
        /// A collection of the profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipsSummary2
    {
        /// <summary>
        /// A collection of the profiles summary that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoSummaryType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomOwnershipsList
    {
        /// <summary>
        /// Collection of Detailed information on Room Ownership records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomOwnershipInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoomOwnershipType> RoomOwnershipInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Addresses3
    {
        /// <summary>
        /// Collection of Detailed information on an address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<AddressInfoType> AddressInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Telephones3
    {
        /// <summary>
        /// Collection of Detailed information on telephone/fax for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TelephoneInfoType> TelephoneInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Emails3
    {
        /// <summary>
        /// Collection of Detailed information on an eMail address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<EmailInfoType> EmailInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class URLs3
    {
        /// <summary>
        /// Collection of Detailed information on web url/address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<URLInfoType> URLInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Comments3
    {
        /// <summary>
        /// Collection of Detailed information on comments for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> CommentInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileMemberships3
    {
        /// <summary>
        /// Collection of Detailed information on memberships for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileMembershipType> ProfileMembership { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PreferenceCollection3
    {
        /// <summary>
        /// Collection of Detailed information on preferences of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceTypeType> PreferenceType { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Keywords3
    {
        /// <summary>
        /// Collection of keywords attached to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<KeywordType> Keyword { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NegotiatedRates3
    {
        /// <summary>
        /// Collection of Detailed information on profile negotiated rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<NegotiatedType> NegotiatedRate { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GdsNegotiatedRates3
    {
        /// <summary>
        /// Collection of Detailed information on channel negotiated rates for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<GdsNegotiatedType> GdsNegotiatedRate { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Relationships3
    {
        /// <summary>
        /// A collection of the profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FormerName
    {
        /// <summary>
        /// Family name, last name or Company Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// Full display Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string FullName { get; set; }

        /// <summary>
        /// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// The middle name of the person name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Type of name of the individual, such as former, nickname, alternate or alias name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonNameTypeType? NameType { get; set; }

        /// <summary>
        /// Identifies the gender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FormerNameGender? Gender { get; set; }

        /// <summary>
        /// Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// Indicates the date of birth as masked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDateMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BirthDateMasked { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// The supplier's ranking of the customer (e.g., VIP, numerical ranking).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CustomerValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Anonymous13
    {
        /// <summary>
        /// Holds name of additional code information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MasterInfoCodeDetailType? Name { get; set; }

        /// <summary>
        /// Holds value of additional code information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FormerNameGender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerExeption : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public CustomerExeption(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerExeption<TResult> : CustomerExeption
    {
        public TResult Result { get; private set; }

        public CustomerExeption(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603