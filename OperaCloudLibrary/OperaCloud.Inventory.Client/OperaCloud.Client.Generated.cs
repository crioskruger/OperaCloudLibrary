//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OperaCloud.Inventory.Client
{
    using System.Net.Http.Headers;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(string baseUrl)
        {
            BaseUrl = baseUrl;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get hotel inventory
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where hotel inventory is searched.</param>
        /// <param name="roomCountRequested">Number of rooms requested.</param>
        /// <param name="includeTentativeInventory">If set to true, includes non-deduct/Tentative rooms for a date range.</param>
        /// <param name="dailyInventory">If false minimum inventory for the date range is requested, otherwise inventory is requested for every day.</param>
        /// <param name="houseLevel">Indicates that House level inventory is requested.</param>
        /// <param name="roomTypes">Room Type Code.</param>
        /// <param name="roomClasses">Room Class Code.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the endDate user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>A response for Hotel Inventories meeting the search criteria. Returns inventory classified on room type, class and house level for a given property.</returns>
        /// <exception cref="InventoryExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HotelInventory> GetHotelInventoryAsync(string hotelId, System.DateTimeOffset dateRangeStart, System.DateTimeOffset dateRangeEnd, int roomCountRequested, bool? includeTentativeInventory, bool? dailyInventory, bool? houseLevel, System.Collections.Generic.IEnumerable<string> roomTypes, System.Collections.Generic.IEnumerable<string> roomClasses, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetHotelInventoryAsync(hotelId, dateRangeStart, dateRangeEnd, roomCountRequested, includeTentativeInventory, dailyInventory, houseLevel, roomTypes, roomClasses, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get hotel inventory
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where hotel inventory is searched.</param>
        /// <param name="roomCountRequested">Number of rooms requested.</param>
        /// <param name="includeTentativeInventory">If set to true, includes non-deduct/Tentative rooms for a date range.</param>
        /// <param name="dailyInventory">If false minimum inventory for the date range is requested, otherwise inventory is requested for every day.</param>
        /// <param name="houseLevel">Indicates that House level inventory is requested.</param>
        /// <param name="roomTypes">Room Type Code.</param>
        /// <param name="roomClasses">Room Class Code.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the endDate user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>A response for Hotel Inventories meeting the search criteria. Returns inventory classified on room type, class and house level for a given property.</returns>
        /// <exception cref="InventoryExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HotelInventory> GetHotelInventoryAsync(string hotelId, System.DateTimeOffset dateRangeStart, System.DateTimeOffset dateRangeEnd, int roomCountRequested, bool? includeTentativeInventory, bool? dailyInventory, bool? houseLevel, System.Collections.Generic.IEnumerable<string> roomTypes, System.Collections.Generic.IEnumerable<string> roomClasses, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (dateRangeStart == null)
                throw new System.ArgumentNullException("dateRangeStart");

            if (dateRangeEnd == null)
                throw new System.ArgumentNullException("dateRangeEnd");

            if (roomCountRequested == null)
                throw new System.ArgumentNullException("roomCountRequested");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/hotelInventory?");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("dateRangeStart") + "=").Append(System.Uri.EscapeDataString(dateRangeStart.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("dateRangeEnd") + "=").Append(System.Uri.EscapeDataString(dateRangeEnd.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("roomCountRequested") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomCountRequested, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (includeTentativeInventory != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeTentativeInventory") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeTentativeInventory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dailyInventory != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dailyInventory") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dailyInventory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (houseLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("houseLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(houseLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomTypes != null)
            {
                foreach (var item_ in roomTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("roomTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomClasses != null)
            {
                foreach (var item_ in roomClasses) { urlBuilder_.Append(System.Uri.EscapeDataString("roomClasses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Headers.Date = DateTime.UtcNow;

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    //request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    request_.Headers.Authorization = new AuthenticationHeaderValue("Bearer", authorization);

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.Add("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.Add("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.Add("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.Add("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HotelInventory>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new InventoryExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new InventoryExeption("HotelInventory not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new InventoryExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a hotels Inventory Statistics
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where inventory statistics are searched.</param>
        /// <param name="dateRangeEnd">The ending value of the date range.</param>
        /// <param name="reportCode">Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.</param>
        /// <param name="dateRangeStart">The starting value of the date range.</param>
        /// <param name="parameterName">Name of the parameter.</param>
        /// <param name="parameterValue">Value of the parameter.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the endDate user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Object that holds the details of inventory Statistics.</returns>
        /// <exception cref="InventoryExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StatisticType>> GetInventoryStatisticsAsync(string hotelId, System.DateTimeOffset dateRangeEnd, ReportCode reportCode, System.DateTimeOffset dateRangeStart, System.Collections.Generic.IEnumerable<Anonymous> parameterName, System.Collections.Generic.IEnumerable<string> parameterValue, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetInventoryStatisticsAsync(hotelId, dateRangeEnd, reportCode, dateRangeStart, parameterName, parameterValue, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a hotels Inventory Statistics
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where inventory statistics are searched.</param>
        /// <param name="dateRangeEnd">The ending value of the date range.</param>
        /// <param name="reportCode">Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.</param>
        /// <param name="dateRangeStart">The starting value of the date range.</param>
        /// <param name="parameterName">Name of the parameter.</param>
        /// <param name="parameterValue">Value of the parameter.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the endDate user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Object that holds the details of inventory Statistics.</returns>
        /// <exception cref="InventoryExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StatisticType>> GetInventoryStatisticsAsync(string hotelId, System.DateTimeOffset dateRangeEnd, ReportCode reportCode, System.DateTimeOffset dateRangeStart, System.Collections.Generic.IEnumerable<Anonymous> parameterName, System.Collections.Generic.IEnumerable<string> parameterValue, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (dateRangeEnd == null)
                throw new System.ArgumentNullException("dateRangeEnd");

            if (reportCode == null)
                throw new System.ArgumentNullException("reportCode");

            if (dateRangeStart == null)
                throw new System.ArgumentNullException("dateRangeStart");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/inventoryStatistics?");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("dateRangeEnd") + "=").Append(System.Uri.EscapeDataString(dateRangeEnd.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("reportCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reportCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("dateRangeStart") + "=").Append(System.Uri.EscapeDataString(dateRangeStart.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (parameterName != null)
            {
                foreach (var item_ in parameterName) { urlBuilder_.Append(System.Uri.EscapeDataString("parameterName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (parameterValue != null)
            {
                foreach (var item_ in parameterValue) { urlBuilder_.Append(System.Uri.EscapeDataString("parameterValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StatisticType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new InventoryExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new InventoryExeption("InventoryStatistics not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new InventoryExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new InventoryExeption(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new InventoryExeption(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// A response for Hotel Inventories meeting the search criteria. Returns inventory classified on room type, class and house level for a given property.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelInventory
    {
        /// <summary>
        /// Refer to Inventory common types document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelInventories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HotelInventoryType> HotelInventories { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// A collection of Reservation objects and Unique IDs of Reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelInventoryType
    {
        /// <summary>
        /// Collection of House level Inventory counts for the date ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("houseInventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public InventoryCountsListType HouseInventory { get; set; }

        /// <summary>
        /// Collection of Room type level Inventory counts for the date ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypeInventories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<InventoryLevelCountsListType> RoomTypeInventories { get; set; }

        /// <summary>
        /// Collection of Room Class level Inventory counts for the date ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomClassInventories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<InventoryLevelCountsListType> RoomClassInventories { get; set; }

    }

    /// <summary>
    /// Collection of Inventory counts for the date ranges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InventoryCountsListType : System.Collections.ObjectModel.Collection<InventoryCountsType>
    {

    }

    /// <summary>
    /// Inventory counts for the given date range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InventoryCountsType
    {
        /// <summary>
        /// Indicates whether enough inventory is available or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Available { get; set; }

        /// <summary>
        /// Available Inventory count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableCount { get; set; }

        /// <summary>
        /// Available Tentative Inventory count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableTentativeCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableTentativeCount { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

    }

    /// <summary>
    /// Collection of Inventory counts for the date ranges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InventoryLevelCountsListType
    {
        /// <summary>
        /// Collection of Inventory counts for the date ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<InventoryCountsType> InventoryCounts { get; set; }

        /// <summary>
        /// Inventory Group/Level code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Integer Group/Level order sequence number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Links : System.Collections.ObjectModel.Collection<InstanceLink>
    {

    }

    /// <summary>
    /// Metadata describing link description objects that MAY appear in the JSON instance representation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InstanceLink
    {
        /// <summary>
        /// URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the "templated" property must be set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Href { get; set; }

        /// <summary>
        /// Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Rel { get; set; }

        /// <summary>
        /// Boolean flag that specifies that "href" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Templated { get; set; } = false;

        /// <summary>
        /// HTTP method for requesting the target of the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstanceLinkMethod Method { get; set; }

        /// <summary>
        /// Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetSchema { get; set; }

        /// <summary>
        /// The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationId { get; set; }

        /// <summary>
        /// Exact copy of the "summary" field on the linked operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

    }

    /// <summary>
    /// Used in conjunction with the Success element to define a business error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WarningsType : System.Collections.ObjectModel.Collection<WarningType>
    {

    }

    /// <summary>
    /// Used when a message has been successfully processed to report any warnings or business errors that occurred.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WarningType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// An abbreviated version of the error in textual format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ShortText { get; set; }

        /// <summary>
        /// If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// If present, this URL refers to an online description of the error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DocURL { get; set; }

        /// <summary>
        /// If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Status { get; set; }

        /// <summary>
        /// If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Tag { get; set; }

        /// <summary>
        /// If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RecordId { get; set; }

        /// <summary>
        /// The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type ="Unknown".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Reference Place Holder used as an index for this warning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string Rph { get; set; }

    }

    /// <summary>
    /// Complex type that contains error details for a REST call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExceptionDetailType
    {
        /// <summary>
        /// Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status code for this occurrence of the problem, set by the origin server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Human-readable description specific to this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>
        /// Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Application error code, which is different from HTTP error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorCode { get; set; }

        /// <summary>
        /// Path to the problem at the resource or property level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorPath { get; set; }

        /// <summary>
        /// Details of the error message, consisting of a hierarchical tree structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorInstance> O_errorDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

    }

    /// <summary>
    /// Complex type that contains error instance details for a REST call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorInstance
    {
        /// <summary>
        /// Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status code for this occurrence of the problem, set by the origin server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Human-readable description specific to this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>
        /// Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Application error code, which is different from HTTP error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorCode { get; set; }

        /// <summary>
        /// Path to the problem at the resource or property level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorPath { get; set; }

    }

    /// <summary>
    /// List of inventory statistics that is grouped by statistic date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InventoryStatistics : System.Collections.ObjectModel.Collection<StatisticType>
    {

    }

    /// <summary>
    /// Defines all details needed to create a statistical report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatisticType
    {
        /// <summary>
        /// Statistic Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StatisticCodeType> Statistics { get; set; }

        /// <summary>
        /// A text field used to communicate the proper name of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelName { get; set; }

        /// <summary>
        /// Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ReportCode { get; set; }

        /// <summary>
        /// This element has revenue amount data for its revenue category such as Room Revenue, Food and Beverage Revenue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Defines the codes and corresponding categories for which the data in the other elements has been gathered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatisticCodeType
    {
        /// <summary>
        /// Collection of statistic summary data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StatisticSetType> StatisticDate { get; set; }

        /// <summary>
        /// Actual code used by the system to collect the statistics (e.g. CORP, RACK if category is Market Segment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string StatCode { get; set; }

        /// <summary>
        /// Category Code category of StatCode attribute (e.g. Market Segment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string StatCategoryCode { get; set; }

        /// <summary>
        /// Class grouping of StatCode attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statCodeClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string StatCodeClass { get; set; }

        /// <summary>
        /// Statistic code description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// An instance of a statistic, which is a set containing revenue category and number category summaries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatisticSetType
    {
        /// <summary>
        /// Collection of RevenueCategorySummary elements. Used if revenue values reported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RevenueCategorySummaryType> Revenue { get; set; }

        /// <summary>
        /// Collection of CountCategorySummary elements. Used if count values reported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<NumericCategorySummaryType> Inventory { get; set; }

        /// <summary>
        /// Date of the statistic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StatisticDate { get; set; }

        /// <summary>
        /// Determines whether statistic date is a weekend date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weekendDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WeekendDate { get; set; }

    }

    /// <summary>
    /// This element has revenue amount data for its revenue category such as Room Revenue, Food and Beverage Revenue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RevenueCategorySummaryType
    {
        /// <summary>
        /// The representation of a revenue category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Code { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// This element has count data for each count category such as number of guests, rooms occupied, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NumericCategorySummaryType
    {
        /// <summary>
        /// The total count for the category in NumericCategoryCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>
        /// The representation of a numeric category such as Guests : Number of guests, RoomsOcc : Rooms occupied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReportCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DetailedAvailabiltySummary")]
        DetailedAvailabiltySummary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomCalendarStatistics")]
        RoomCalendarStatistics = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SellLimitSummary")]
        SellLimitSummary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomsAvailabilitySummary")]
        RoomsAvailabilitySummary = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CancelledYN")]
        CancelledYN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Channel")]
        Channel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DeductRoomsYN")]
        DeductRoomsYN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupBy")]
        GroupBy = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseArrPersonsYN")]
        HouseArrPersonsYN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseArrRoomsYN")]
        HouseArrRoomsYN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseAvailPercYN")]
        HouseAvailPercYN = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseAvailRoomsExcludingOverbookingYN")]
        HouseAvailRoomsExcludingOverbookingYN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseAvailRoomsYN")]
        HouseAvailRoomsYN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseAvailTenPercYN")]
        HouseAvailTenPercYN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseBlkDeductNpuYN")]
        HouseBlkDeductNpuYN = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseBlkDeductPuYN")]
        HouseBlkDeductPuYN = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseBlkTentNpuYN")]
        HouseBlkTentNpuYN = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseBlkTentPuYN")]
        HouseBlkTentPuYN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseDayUsePersonYN")]
        HouseDayUsePersonYN = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseDayUseRoomYN")]
        HouseDayUseRoomYN = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseDepPersonsYN")]
        HouseDepPersonsYN = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseDepRoomsYN")]
        HouseDepRoomsYN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseInventoryRoomsYN")]
        HouseInventoryRoomsYN = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseMaxAvailabilityExcludingOverbookingYN")]
        HouseMaxAvailabilityExcludingOverbookingYN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseMaxAvailabilityYN")]
        HouseMaxAvailabilityYN = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseMaxOccupancyYN")]
        HouseMaxOccupancyYN = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseMinAvailabilityExcludingOverbookingYN")]
        HouseMinAvailabilityExcludingOverbookingYN = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseMinAvailabilityYN")]
        HouseMinAvailabilityYN = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseOccPercYN")]
        HouseOccPercYN = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseOccTenPercYN")]
        HouseOccTenPercYN = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseOccupancyYN")]
        HouseOccupancyYN = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseOOOYN")]
        HouseOOOYN = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseOOSRoomsYN")]
        HouseOOSRoomsYN = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseOverBookingYN")]
        HouseOverBookingYN = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"HousePeopleInHouseYN")]
        HousePeopleInHouseYN = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"HousePhysicalRoomsYN")]
        HousePhysicalRoomsYN = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseRoomsSoldYN")]
        HouseRoomsSoldYN = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseSellLimitYN")]
        HouseSellLimitYN = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseTentRoomsExcludingOverbookingYN")]
        HouseTentRoomsExcludingOverbookingYN = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseTentRoomsSoldYN")]
        HouseTentRoomsSoldYN = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"HouseTentRoomsYN")]
        HouseTentRoomsYN = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfOrderRoomsYN")]
        OutOfOrderRoomsYN = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"RestrictionsYN")]
        RestrictionsYN = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomArrPersonsYN")]
        RoomArrPersonsYN = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomArrRoomsYN")]
        RoomArrRoomsYN = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomAvailRoomsExcludingOverbookingYN")]
        RoomAvailRoomsExcludingOverbookingYN = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomAvailRoomsYN")]
        RoomAvailRoomsYN = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomBlkDeductNpuYN")]
        RoomBlkDeductNpuYN = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomBlkDeductPuYN")]
        RoomBlkDeductPuYN = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomBlkTentNpuYN")]
        RoomBlkTentNpuYN = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomBlkTentPuYN")]
        RoomBlkTentPuYN = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomCancelledYN")]
        RoomCancelledYN = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomClassList")]
        RoomClassList = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomDayUsePersonYN")]
        RoomDayUsePersonYN = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomDayUseRoomYN")]
        RoomDayUseRoomYN = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomDepPersonsYN")]
        RoomDepPersonsYN = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomDepRoomsYN")]
        RoomDepRoomsYN = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomInventoryRoomsYN")]
        RoomInventoryRoomsYN = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomMaxAvailabilityExcludingOverbookingYN")]
        RoomMaxAvailabilityExcludingOverbookingYN = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomMaxAvailabilityYN")]
        RoomMaxAvailabilityYN = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomMaxOccupancyYN")]
        RoomMaxOccupancyYN = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomMinAvailabilityExcludingOverbookingYN")]
        RoomMinAvailabilityExcludingOverbookingYN = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomMinAvailabilityYN")]
        RoomMinAvailabilityYN = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomOccupancyYN")]
        RoomOccupancyYN = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomOOOYN")]
        RoomOOOYN = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomOOSRoomsYN")]
        RoomOOSRoomsYN = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomOverBookingYN")]
        RoomOverBookingYN = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomPeopleInHouseYN")]
        RoomPeopleInHouseYN = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomPhysicalRoomsYN")]
        RoomPhysicalRoomsYN = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomRestrictionsYN")]
        RoomRestrictionsYN = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomRoomsSoldYN")]
        RoomRoomsSoldYN = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomSellLimitYN")]
        RoomSellLimitYN = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomTentRoomsExcludingOverbookingYN")]
        RoomTentRoomsExcludingOverbookingYN = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomTentRoomsYN")]
        RoomTentRoomsYN = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomTentYN")]
        RoomTentYN = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomTypeWildCardList")]
        RoomTypeWildCardList = 71,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum InstanceLinkMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIONS")]
        OPTIONS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HEAD")]
        HEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InventoryExeption : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public InventoryExeption(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InventoryExeption<TResult> : InventoryExeption
    {
        public TResult Result { get; private set; }

        public InventoryExeption(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603