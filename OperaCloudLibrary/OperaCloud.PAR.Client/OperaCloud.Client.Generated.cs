//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OperaCloud.PAR.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(string baseUrl)
        {
            BaseUrl = baseUrl;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get Hotel Availability
        /// </summary>
        /// <param name="hotelId">Unique ID that identifies a single hotel property.</param>
        /// <param name="cro">Central reservation office Code who is requesting Rate Availability.</param>
        /// <param name="includeClosedRates">Used to indicate if closed rates are to be included in the Rate Plan set.</param>
        /// <param name="includeDefaultRatePlanSet">Used to indicate if the configured default rate plan set will be included.</param>
        /// <param name="initialRatePlanSet">If InitialRatePlanSet is set to true response will return most relevant Rate Plan Set(e.g. NEGOTIATED if profiles has Negotiated Rates) depending on the request. if request does not requires special Rate Plan Set, it will return default Rate Plan Set if RatePlanSet value is not set.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="pagePointerKey">Specifies fetched record's key as pointer to fetch additional records from. If key is composite use comma separated string.</param>
        /// <param name="ratePlanSet">Rate Plan Set code to filter Rate Plans based on the predefined set. if not specified it will not filter any Rate Plans by Rate Plan Set. When InitialRatePlanSet is true response may not always return Rate Plans for the supplied Rate Plan Set(See InitialRatePlanSet documentation).</param>
        /// <param name="redeemAwards">Used to indicate if the awards are to be redeemed.</param>
        /// <param name="adults">Defines the number of Adults.</param>
        /// <param name="children">Defines the number of Children.</param>
        /// <param name="childAge">Age of a child in years.</param>
        /// <param name="bucket1Count">Number of children classified under the first Age Qualifying Group(Child Bucket#1).</param>
        /// <param name="bucket2Count">Number of children classified under the second Age Qualifying Group(Child Bucket#2).</param>
        /// <param name="bucket3Count">Number of children classified under the third Age Qualifying Group(Child Bucket#3).</param>
        /// <param name="bucket4Count">Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).</param>
        /// <param name="bucket5Count">Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).</param>
        /// <param name="promotionCode">Promotion code associated with the rate plan.</param>
        /// <param name="reservationGuestId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="reservationGuestIdType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="attachedProfileId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="hotelReservationId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="hotelReservationIdType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="ratePlanInfo">If true Rate Plan Code Master information will be included in the response.</param>
        /// <param name="returnOnlyAvailableRateCodes">If true Only availability check will be done and it will return available rate codes.</param>
        /// <param name="resGuaranteeInfo">If true Guarantee Code information will be fetched with Rate Code Information. This attribute is only effective when RatePlanInfo is true.</param>
        /// <param name="roomTypeInfo">If true Room Type Master information will be included in the response.</param>
        /// <param name="membershipIdNumber">Membership id Number of the guest.</param>
        /// <param name="membershipLevel">Membership id Number of the guest.</param>
        /// <param name="membershipType">Membership id Number of the guest.</param>
        /// <param name="pointsAvailable">Used to indicate Points Available for Profile Primary Membership Type.</param>
        /// <param name="smokingPreference">Smoking preference to search a reservation. This is compared to the preference on the guest profile of the reservation.</param>
        /// <param name="hotelPackage">Hotel Package Code to filter the search result.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partnerâ€™s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to search hotel availability based on request segment.</returns>
        /// <exception cref="PriceAvailabilityRateExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HotelAvailability> GetHotelAvailabilityAsync(string hotelId, System.Collections.Generic.IEnumerable<string> cro, System.Collections.Generic.IEnumerable<bool> includeClosedRates, System.Collections.Generic.IEnumerable<bool> includeDefaultRatePlanSet, System.Collections.Generic.IEnumerable<bool> initialRatePlanSet, System.Collections.Generic.IEnumerable<int> limit, System.Collections.Generic.IEnumerable<string> pagePointerKey, System.Collections.Generic.IEnumerable<string> ratePlanSet, System.Collections.Generic.IEnumerable<bool> redeemAwards, System.DateTimeOffset? roomStayStartDate, System.DateTimeOffset? roomStayEndDate, int? roomStayQuantity, int? adults, int? children, System.Collections.Generic.IEnumerable<int> childAge, int? bucket1Count, int? bucket2Count, int? bucket3Count, int? bucket4Count, int? bucket5Count, System.DateTimeOffset? fullStayTimeSpanStartDate, System.DateTimeOffset? fullStayTimeSpanEndDate, bool? prevailingRate, string rateCategory, string rateClass, string rateGroup, System.Collections.Generic.IEnumerable<string> ratePlanCode, System.Collections.Generic.IEnumerable<string> promotionCode, System.Collections.Generic.IEnumerable<string> roomType, System.Collections.Generic.IEnumerable<string> feature, string reservationGuestId, string reservationGuestIdType, System.Collections.Generic.IEnumerable<Anonymous> reservationProfileType, System.Collections.Generic.IEnumerable<string> attachedProfileId, string hotelReservationId, string hotelReservationIdType, bool? ratePlanInfo, bool? returnOnlyAvailableRateCodes, bool? resGuaranteeInfo, bool? roomTypeInfo, System.Collections.Generic.IEnumerable<int> membershipIdNumber, System.Collections.Generic.IEnumerable<string> membershipLevel, System.Collections.Generic.IEnumerable<string> membershipType, System.Collections.Generic.IEnumerable<int> pointsAvailable, System.Collections.Generic.IEnumerable<string> smokingPreference, System.Collections.Generic.IEnumerable<string> hotelPackage, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetHotelAvailabilityAsync(hotelId, cro, includeClosedRates, includeDefaultRatePlanSet, initialRatePlanSet, limit, pagePointerKey, ratePlanSet, redeemAwards, roomStayStartDate, roomStayEndDate, roomStayQuantity, adults, children, childAge, bucket1Count, bucket2Count, bucket3Count, bucket4Count, bucket5Count, fullStayTimeSpanStartDate, fullStayTimeSpanEndDate, prevailingRate, rateCategory, rateClass, rateGroup, ratePlanCode, promotionCode, roomType, feature, reservationGuestId, reservationGuestIdType, reservationProfileType, attachedProfileId, hotelReservationId, hotelReservationIdType, ratePlanInfo, returnOnlyAvailableRateCodes, resGuaranteeInfo, roomTypeInfo, membershipIdNumber, membershipLevel, membershipType, pointsAvailable, smokingPreference, hotelPackage, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Hotel Availability
        /// </summary>
        /// <param name="hotelId">Unique ID that identifies a single hotel property.</param>
        /// <param name="cro">Central reservation office Code who is requesting Rate Availability.</param>
        /// <param name="includeClosedRates">Used to indicate if closed rates are to be included in the Rate Plan set.</param>
        /// <param name="includeDefaultRatePlanSet">Used to indicate if the configured default rate plan set will be included.</param>
        /// <param name="initialRatePlanSet">If InitialRatePlanSet is set to true response will return most relevant Rate Plan Set(e.g. NEGOTIATED if profiles has Negotiated Rates) depending on the request. if request does not requires special Rate Plan Set, it will return default Rate Plan Set if RatePlanSet value is not set.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="pagePointerKey">Specifies fetched record's key as pointer to fetch additional records from. If key is composite use comma separated string.</param>
        /// <param name="ratePlanSet">Rate Plan Set code to filter Rate Plans based on the predefined set. if not specified it will not filter any Rate Plans by Rate Plan Set. When InitialRatePlanSet is true response may not always return Rate Plans for the supplied Rate Plan Set(See InitialRatePlanSet documentation).</param>
        /// <param name="redeemAwards">Used to indicate if the awards are to be redeemed.</param>
        /// <param name="adults">Defines the number of Adults.</param>
        /// <param name="children">Defines the number of Children.</param>
        /// <param name="childAge">Age of a child in years.</param>
        /// <param name="bucket1Count">Number of children classified under the first Age Qualifying Group(Child Bucket#1).</param>
        /// <param name="bucket2Count">Number of children classified under the second Age Qualifying Group(Child Bucket#2).</param>
        /// <param name="bucket3Count">Number of children classified under the third Age Qualifying Group(Child Bucket#3).</param>
        /// <param name="bucket4Count">Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).</param>
        /// <param name="bucket5Count">Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).</param>
        /// <param name="promotionCode">Promotion code associated with the rate plan.</param>
        /// <param name="reservationGuestId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="reservationGuestIdType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="attachedProfileId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="hotelReservationId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="hotelReservationIdType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="ratePlanInfo">If true Rate Plan Code Master information will be included in the response.</param>
        /// <param name="returnOnlyAvailableRateCodes">If true Only availability check will be done and it will return available rate codes.</param>
        /// <param name="resGuaranteeInfo">If true Guarantee Code information will be fetched with Rate Code Information. This attribute is only effective when RatePlanInfo is true.</param>
        /// <param name="roomTypeInfo">If true Room Type Master information will be included in the response.</param>
        /// <param name="membershipIdNumber">Membership id Number of the guest.</param>
        /// <param name="membershipLevel">Membership id Number of the guest.</param>
        /// <param name="membershipType">Membership id Number of the guest.</param>
        /// <param name="pointsAvailable">Used to indicate Points Available for Profile Primary Membership Type.</param>
        /// <param name="smokingPreference">Smoking preference to search a reservation. This is compared to the preference on the guest profile of the reservation.</param>
        /// <param name="hotelPackage">Hotel Package Code to filter the search result.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partnerâ€™s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to search hotel availability based on request segment.</returns>
        /// <exception cref="PriceAvailabilityRateExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HotelAvailability> GetHotelAvailabilityAsync(string hotelId, System.Collections.Generic.IEnumerable<string> cro, System.Collections.Generic.IEnumerable<bool> includeClosedRates, System.Collections.Generic.IEnumerable<bool> includeDefaultRatePlanSet, System.Collections.Generic.IEnumerable<bool> initialRatePlanSet, System.Collections.Generic.IEnumerable<int> limit, System.Collections.Generic.IEnumerable<string> pagePointerKey, System.Collections.Generic.IEnumerable<string> ratePlanSet, System.Collections.Generic.IEnumerable<bool> redeemAwards, System.DateTimeOffset? roomStayStartDate, System.DateTimeOffset? roomStayEndDate, int? roomStayQuantity, int? adults, int? children, System.Collections.Generic.IEnumerable<int> childAge, int? bucket1Count, int? bucket2Count, int? bucket3Count, int? bucket4Count, int? bucket5Count, System.DateTimeOffset? fullStayTimeSpanStartDate, System.DateTimeOffset? fullStayTimeSpanEndDate, bool? prevailingRate, string rateCategory, string rateClass, string rateGroup, System.Collections.Generic.IEnumerable<string> ratePlanCode, System.Collections.Generic.IEnumerable<string> promotionCode, System.Collections.Generic.IEnumerable<string> roomType, System.Collections.Generic.IEnumerable<string> feature, string reservationGuestId, string reservationGuestIdType, System.Collections.Generic.IEnumerable<Anonymous> reservationProfileType, System.Collections.Generic.IEnumerable<string> attachedProfileId, string hotelReservationId, string hotelReservationIdType, bool? ratePlanInfo, bool? returnOnlyAvailableRateCodes, bool? resGuaranteeInfo, bool? roomTypeInfo, System.Collections.Generic.IEnumerable<int> membershipIdNumber, System.Collections.Generic.IEnumerable<string> membershipLevel, System.Collections.Generic.IEnumerable<string> membershipType, System.Collections.Generic.IEnumerable<int> pointsAvailable, System.Collections.Generic.IEnumerable<string> smokingPreference, System.Collections.Generic.IEnumerable<string> hotelPackage, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/availability?");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (cro != null)
            {
                foreach (var item_ in cro) { urlBuilder_.Append(System.Uri.EscapeDataString("cro") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includeClosedRates != null)
            {
                foreach (var item_ in includeClosedRates) { urlBuilder_.Append(System.Uri.EscapeDataString("includeClosedRates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includeDefaultRatePlanSet != null)
            {
                foreach (var item_ in includeDefaultRatePlanSet) { urlBuilder_.Append(System.Uri.EscapeDataString("includeDefaultRatePlanSet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (initialRatePlanSet != null)
            {
                foreach (var item_ in initialRatePlanSet) { urlBuilder_.Append(System.Uri.EscapeDataString("initialRatePlanSet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                foreach (var item_ in limit) { urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pagePointerKey != null)
            {
                foreach (var item_ in pagePointerKey) { urlBuilder_.Append(System.Uri.EscapeDataString("pagePointerKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ratePlanSet != null)
            {
                foreach (var item_ in ratePlanSet) { urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanSet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (redeemAwards != null)
            {
                foreach (var item_ in redeemAwards) { urlBuilder_.Append(System.Uri.EscapeDataString("redeemAwards") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomStayStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomStayStartDate") + "=").Append(System.Uri.EscapeDataString(roomStayStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomStayEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomStayEndDate") + "=").Append(System.Uri.EscapeDataString(roomStayEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomStayQuantity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomStayQuantity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomStayQuantity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adults != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adults") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (children != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("children") + "=").Append(System.Uri.EscapeDataString(ConvertToString(children, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (childAge != null)
            {
                foreach (var item_ in childAge) { urlBuilder_.Append(System.Uri.EscapeDataString("childAge") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (bucket1Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket1Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket1Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bucket2Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket2Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket2Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bucket3Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket3Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket3Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bucket4Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket4Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket4Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bucket5Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket5Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket5Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fullStayTimeSpanStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fullStayTimeSpanStartDate") + "=").Append(System.Uri.EscapeDataString(fullStayTimeSpanStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fullStayTimeSpanEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fullStayTimeSpanEndDate") + "=").Append(System.Uri.EscapeDataString(fullStayTimeSpanEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prevailingRate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("prevailingRate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prevailingRate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rateCategory != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rateCategory") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rateCategory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rateClass != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rateClass") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rateClass, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rateGroup != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rateGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rateGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ratePlanCode != null)
            {
                foreach (var item_ in ratePlanCode) { urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (promotionCode != null)
            {
                foreach (var item_ in promotionCode) { urlBuilder_.Append(System.Uri.EscapeDataString("promotionCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomType != null)
            {
                foreach (var item_ in roomType) { urlBuilder_.Append(System.Uri.EscapeDataString("roomType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (feature != null)
            {
                foreach (var item_ in feature) { urlBuilder_.Append(System.Uri.EscapeDataString("feature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (reservationGuestId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reservationGuestId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reservationGuestId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reservationGuestIdType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reservationGuestIdType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reservationGuestIdType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reservationProfileType != null)
            {
                foreach (var item_ in reservationProfileType) { urlBuilder_.Append(System.Uri.EscapeDataString("reservationProfileType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (attachedProfileId != null)
            {
                foreach (var item_ in attachedProfileId) { urlBuilder_.Append(System.Uri.EscapeDataString("attachedProfileId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (hotelReservationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hotelReservationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hotelReservationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hotelReservationIdType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hotelReservationIdType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hotelReservationIdType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ratePlanInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ratePlanInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (returnOnlyAvailableRateCodes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("returnOnlyAvailableRateCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(returnOnlyAvailableRateCodes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (resGuaranteeInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("resGuaranteeInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resGuaranteeInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomTypeInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomTypeInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomTypeInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (membershipIdNumber != null)
            {
                foreach (var item_ in membershipIdNumber) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipIdNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (membershipLevel != null)
            {
                foreach (var item_ in membershipLevel) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipLevel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (membershipType != null)
            {
                foreach (var item_ in membershipType) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pointsAvailable != null)
            {
                foreach (var item_ in pointsAvailable) { urlBuilder_.Append(System.Uri.EscapeDataString("pointsAvailable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (smokingPreference != null)
            {
                foreach (var item_ in smokingPreference) { urlBuilder_.Append(System.Uri.EscapeDataString("smokingPreference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (hotelPackage != null)
            {
                foreach (var item_ in hotelPackage) { urlBuilder_.Append(System.Uri.EscapeDataString("hotelPackage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HotelAvailability>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PriceAvailabilityRateExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PriceAvailabilityRateExeption("HotelAvailability not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PriceAvailabilityRateExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Reservation Guarantee
        /// </summary>
        /// <param name="hotelId">Unique ID that identifies a single hotel property.</param>
        /// <param name="arrivalDate">Arrival Date of the guest.</param>
        /// <param name="ratePlanCode">Rate Plan Code to find associated Guarantee Codes.</param>
        /// <param name="blockId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="reservationGuestId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="companyId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="travelAgentId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="sourceId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="groupId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="guaranteeCode">Guarantee Code should be supplied only for the code verification purpose, if the supplied code is valid for the rest of the criteria it will return the response with the Guarantee Code information.</param>
        /// <param name="calculateEstimateAmount">Determines whether estimated amount to be calculated or not</param>
        /// <param name="numberOfAdults">Defines the number of Adults.</param>
        /// <param name="numberOfChildren">Defines the number of Children.</param>
        /// <param name="roomType">Room Type for the reservation</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partnerâ€™s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to fetch reservation guarantees.</returns>
        /// <exception cref="PriceAvailabilityRateExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReservationGuaranteesPolicies> GetReservationGuaranteesAsync(string hotelId, System.DateTimeOffset arrivalDate, string ratePlanCode, string blockId, string reservationGuestId, string companyId, string travelAgentId, string sourceId, string groupId, string guaranteeCode, bool? calculateEstimateAmount, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? numberOfRooms, int? numberOfAdults, int? numberOfChildren, string roomType, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetReservationGuaranteesAsync(hotelId, arrivalDate, ratePlanCode, blockId, reservationGuestId, companyId, travelAgentId, sourceId, groupId, guaranteeCode, calculateEstimateAmount, startDate, endDate, numberOfRooms, numberOfAdults, numberOfChildren, roomType, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Reservation Guarantee
        /// </summary>
        /// <param name="hotelId">Unique ID that identifies a single hotel property.</param>
        /// <param name="arrivalDate">Arrival Date of the guest.</param>
        /// <param name="ratePlanCode">Rate Plan Code to find associated Guarantee Codes.</param>
        /// <param name="blockId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="reservationGuestId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="companyId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="travelAgentId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="sourceId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="groupId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="guaranteeCode">Guarantee Code should be supplied only for the code verification purpose, if the supplied code is valid for the rest of the criteria it will return the response with the Guarantee Code information.</param>
        /// <param name="calculateEstimateAmount">Determines whether estimated amount to be calculated or not</param>
        /// <param name="numberOfAdults">Defines the number of Adults.</param>
        /// <param name="numberOfChildren">Defines the number of Children.</param>
        /// <param name="roomType">Room Type for the reservation</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partnerâ€™s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to fetch reservation guarantees.</returns>
        /// <exception cref="PriceAvailabilityRateExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReservationGuaranteesPolicies> GetReservationGuaranteesAsync(string hotelId, System.DateTimeOffset arrivalDate, string ratePlanCode, string blockId, string reservationGuestId, string companyId, string travelAgentId, string sourceId, string groupId, string guaranteeCode, bool? calculateEstimateAmount, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, int? numberOfRooms, int? numberOfAdults, int? numberOfChildren, string roomType, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (arrivalDate == null)
                throw new System.ArgumentNullException("arrivalDate");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/guarantees?");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("arrivalDate") + "=").Append(System.Uri.EscapeDataString(arrivalDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (ratePlanCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ratePlanCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("blockId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(blockId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reservationGuestId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reservationGuestId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reservationGuestId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("companyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(companyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (travelAgentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("travelAgentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(travelAgentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sourceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sourceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sourceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (groupId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("groupId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (guaranteeCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("guaranteeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(guaranteeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (calculateEstimateAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("calculateEstimateAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(calculateEstimateAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (numberOfRooms != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("numberOfRooms") + "=").Append(System.Uri.EscapeDataString(ConvertToString(numberOfRooms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (numberOfAdults != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("numberOfAdults") + "=").Append(System.Uri.EscapeDataString(ConvertToString(numberOfAdults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (numberOfChildren != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("numberOfChildren") + "=").Append(System.Uri.EscapeDataString(ConvertToString(numberOfChildren, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReservationGuaranteesPolicies>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PriceAvailabilityRateExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PriceAvailabilityRateExeption("ReservationGuarantees not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PriceAvailabilityRateExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the Restrictions
        /// </summary>
        /// <param name="hotelId">Unique ID that identifies a single hotel property.</param>
        /// <param name="chainName">The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).</param>
        /// <param name="end">The ending value of the date range.</param>
        /// <param name="fetchSizeByDay">Defines the maximum amount of restrictions by day.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="restrictionSearchCriteriaStartDate">The starting value of the date range.</param>
        /// <param name="bookingChannelCode">Indicates restriction is applicable to specified Booking Channel Code in conjunction with other codes, if specified.</param>
        /// <param name="ratePlanCategory">Indicates restriction is applicable to specified Rate Plan Category in conjunction with other codes, if specified.</param>
        /// <param name="ratePlanCode">Indicates restriction is applicable to specified Rate Plan Code in conjunction with other codes, if specified.</param>
        /// <param name="roomClass">Indicates restriction is applicable to specified Room Category in conjunction with other codes, if specified.</param>
        /// <param name="roomType">Indicates restriction is applicable to specified Room Type in conjunction with other codes, if specified.</param>
        /// <param name="filterCodeCategory">An enumerated type defining the Filter Code Categort or Type. Values: BookingChannelCode, RoomClass, RoomType, RatePlanCategory, RatePlanCode.</param>
        /// <param name="filterCode">Defines BookingChannelCode, RoomClass, RoomType, RatePlanCategory or RatePlanCode to filter the Restriction.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partnerâ€™s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching restrictions based on date range.</returns>
        /// <exception cref="PriceAvailabilityRateExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RestrictionsByDateRange> GetRestrictionsByDateRangeAsync(string hotelId, string chainName, System.DateTimeOffset? end, int? fetchSizeByDay, int? limit, RestrictionInfo? restrictionInfo, System.DateTimeOffset? restrictionSearchCriteriaStartDate, string bookingChannelCode, string ratePlanCategory, string ratePlanCode, string roomClass, string roomType, FilterCodeCategory? filterCodeCategory, System.Collections.Generic.IEnumerable<string> filterCode, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return GetRestrictionsByDateRangeAsync(hotelId, chainName, end, fetchSizeByDay, limit, restrictionInfo, restrictionSearchCriteriaStartDate, bookingChannelCode, ratePlanCategory, ratePlanCode, roomClass, roomType, filterCodeCategory, filterCode, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the Restrictions
        /// </summary>
        /// <param name="hotelId">Unique ID that identifies a single hotel property.</param>
        /// <param name="chainName">The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).</param>
        /// <param name="end">The ending value of the date range.</param>
        /// <param name="fetchSizeByDay">Defines the maximum amount of restrictions by day.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="restrictionSearchCriteriaStartDate">The starting value of the date range.</param>
        /// <param name="bookingChannelCode">Indicates restriction is applicable to specified Booking Channel Code in conjunction with other codes, if specified.</param>
        /// <param name="ratePlanCategory">Indicates restriction is applicable to specified Rate Plan Category in conjunction with other codes, if specified.</param>
        /// <param name="ratePlanCode">Indicates restriction is applicable to specified Rate Plan Code in conjunction with other codes, if specified.</param>
        /// <param name="roomClass">Indicates restriction is applicable to specified Room Category in conjunction with other codes, if specified.</param>
        /// <param name="roomType">Indicates restriction is applicable to specified Room Type in conjunction with other codes, if specified.</param>
        /// <param name="filterCodeCategory">An enumerated type defining the Filter Code Categort or Type. Values: BookingChannelCode, RoomClass, RoomType, RatePlanCategory, RatePlanCode.</param>
        /// <param name="filterCode">Defines BookingChannelCode, RoomClass, RoomType, RatePlanCategory or RatePlanCode to filter the Restriction.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partnerâ€™s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for fetching restrictions based on date range.</returns>
        /// <exception cref="PriceAvailabilityRateExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RestrictionsByDateRange> GetRestrictionsByDateRangeAsync(string hotelId, string chainName, System.DateTimeOffset? end, int? fetchSizeByDay, int? limit, RestrictionInfo? restrictionInfo, System.DateTimeOffset? restrictionSearchCriteriaStartDate, string bookingChannelCode, string ratePlanCategory, string ratePlanCode, string roomClass, string roomType, FilterCodeCategory? filterCodeCategory, System.Collections.Generic.IEnumerable<string> filterCode, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/restrictions?");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (chainName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("chainName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(chainName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (end != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(end.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fetchSizeByDay != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fetchSizeByDay") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fetchSizeByDay, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (restrictionInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("restrictionInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(restrictionInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (restrictionSearchCriteriaStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("restrictionSearchCriteriaStartDate") + "=").Append(System.Uri.EscapeDataString(restrictionSearchCriteriaStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bookingChannelCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bookingChannelCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bookingChannelCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ratePlanCategory != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanCategory") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ratePlanCategory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ratePlanCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ratePlanCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomClass != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomClass") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomClass, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterCodeCategory != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filterCodeCategory") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterCodeCategory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterCode != null)
            {
                foreach (var item_ in filterCode) { urlBuilder_.Append(System.Uri.EscapeDataString("filterCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestrictionsByDateRange>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PriceAvailabilityRateExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PriceAvailabilityRateExeption("RestrictionsByDateRange not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PriceAvailabilityRateExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PriceAvailabilityRateExeption(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PriceAvailabilityRateExeption(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Response object to search hotel availability based on request segment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelAvailability
    {
        [Newtonsoft.Json.JsonProperty("hotelAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailResponseSegmentType> HotelAvailability1 { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailResponseSegmentType
    {
        [Newtonsoft.Json.JsonProperty("roomStays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoomStayType> RoomStays { get; set; }

        [Newtonsoft.Json.JsonProperty("masterInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailResponseMasterInfoType MasterInfo { get; set; }

        /// <summary>
        /// Hotel Alert Message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelAlert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string HotelAlert { get; set; }

        /// <summary>
        /// Indicates the restriction types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MasterRestrictionStatusesType? Restriction { get; set; }

        /// <summary>
        /// Indicates the amount returned is FIRSTNIGHT/HIGHEST/LOWEST/MOSTCOMMON/AVERAGE when there is rate change in the stay dates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RateChangeTypeType? RateChange { get; set; }

        /// <summary>
        /// Hotel information like hotel name,address,communication etc and also alternate hotel information if requested property is not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelInfoType HotelInfo { get; set; }

        /// <summary>
        /// Channel related information if availability request is send for a channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelAvailRSInfoType ChannelInformation { get; set; }

        /// <summary>
        /// Rate Plan Set whose Rate Plans are returned in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanSet { get; set; }

        /// <summary>
        /// Hotel Code whose Rate Plans are returned in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// If the availability response has a house level restriction, this flag will be true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("closed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Closed { get; set; }

        /// <summary>
        /// Used to indicate if the Room Rates returned are calculated based on points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redemption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Redemption { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>
        /// Used to indicate the paging key(rate room) when more rate rooms available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pagingKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PagingKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomStayType
    {
        /// <summary>
        /// Registration Number of the reservation for the current day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type RegistrationNumber { get; set; }

        /// <summary>
        /// Room information of the reservation for the current day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentRoomInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentRoomInfoType CurrentRoomInfo { get; set; }

        /// <summary>
        /// A collection of Room Rates associated with a particular Room Stay. Each Room Rate combination can have multiple rates. Example King room, Rack rate plan, Monday through Thursday, weekday amount, Friday and Saturday, weekend amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoomRateType> RoomRates { get; set; }

        [Newtonsoft.Json.JsonProperty("guestCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCountsType GuestCounts { get; set; }

        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ArrivalDate { get; set; }

        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DepartureDate { get; set; }

        /// <summary>
        /// The Expected Arrival and Departure Times.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResExpectedTimesType ExpectedTimes { get; set; }

        /// <summary>
        /// The Original Time Span(Arrival, Departure) which covers the Room Stay. In case of Rolling No Show TimeSpan's StratDate moves forward but OriginalTimeSpan's StratDate remains the same.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType OriginalTimeSpan { get; set; }

        /// <summary>
        /// The guarantee information associated to the Room Stay. A maximum of 5 occurances are available for use depending on the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        /// <summary>
        /// Promotions applied to the reservation to get the promotional rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PromotionType Promotion { get; set; }

        /// <summary>
        /// Connecting Rooms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suiteWith", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string SuiteWith { get; set; }

        /// <summary>
        /// The total amount charged for the Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Total { get; set; }

        /// <summary>
        /// The total number of Points charged for the Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType TotalPoints { get; set; }

        /// <summary>
        /// Informative indicators indicating different values of an attribute exists over the stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("multiValueAttrs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> MultiValueAttrs { get; set; }

        /// <summary>
        /// Indicates Upsell Information to be applied on Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpsellInfoType UpsellInfo { get; set; }

        /// <summary>
        /// Denotes the status of Room Ready and Key Ready messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResMobileNotificationsType MobileNotifications { get; set; }

        /// <summary>
        /// When true, indicates a room number cannot be changed. When false, indicates a room number may be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomNumberLocked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomNumberLocked { get; set; }

        /// <summary>
        /// This control whether rate info will be printed in confirmation letter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintRate { get; set; }

        /// <summary>
        /// Indicates whether reservation is for Unit/Room Owner or Authorized User. If this attribute is not define it is a regular/rental reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerReservationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OwnerResTypeType? OwnerReservationType { get; set; }

        /// <summary>
        /// This is populated in case of primary share scenario. This indicates whether this reservation is primary or non primary. Changes or postings to the 'non-primary' share reservation is not allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryShareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrimaryShareTypeType? PrimaryShareType { get; set; }

        /// <summary>
        /// Indicates whether the reservation is pre-registered for internet check-in or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remoteCheckInAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemoteCheckInAllowed { get; set; }

        /// <summary>
        /// Classifies the medium(Channel field on reservation screen) through which the reservation is made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingMedium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingMedium { get; set; }

        /// <summary>
        /// Description of the booking medium.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingMediumDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BookingMediumDescription { get; set; }

        /// <summary>
        /// Number of Upsell Offers Available for this stay. This will only be populated if the Upsell Instruction is included in the Allowed Instruction request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableUpsellOfferCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableUpsellOfferCount { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UniqueID_Type
    {
        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Room information of the reservation for the current day.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CurrentRoomInfoType
    {
        /// <summary>
        /// Current room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        /// <summary>
        /// Current room number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// Suggested room numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suggestedRoomNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CodeListType SuggestedRoomNumbers { get; set; }

        /// <summary>
        /// Current room description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomDescription { get; set; }

        /// <summary>
        /// Represents the room view code like City view, River view, Ocean view etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomViewCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RoomViewCode { get; set; }

        /// <summary>
        /// Represents the room was assigned by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AssignedByAI { get; set; }

        /// <summary>
        /// Represents the room was upgraded by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpgradedByAI { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CodeListType : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomRateType
    {
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Total { get; set; }

        [Newtonsoft.Json.JsonProperty("totalPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType TotalPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("rates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RatesType Rates { get; set; }

        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PackageElementType> Packages { get; set; }

        /// <summary>
        /// Profile associated with the room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stayProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationProfileType> StayProfiles { get; set; }

        /// <summary>
        /// A collection of Guest Counts associated with the room rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCountsType GuestCounts { get; set; }

        /// <summary>
        /// A collection of Tax Free Guest Counts associated with the room rate. This list does not add to the guest count but just indicates number of tax free guests out of guest counts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxFreeGuestCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCountsType TaxFreeGuestCounts { get; set; }

        /// <summary>
        /// Membership Awards code applied on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResAwardsType Awards { get; set; }

        /// <summary>
        /// Exchange Type information for the postings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ForeignExchangeType ForeignExchange { get; set; }

        /// <summary>
        /// Key information about the block for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationBlockType ReservationBlock { get; set; }

        /// <summary>
        /// Information about the Room Rate Combination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomRateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomRateInfo { get; set; }

        /// <summary>
        /// Meal plan codes for rate plan code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealPlans", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public MealPlansType MealPlans { get; set; }

        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

        /// <summary>
        /// Used to specify an availability status for the room rate. When available value could be either not specified or "Available".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoomRateAvailReasonType? Availability { get; set; }

        [Newtonsoft.Json.JsonProperty("suppressRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuppressRate { get; set; }

        /// <summary>
        /// The code that relates to the market being sold to (e.g., the corporate market, packages).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MarketCode { get; set; }

        /// <summary>
        /// Description of the market code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string MarketCodeDescription { get; set; }

        /// <summary>
        /// To specify where the business came from e.g. radio, newspaper ad, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Description of the source of business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string SourceCodeDescription { get; set; }

        /// <summary>
        /// The number of rooms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfUnits { get; set; }

        /// <summary>
        /// A string value representing the unique identification of a room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// True indicates as pseudo room type. This is usually used for a posting master reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pseudoRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PseudoRoom { get; set; }

        /// <summary>
        /// Room Type used for the Rate calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypeCharged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomTypeCharged { get; set; }

        /// <summary>
        /// Commission Code applicable for commission calculation for Travel Agent/Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// Indicates Commission is applicable for commission calculation for Travel Agent/Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Commissionable { get; set; }

        /// <summary>
        /// Indicates this reservation is for House use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("houseUseOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HouseUseOnly { get; set; }

        /// <summary>
        /// Indicates this reservation rate is complimentary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complimentary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complimentary { get; set; }

        /// <summary>
        /// Indicates whether the room type inventory was taken from the allotment or House availability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryLender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string InventoryLender { get; set; }

        /// <summary>
        /// Fixed Rate Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FixedRate { get; set; }

        /// <summary>
        /// Best Available rates ranking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BarRanking { get; set; }

        /// <summary>
        /// For RatePlanSet equals BESTAVAILABLERATE, in case Rate Groups are enabled the element provides the rate group for the rate plan code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateGroup { get; set; }

        /// <summary>
        /// Indicates if the Rate Code is discountable i.e discounts are allowed on the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DiscountAllowed { get; set; }

        /// <summary>
        /// Indicates if the Rate Code has BOGO(Bye one Get one) indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bogoDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BogoDiscount { get; set; }

        /// <summary>
        /// Rate plan type like Corporate,Regular,Military,Weekend etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateLevel { get; set; }

        /// <summary>
        /// Indicates commission percentage used by the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommissionPercentage { get; set; }

        /// <summary>
        /// Indicates commission amount used by the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommissionAmount { get; set; }

        /// <summary>
        /// If true, indicates that credentials is required to sell the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentialsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CredentialsRequired { get; set; }

        /// <summary>
        /// If true, indicates if tax is included in the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TaxIncluded { get; set; }

        /// <summary>
        /// Rate code description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RateDescription { get; set; }

    }

    /// <summary>
    /// The total amount charged for the service including additional amounts and fees.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TotalType
    {
        /// <summary>
        /// A collection of taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxesType Taxes { get; set; }

        /// <summary>
        /// A collection of fees or service charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeesType Fees { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// The total amount not including any associated tax (e.g., sales tax, VAT, GST or any associated tax).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountBeforeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountBeforeTax { get; set; }

        /// <summary>
        /// The total amount including all associated taxes (e.g., sales tax, VAT, GST or any associated tax).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountAfterTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountAfterTax { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Type of charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// When true indicates that the rate amount has been overridden.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateOverride { get; set; }

    }

    /// <summary>
    /// A collection of taxes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TaxesType
    {
        /// <summary>
        /// An individual tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<TaxType> Tax { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// Applicable tax element. This element allows for both percentages and flat amounts. If one field is used, the other should be zero since logically, taxes should be calculated in only one of the two ways.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TaxType
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Used to indicate if the amount is inclusive or exclusive of other charges, such as taxes, or is cumulative (amounts have been added to each other).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AmountDeterminationType? Type { get; set; }

        /// <summary>
        /// Code identifying the fee (e.g.,agency fee, municipality fee).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// Used to indicate if an amount is inclusive or exclusive of other charges, such as taxes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AmountDeterminationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inclusive")]
        Inclusive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Exclusive")]
        Exclusive = 1,

    }

    /// <summary>
    /// A collection of fees or service charges.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FeesType
    {
        /// <summary>
        /// An individual fee or service charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<FeeType> Fee { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// Applicable service charges or fees.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FeeType
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Used to indicate if the amount is inclusive or exclusive of other charges, such as taxes, or is cumulative (amounts have been added to each other).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AmountDeterminationType? Type { get; set; }

        /// <summary>
        /// Code identifying the fee (e.g.,agency fee, municipality fee).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// The Redeem Points contains the number of points required to book a room type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PointsType
    {
        /// <summary>
        /// Awards type for the award type rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AwardsType { get; set; }

        /// <summary>
        /// No of points required to book this Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points { get; set; }

    }

    /// <summary>
    /// Individual rate amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RatesType
    {
        /// <summary>
        /// The Rate contains a collection of elements that define the amount of the rate, associated fees, additional occupant amounts. Taxes can be broken out or included within the various amounts. A currency can be associated to each amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<AmountType> Rate { get; set; }

        /// <summary>
        /// Rate Range details like maximum rate amount and minimum rate amount in each available rate category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RateRangeType> RateRange { get; set; }

    }

    /// <summary>
    /// Base charge and additional charges related to a room that includes such things as additional guest amounts, cancel fees, etc. Also includes Discount percentages, total amount, and the rate description.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AmountType
    {
        /// <summary>
        /// The base amount charged for the accommodation or service per unit of time (ex: Nightly, Weekly, etc). If TaxInclusive is set to True, then taxes are included in the base amount. Note that any additional charges should itemized in the other elements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Base { get; set; }

        /// <summary>
        /// Collection of incremental charges per age qualifying code for additional guests. Amount charged for additional occupant is with respect to age group of the base guests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalGuestAmounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<AdditionalGuestAmountType> AdditionalGuestAmounts { get; set; }

        /// <summary>
        /// Discount percentage and/or Amount, code and textual reason for discount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiscountType Discount { get; set; }

        /// <summary>
        /// Indicates the share rate percentage for the reservation if set to CUSTOMSPLIT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareRatePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? ShareRatePercentage { get; set; }

        /// <summary>
        /// Last rate share distribution instruction applied on share reservation daily rate segment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareDistributionInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareDistributionInstructionType? ShareDistributionInstruction { get; set; }

        /// <summary>
        /// The total amount charged for this rate including additional occupant amounts and fees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Total { get; set; }

        /// <summary>
        /// The Points contains the number of points required to book a particular room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType RequiredPoints { get; set; }

        /// <summary>
        /// The reservation effective amount charged for the accommodation or service (i.e. base amount + amount for Add to Rate Combine Line packages) per unit of time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType EffectiveRate { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AdditionalGuestAmountType
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("ageQualifyingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalGuestAmountTypeAgeQualifyingCode? AgeQualifyingCode { get; set; }

    }

    /// <summary>
    /// Identifies and provides details about the discount. This allows for both percentages and flat amounts. If one field is used, the other should be zero/not specified since logically.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DiscountType
    {
        [Newtonsoft.Json.JsonProperty("discountReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DiscountReason { get; set; }

        /// <summary>
        /// Percentage discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Specifies the type of discount (e.g., No condition, LOS, Deposit or Total amount spent).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DiscountCode { get; set; }

    }

    /// <summary>
    /// The type of Rate Amount Change to be done on the Sharer reservation. This can be FULL -&gt; Full Rate for each Sharer. SPLIT-&gt; Split the Rate amount between Sharer Reservations. ENTIRE -&gt; This Sharer will get the total amount of the rate code for all the Sharer Reservations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ShareDistributionInstructionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Entire")]
        Entire = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Split")]
        Split = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomSplit")]
        CustomSplit = 3,

    }

    /// <summary>
    /// Rate Range details like maximum rate amount and minimum rate amount in each available rate category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RateRangeType
    {
        /// <summary>
        /// The base amount charged for the accommodation or service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TotalType> Base { get; set; }

        /// <summary>
        /// Rate Change Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateChange { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PackageElementType
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("allowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Allowance { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Description { get; set; }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("packageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PackageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("calculationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string CalculationRule { get; set; }

        [Newtonsoft.Json.JsonProperty("postingRhythm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PostingRhythm { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("includedInRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludedInRate { get; set; }

        [Newtonsoft.Json.JsonProperty("addRateSeprateLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddRateSeprateLine { get; set; }

        [Newtonsoft.Json.JsonProperty("addRateCombinedLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddRateCombinedLine { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("sellSeparate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SellSeparate { get; set; }

    }

    /// <summary>
    /// A monetary value expressed with a currency code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CurrencyAmountType
    {
        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationProfileType
    {
        /// <summary>
        /// Unique identifiers for the Profile for both internal and external systems. In case of Travel Agent the IATA code and in case of Company can be any form of identifier as id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

        /// <summary>
        /// Provides detailed information regarding either a company or a customer profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileType Profile { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResProfileTypeType? ReservationProfileType1 { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// Type provides the detailed information about the profile and its children.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileType
    {
        /// <summary>
        /// Detailed customer information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerType Customer { get; set; }

        /// <summary>
        /// Detailed company information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyType Company { get; set; }

        /// <summary>
        /// The profile image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageSetType ProfileImage { get; set; }

        /// <summary>
        /// List of customer addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses Addresses { get; set; }

        /// <summary>
        /// Business/Market Segment associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessSegments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> BusinessSegments { get; set; }

        /// <summary>
        /// Territory associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("territory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Territory { get; set; }

        /// <summary>
        /// Trace Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TraceCode { get; set; }

        /// <summary>
        /// Owner Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Influence Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("influenceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InfluenceCode { get; set; }

        /// <summary>
        /// List of Telephone Number Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Telephones Telephones { get; set; }

        /// <summary>
        /// List of email address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Emails Emails { get; set; }

        /// <summary>
        /// List of Information on a URL for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLs URLs { get; set; }

        /// <summary>
        /// List of Notes for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        /// <summary>
        /// List of Delivery methods configured against a Property for this Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileDeliveryMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileDeliveryMethods ProfileDeliveryMethods { get; set; }

        /// <summary>
        /// List of loyalty program(s) the profile is subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileMemberships ProfileMemberships { get; set; }

        /// <summary>
        /// List of customer preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferenceCollection PreferenceCollection { get; set; }

        /// <summary>
        /// List of customer keywords.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Keywords Keywords { get; set; }

        /// <summary>
        /// List of profile negotiated rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NegotiatedRates NegotiatedRates { get; set; }

        /// <summary>
        /// List of channel negotiated rates that this profile has been assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GdsNegotiatedRates GdsNegotiatedRates { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ProfileIndicators { get; set; }

        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationships Relationships { get; set; }

        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipsSummary RelationshipsSummary { get; set; }

        /// <summary>
        /// Collection of Detailed information on history and future reservations associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationHistoryFutureInfoType ReservationInfoList { get; set; }

        /// <summary>
        /// Collection of Detailed information on history and future reservations associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stayReservationInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationStayHistoryFutureInfoType StayReservationInfoList { get; set; }

        /// <summary>
        /// Information on last stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastStayInfoType LastStayInfo { get; set; }

        /// <summary>
        /// Detailed information on access type associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileAccessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileAccessType ProfileAccessType { get; set; }

        /// <summary>
        /// Detailed information on restrictions associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileRestrictions ProfileRestrictions { get; set; }

        /// <summary>
        /// Contains collection of mailing action list associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mailingActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MailingActionsType MailingActions { get; set; }

        /// <summary>
        /// Contains privacy related information associated with the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivacyInfoType PrivacyInfo { get; set; }

        /// <summary>
        /// Contains cashiering related details for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCashieringType Cashiering { get; set; }

        /// <summary>
        /// Contains commission related details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileCommissionType> CommissionInfoList { get; set; }

        /// <summary>
        /// Collections of user defined fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDefinedFieldsType UserDefinedFields { get; set; }

        /// <summary>
        /// List of Web User Accounts of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webUserAccounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WebUserAccountsType WebUserAccounts { get; set; }

        /// <summary>
        /// Profile information about tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileTaxInfoType TaxInfo { get; set; }

        /// <summary>
        /// Sales information of the profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesInfoType SalesInfo { get; set; }

        /// <summary>
        /// E-Certificate assosiated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ECertificatesType ECertificates { get; set; }

        /// <summary>
        /// List of profile subscriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileSubscriptionListType Subscriptions { get; set; }

        /// <summary>
        /// Localization Guest Type assocaited to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localizationGuestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LocalizationGuestType { get; set; }

        /// <summary>
        /// Eligible for Fiscal Folio/Payload generation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eligibleForFiscalFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EligibleForFiscalFolio { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType1 { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// Hotel which this profile is registered with. This attribute is not used for configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

        /// <summary>
        /// Hotel which this profile is to be registered. This attribute is only used during creation of profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestForHotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RequestForHotel { get; set; }

        /// <summary>
        /// What level this profile is protected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProtectedBy { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// Mark this profile as recently accessed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markAsRecentlyAccessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkAsRecentlyAccessed { get; set; }

        /// <summary>
        /// "true" setting marks the profile to be kept from being purged, once the profile is marked inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markForHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkForHistory { get; set; }

        /// <summary>
        /// Populates true if the profile has commission configured false otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCommission { get; set; }

        /// <summary>
        /// Flag to indicate if the negotiated rates are inherited from master profile. Flag is available only when the profile is linked to master profile and master profile has negotiated rate codes attached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inheritedNegRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InheritedNegRates { get; set; }

    }

    /// <summary>
    /// Contains basic data on the customer's identity, location, relationships, finances, memberships, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomerType
    {
        /// <summary>
        /// Detailed name information for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<PersonNameType> PersonName { get; set; }

        /// <summary>
        /// Provides information about the guest's anonymization status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnonymizationType Anonymization { get; set; }

        /// <summary>
        /// Name of the (self-professed) country that is claimed for citizenship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType CitizenCountry { get; set; }

        /// <summary>
        /// List of identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifications Identifications { get; set; }

        /// <summary>
        /// Profession of a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Profession { get; set; }

        /// <summary>
        /// Immigration/visa information of a foreign person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlienInfoType AlienInfo { get; set; }

        /// <summary>
        /// Country of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType BirthCountry { get; set; }

        /// <summary>
        /// Name Of the company the individual is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string LegalCompany { get; set; }

        /// <summary>
        /// Company Information of the Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyInfoType CompanyInfo { get; set; }

        /// <summary>
        /// Business Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BusinessTitle { get; set; }

        /// <summary>
        /// Identifies the gender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerTypeGender? Gender { get; set; }

        /// <summary>
        /// Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// Indicates the date of birth as masked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDateMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BirthDateMasked { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Nationality code identification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nationality { get; set; }

        /// <summary>
        /// Nationality code description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationalityDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NationalityDescription { get; set; }

        /// <summary>
        /// The supplier's ranking of the customer (e.g., VIP, numerical ranking).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CustomerValue { get; set; }

        /// <summary>
        /// Credit Rating of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreditRating { get; set; }

        /// <summary>
        /// VIP status of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipStatus { get; set; }

        /// <summary>
        /// Description of the VIP status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string VipDescription { get; set; }

        /// <summary>
        /// Place of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BirthPlace { get; set; }

        /// <summary>
        /// This element tells profile is property exclusive or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrivateProfile { get; set; }

        /// <summary>
        /// This element tells if profile is blacklisted or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Blacklist { get; set; }

    }

    /// <summary>
    /// This provides name information for a person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PersonNameType
    {
        /// <summary>
        /// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// The middle name of the person name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Family name, last name. May also be used for full name if the sending system does not have the ability to separate a full name into its parts, e.g. the surname element may be used to pass the full name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        /// <summary>
        /// Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Title Suffix. Must be populated if ADVANCED_TITLE is on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitleSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NameTitleSuffix { get; set; }

        /// <summary>
        /// Envelope Greeting of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("envelopeGreeting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EnvelopeGreeting { get; set; }

        /// <summary>
        /// Salutation of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salutation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Salutation { get; set; }

        /// <summary>
        /// Type of name of the individual, such as former, nickname, alternate or alias name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonNameTypeType? NameType { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// When name type is external, indicates the external system the name belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ExternalSystem { get; set; }

    }

    /// <summary>
    /// Person's name in an external system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PersonNameTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alternate")]
        Alternate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Incognito")]
        Incognito = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Phonetic")]
        Phonetic = 4,

    }

    /// <summary>
    /// Provides information about guest's anonymization status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AnonymizationType
    {
        /// <summary>
        /// Status of anonymization such as Requested or Anonymized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymizationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnonymizationStatusType? AnonymizationStatus { get; set; }

        /// <summary>
        /// Date and Time when the guest was anonymized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymizationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AnonymizationDate { get; set; }

    }

    /// <summary>
    /// Guest has been anonymized.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AnonymizationStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Anonymized")]
        Anonymized = 1,

    }

    /// <summary>
    /// Code for a country or a nationality.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CountryNameType
    {
        /// <summary>
        /// Used for Character Strings, length 0 to 200.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Value { get; set; }

        /// <summary>
        /// Code for a country or a nationality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Information on the identification of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IdentificationInfoType
    {
        /// <summary>
        /// Detailed information on the identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentificationType Identification { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Identification information of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IdentificationType
    {
        /// <summary>
        /// Identification Type. Eg Passport, Driving License etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string IdType { get; set; }

        /// <summary>
        /// Identification Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Masked Identification Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idNumberMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdNumberMasked { get; set; }

        /// <summary>
        /// The country where Identification was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IssuedCountry { get; set; }

        /// <summary>
        /// Issued date of Identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssuedDate { get; set; }

        /// <summary>
        /// The place where Identification was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IssuedPlace { get; set; }

        /// <summary>
        /// Expiration date of Identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        /// <summary>
        /// Property where the identification belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    /// <summary>
    /// immigration/visa information of a foreign person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AlienInfoType
    {
        /// <summary>
        /// Alien Registration Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienRegistrationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlienRegistrationNo { get; set; }

        /// <summary>
        /// Immigration Status on an Alien.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("immigrationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ImmigrationStatus { get; set; }

        /// <summary>
        /// Visa Type of an Alien.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaValidityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VisaValidityType { get; set; }

    }

    /// <summary>
    /// Company Information of the Profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanyInfoType
    {
        /// <summary>
        /// Legal Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LegalCompany { get; set; }

        /// <summary>
        /// Department of the Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Department { get; set; }

        /// <summary>
        /// Business Title or Position of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Position { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanyType
    {
        /// <summary>
        /// Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Second Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName2 { get; set; }

        /// <summary>
        /// Third Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName3 { get; set; }

        /// <summary>
        /// Alternate Name of the Company. Mainly, it's the name of the company written in the Alternate Language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AlternateName { get; set; }

        /// <summary>
        /// Alternate Language of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AlternateLanguage { get; set; }

        /// <summary>
        /// A jurisdiction(Territory) in which a company is authorized to do business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string BusinessLocale { get; set; }

        /// <summary>
        /// IATA Information of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iATAInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IATAInfoType IATAInfo { get; set; }

        /// <summary>
        /// Business Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BusinessTitle { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Nationality code identification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nationality { get; set; }

        /// <summary>
        /// Nationality code description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationalityDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NationalityDescription { get; set; }

        /// <summary>
        /// Commission code of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// Credit Rating of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreditRating { get; set; }

        /// <summary>
        /// The type of corporate ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CorporateIdType { get; set; }

        /// <summary>
        /// VIP status of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipStatus { get; set; }

        /// <summary>
        /// Description of the VIP status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string VipDescription { get; set; }

        /// <summary>
        /// This element tells if profile is blacklisted or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Blacklist { get; set; }

    }

    /// <summary>
    /// IATA Information of the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IATAInfoType
    {
        /// <summary>
        /// IATA Company Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iATACompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IATACompany { get; set; }

        /// <summary>
        /// IATA Consortia.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iATAConsortia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string IATAConsortia { get; set; }

        /// <summary>
        /// IATA Validation Result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iATAValidationResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IATAValidationResult { get; set; }

    }

    /// <summary>
    /// Represents on image set record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ImageSetType
    {
        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// The image set name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(800)]
        public string ImageSet { get; set; }

        /// <summary>
        /// The image set sequence ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SequenceId { get; set; }

        /// <summary>
        /// The image set enumerated style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageStyleType? ImageStyle { get; set; }

        /// <summary>
        /// The image set type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ImageType { get; set; }

        /// <summary>
        /// The image set hotel code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The image set chain code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChainCode { get; set; }

        /// <summary>
        /// The image set URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ImageURL { get; set; }

        /// <summary>
        /// The image set description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// The image set order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageOrder { get; set; }

        /// <summary>
        /// The image set website.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Website { get; set; }

    }

    /// <summary>
    /// An enumeration of image styles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ImageStyleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Thumbnail")]
        Thumbnail = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Icon")]
        Icon = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Square")]
        Square = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Banner")]
        Banner = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Button")]
        Button = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Lowres")]
        Lowres = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Highres")]
        Highres = 7,

    }

    /// <summary>
    /// Provides address information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddressInfoType
    {
        /// <summary>
        /// Address details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType Address { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Provides address information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddressType
    {
        /// <summary>
        /// Indicator to define if the Address is validated by the Address Validation System.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValidated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValidated { get; set; }

        /// <summary>
        /// When the address is unformatted (FormattedInd="false") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CityName { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Post Office City Extension Code number. City Extension mainly used for UK addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CityExtension { get; set; }

        /// <summary>
        /// County or District Name (e.g., Fairfax). This is read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string County { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType Country { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Defines the type of address (e.g. home, business, other).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Indicates whether to update the reservations or not. If true and the address is primary, then all associated active reservations will be updated with the new primary address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateReservations { get; set; }

        /// <summary>
        /// The postal barcode for the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BarCode { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// Information on a telephone number for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TelephoneInfoType
    {
        /// <summary>
        /// Phone details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneType Telephone { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Information on a telephone number for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TelephoneType
    {
        /// <summary>
        /// Indicates type of technology associated with this telephone number, such as Voice, Data, Fax, Pager, Mobile, TTY, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneTechType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PhoneTechType { get; set; }

        /// <summary>
        /// Describes the type of telephone number, in the context of its general use (e.g. Home, Business, Emergency Contact, Travel Arranger, Day, Evening).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneUseType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PhoneUseType { get; set; }

        /// <summary>
        /// Description of the PhoneUseType code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneUseTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PhoneUseTypeDescription { get; set; }

        /// <summary>
        /// Telephone number assigned to a single location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Extension to reach a specific party at the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Extension { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// Information on an email for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EmailInfoType
    {
        /// <summary>
        /// eMail deatils for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailType Email { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Information on an email for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EmailType
    {
        /// <summary>
        /// Defines the e-mail address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Defines the purpose of the e-mail address (e.g. personal, business, listserve).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the Type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// Supported Email format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailTypeEmailFormat? EmailFormat { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// Web site address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class URLInfoType
    {
        /// <summary>
        /// Provides URL information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLType Url { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Web site address, in IETF(The Internet Engineering Task Force) specified format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class URLType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Defines the purpose of the URL address, such as personal, business, public, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the Type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    /// <summary>
    /// Comment related to the profile/reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CommentInfoType
    {
        /// <summary>
        /// Comment details for the comment. It will be empty in case of delete comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentType Comment { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// An indication of a new paragraph for a sub-section of a formatted text message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CommentType
    {
        /// <summary>
        /// Formatted text content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormattedTextTextType Text { get; set; }

        /// <summary>
        /// An image for this paragraph.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Image { get; set; }

        /// <summary>
        /// A URL for this paragraph.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// Specifies Comment's Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CommentTitle { get; set; }

        /// <summary>
        /// Notification Location associated with the Note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NotificationLocation { get; set; }

        /// <summary>
        /// Specifies type of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Comment type Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, the comment may not be shown to the consumer. When false, the comment may be shown to the consumer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Internal { get; set; }

        /// <summary>
        /// When true, the comment may be confidential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confidential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Confidential { get; set; }

        /// <summary>
        /// When true, the note internal could be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideInternal { get; set; }

        /// <summary>
        /// When true, the note title will be populated from the note type description and couldn't be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProtectDescription { get; set; }

        /// <summary>
        /// If specified comment belongs to the Hotel, otherwise it is a global comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Specifies type of action described in the comments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ActionType { get; set; }

        /// <summary>
        /// Indicates at which date an action described in the comment must be taken.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActionDate { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// Provides text and indicates whether it is formatted or not.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FormattedTextTextType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

    }

    /// <summary>
    /// Delivery Information type to the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileDeliveryMethod
    {
        /// <summary>
        /// Delivery ID. It will be empty in case of new delivery method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type DeliveryId { get; set; }

        /// <summary>
        /// Delivery type can have a value EMAIL, ELECTRONIC etc and it depends on the parameter set in OPERA Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// Delivery value holds the corresponding value of the delivery type..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DeliveryValue { get; set; }

        /// <summary>
        /// Property that has delivery methods configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Module where this delivery type will be used. Example : EFolio Export, EInvoice , Fiscal, etc..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryModule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileDeliveryModuleType? DeliveryModule { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    /// <summary>
    /// Module where this delivery type will be used. Example : EFolio Export, EInvoice , Fiscal, etc..
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileDeliveryModuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EfolioExport")]
        EfolioExport = 0,

    }

    /// <summary>
    /// Detailed information of the memberships.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileMembershipType
    {
        /// <summary>
        /// Additional comments regarding to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParagraphType Comment { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newMembershipNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NewMembershipNumber { get; set; }

        /// <summary>
        /// Name to be displayed on the membership card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameOnCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// Description of the membership program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("programDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ProgramDescription { get; set; }

        /// <summary>
        /// Indicates the membership level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipLevel { get; set; }

        /// <summary>
        /// Indicates the membership level description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevelDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string MembershipLevelDescription { get; set; }

        /// <summary>
        /// Indicates the membership class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipClass { get; set; }

        /// <summary>
        /// Earning preference to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earningPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MembershipEarningPreferenceType? EarningPreference { get; set; }

        /// <summary>
        /// Indicates whether membership is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// benefits for the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BenefitsType Benefits { get; set; }

        /// <summary>
        /// Defines the degree of participation for this membership in the tier management portion of the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tierAdministration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierAdministrationType? TierAdministration { get; set; }

        /// <summary>
        /// Defines how downgrading will be handled for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DowngradeType? Downgrade { get; set; }

        /// <summary>
        /// The status of issuing new membership card to the member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reIssueNewCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardReIssueType? ReIssueNewCard { get; set; }

        /// <summary>
        /// True if you want to exclude the member from the Membership Fulfillment extract,the member's actions will not be included in the fulfillment extract until this value set to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeFromBatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeFromBatch { get; set; }

        /// <summary>
        /// Indicates Upgrade information which includes member's next tier level, policyRequirements for the next upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string UpgradeDescription { get; set; }

        /// <summary>
        /// Indicates information regarding the member's possible downgrades.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string DowngradeDescription { get; set; }

        /// <summary>
        /// Value Rating Type Description for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Rating { get; set; }

        /// <summary>
        /// Indicates how the guest enrolled in the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipEnrollmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipEnrollmentCode { get; set; }

        /// <summary>
        /// Indicates where the guest is in the membership enrollment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MemberStatus { get; set; }

        /// <summary>
        /// Profile MemberShip Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentPoints { get; set; }

        /// <summary>
        /// Label used to refer to points for this membership type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pointsLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PointsLabel { get; set; }

        /// <summary>
        /// Source from where the enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentSource { get; set; }

        /// <summary>
        /// Resort/CRO where enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentResort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentResort { get; set; }

        /// <summary>
        /// Preferred Card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreferredCard { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipId { get; set; }

        /// <summary>
        /// Type of membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipType { get; set; }

        /// <summary>
        /// Indicator if Membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembershipYn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string PrimaryMembershipYn { get; set; }

        /// <summary>
        /// Boolean indicator set to True implies membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryMembership { get; set; }

        /// <summary>
        /// Membership ID Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipIdNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MembershipIdNo { get; set; }

        /// <summary>
        /// Ranking assigned to the Player Profile by the Gaming system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerRanking { get; set; }

        /// <summary>
        /// Indicates how the award points for this membership type will be managed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("centralSetup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CentralSetup { get; set; }

        /// <summary>
        /// Indicates when the member signed up for the loyalty program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SignupDate { get; set; }

        /// <summary>
        /// Indicates the starting date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }

        /// <summary>
        /// Indicates the ending date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpireDate { get; set; }

        /// <summary>
        /// When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDateExclusiveIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpireDateExclusiveIndicator { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// An indication of a new paragraph for a sub-section of a formatted text message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ParagraphType
    {
        /// <summary>
        /// Formatted text content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormattedTextTextType Text { get; set; }

        /// <summary>
        /// An image for this paragraph.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Image { get; set; }

        /// <summary>
        /// A URL for this paragraph.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

    }

    /// <summary>
    /// The earning preference of a membership, it depends on the type of property. eg. when the property is a airline it should be Miles, other than Points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MembershipEarningPreferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Points")]
        Points = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Miles")]
        Miles = 1,

    }

    /// <summary>
    /// Basic information about membership benefit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BenefitsType : System.Collections.ObjectModel.Collection<BenefitType>
    {

    }

    /// <summary>
    /// Basic information about membership benefit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BenefitType
    {
        /// <summary>
        /// Benefit code associated with a membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Processing message for membership benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Message { get; set; }

        /// <summary>
        /// Indicates whether membership benefit is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

    }

    /// <summary>
    /// Do not upgrade membership. The membership may be downgraded.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TierAdministrationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NoUpgrade")]
        NoUpgrade = 1,

    }

    /// <summary>
    /// Do not downgrade membership when the next downgrade process runs. When the downgrade process runs, the membership will be automatically set to Grace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum DowngradeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Grace")]
        Grace = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Never")]
        Never = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Period")]
        Period = 2,

    }

    /// <summary>
    /// Request to re issue a new card.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CardReIssueType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotApplicable")]
        NotApplicable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 2,

    }

    /// <summary>
    /// Preference details for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PreferenceTypeType
    {
        /// <summary>
        /// Collection of Preferences for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceType> Preference { get; set; }

        /// <summary>
        /// Preference group code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferenceType { get; set; }

        /// <summary>
        /// Preference group description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PreferenceTypeDescription { get; set; }

        /// <summary>
        /// Preference Sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Sequence { get; set; }

        /// <summary>
        /// Maximum quantity of preferences allowed per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxQuantity { get; set; }

        /// <summary>
        /// Available quantity of preferences (maximum quantity - Existing preferences)per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableQuantity { get; set; }

        /// <summary>
        /// Maximum quantity of preferences used by any resort per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResortUsedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxResortUsedQuantity { get; set; }

        /// <summary>
        /// Whether this preference is reservation preference or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReservationPreference { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// Guest Preference details for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PreferenceType
    {
        /// <summary>
        /// Preference value for display purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string PreferenceValue { get; set; }

        /// <summary>
        /// Preference Description for display purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Whether this preference is property specific or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Global { get; set; }

        /// <summary>
        /// Source of the preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Source { get; set; }

        /// <summary>
        /// If specified preference belongs to the Hotels listed, otherwise it is a global preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Hotels { get; set; }

        [Newtonsoft.Json.JsonProperty("preferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferenceId { get; set; }

        /// <summary>
        /// Specifies the count of preferences excluded for the attached reservation preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludedPreferencesCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExcludedPreferencesCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class KeywordType
    {
        /// <summary>
        /// The keyword new value, in case keyword value is modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keywordDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public KeywordDetailType KeywordDetail { get; set; }

        /// <summary>
        /// The type of keyword
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The keyword value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Keyword { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class KeywordDetailType
    {
        /// <summary>
        /// The new keyword value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newKeyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NewKeyword { get; set; }

    }

    /// <summary>
    /// This holds a list of NegotiatedInfoType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NegotiatedType
    {
        [Newtonsoft.Json.JsonProperty("negotiatedInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<NegotiatedInfoType> NegotiatedInfoList { get; set; }

        /// <summary>
        /// Hotel code for the negotiated rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Rate plan code for the negotiated rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateCode { get; set; }

    }

    /// <summary>
    /// This provides information for a profile negotiated rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NegotiatedInfoType
    {
        /// <summary>
        /// The master identifier for multiple offices/locations under the same company profile. This is optional
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateAgreementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CorporateAgreementId { get; set; }

        /// <summary>
        /// Informational purposes only in numeric format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ComissionCode { get; set; }

        /// <summary>
        /// The sell order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>
        /// Negotiated Rate is inactive or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    /// <summary>
    /// This holds a list of GdsNegotiatedInfoType.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GdsNegotiatedType
    {
        /// <summary>
        /// List of channel negotiated rates for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<GdsNegotiatedInfoType> GdsNegotiatedInfoList { get; set; }

        /// <summary>
        /// Booking Channel Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingChannelCode { get; set; }

        /// <summary>
        /// Hotel Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Channel Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelRatePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChannelRatePlanCode { get; set; }

    }

    /// <summary>
    /// This provides information for a channel negotiated rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GdsNegotiatedInfoType
    {
        /// <summary>
        /// The GDS negotiated rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AccessCode { get; set; }

        /// <summary>
        /// The sell order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        /// <summary>
        /// The GDS Negotiated Rate is inactive or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    /// <summary>
    /// Collection of lamp indicators.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IndicatorsType : System.Collections.ObjectModel.Collection<IndicatorType>
    {

    }

    /// <summary>
    /// Lamp indicator Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IndicatorType
    {
        /// <summary>
        /// Name of the indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indicatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IndicatorName { get; set; }

        /// <summary>
        /// Indicates number of occurrences of the indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Relationship Type contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipInfoType
    {
        /// <summary>
        /// Information about the changes in relationship for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeRelationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChangeRelationsType ChangeRelationship { get; set; }

        /// <summary>
        /// Refer to Relationship Profile type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipProfileType RelationshipProfile { get; set; }

        /// <summary>
        /// Refer to Master Profile type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterAccountInfoType MasterAccountInfo { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Relation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string RelationDescription { get; set; }

        /// <summary>
        /// Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of the target relation(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    /// <summary>
    /// Detailed information regarding the changes made to relationships for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangeRelationsType
    {
        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Relation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string RelationDescription { get; set; }

        /// <summary>
        /// Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of the target relation(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipProfileType
    {
        /// <summary>
        /// Detailed information of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerType Customer { get; set; }

        /// <summary>
        /// Detailed information of the Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyType Company { get; set; }

        /// <summary>
        /// Information on telephone details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType Telephone { get; set; }

        /// <summary>
        /// Information on address details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInfoType Address { get; set; }

        /// <summary>
        /// Information on email address for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType Email { get; set; }

        /// <summary>
        /// Information on web url/address for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLInfoType URLs { get; set; }

        /// <summary>
        /// Primary Owner of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OwnerType PrimaryOwner { get; set; }

        /// <summary>
        /// Original profile details for which the relationships was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ProfileIdList { get; set; }

        /// <summary>
        /// Updated/changed profile details for the relationships created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeProfileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ChangeProfileIdList { get; set; }

        /// <summary>
        /// Indicates if this relationship is the primary relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Primary { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

    }

    /// <summary>
    /// Generic type for information about an owner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OwnerType
    {
        /// <summary>
        /// Hotel to which the owner belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Hotel { get; set; }

        /// <summary>
        /// Unique application user ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type UserId { get; set; }

        /// <summary>
        /// Unique application user name of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string UserName { get; set; }

        /// <summary>
        /// Unique Code to identify the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Unique owner profile information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Provides name information of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonNameType Name { get; set; }

        /// <summary>
        /// Department to which the owner belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Department { get; set; }

        /// <summary>
        /// Email information of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType Email { get; set; }

        /// <summary>
        /// Information on the telephone number of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType Phone { get; set; }

        /// <summary>
        /// Relationship of the owner within the profile or block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Relationship { get; set; }

        /// <summary>
        /// When true, this is a primary owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

    }

    /// <summary>
    /// This contains a generic code and description information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CodeDescriptionType
    {
        /// <summary>
        /// Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileId
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UniqueIDListType : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 1,

    }

    /// <summary>
    /// The types of Profile handled by the web service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
        Employee = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Vendor")]
        Vendor = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Purge")]
        Purge = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessHeader")]
        BusinessHeader = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingAccount")]
        BillingAccount = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Activity")]
        Activity = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Potential")]
        Potential = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Account")]
        Account = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MasterAccountInfoType
    {
        /// <summary>
        /// Unique ID of the Master account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type MasterAccountId { get; set; }

        /// <summary>
        /// Name of the Master account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MasterAccountName { get; set; }

    }

    /// <summary>
    /// RelationshipInfoSummaryType contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipInfoSummaryType
    {
        /// <summary>
        /// Refer to Relationship Profile Summary type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipProfileSummaryType RelationshipProfile { get; set; }

        /// <summary>
        /// Refer to Master Profile type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterAccountInfoType MasterAccountDetails { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string RelationshipID { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceRelation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string SourceRelationDescription { get; set; }

        /// <summary>
        /// Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of the target relation(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipProfileSummaryType
    {
        /// <summary>
        /// Name of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Telephone number assigned to a single location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Information on address details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipAddressType Address { get; set; }

        /// <summary>
        /// Defines the e-mail address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Unique Code to identify the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Original profile details for which the relationships was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ProfileIdList { get; set; }

        /// <summary>
        /// Indicates if this relationship is the primary relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? ProfileStatus { get; set; }

        /// <summary>
        /// When true, this is a primary owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryOwnerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryOwnerCode { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

    }

    /// <summary>
    /// Provides address information for a Relationship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipAddressType
    {
        /// <summary>
        /// When the address is unformatted (FormattedInd="false") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string City { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Country { get; set; }

    }

    /// <summary>
    /// Information of History and Future Reservation details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationHistoryFutureInfoType
    {
        /// <summary>
        /// Refer to History list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryListType HistoryList { get; set; }

        /// <summary>
        /// Refer to Future list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("futureList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FutureListType FutureList { get; set; }

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HistoryListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : History reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// The Reservation class contains the current reservation being created or altered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationInfoType
    {
        /// <summary>
        /// Unique identifiers for the reservation for both internal and external systems
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// Collection of room stays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayInfoType RoomStay { get; set; }

        /// <summary>
        /// Collection of guests associated with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationGuest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuestInfoType ReservationGuest { get; set; }

        /// <summary>
        /// Collection of guests who share this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResSharedGuestListType SharedGuests { get; set; }

        /// <summary>
        /// List of attached profiles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachedProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResAttachedProfileListType AttachedProfiles { get; set; }

        /// <summary>
        /// Payment method used for this reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationPaymentMethodType ReservationPaymentMethod { get; set; }

        /// <summary>
        /// Collection of reservation folio windows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationFolioWindows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationFolioWindowsType ReservationFolioWindows { get; set; }

        /// <summary>
        /// Set of reservation preferences which belongs to the Specials group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Specials { get; set; }

        /// <summary>
        /// Last Privacy Prompt Date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastPrivacyPromptDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPrivacyPromptDate { get; set; }

        /// <summary>
        /// Color setting of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisplayColor { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ReservationIndicators { get; set; }

        /// <summary>
        /// Current room status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HousekeepingRoomStatusType? RoomStatus { get; set; }

        /// <summary>
        /// Super Search matching terms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchMatches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public SearchMatchesType SearchMatches { get; set; }

        /// <summary>
        /// Point of Sale of reservation. Identifies the entity/channel who made the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOfSale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOfSaleType SourceOfSale { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was waitlisted. This could hold information as history even if reservation is not in Waitlist status anymore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("waitlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WaitlistResType Waitlist { get; set; }

        /// <summary>
        /// Information about the time and duration this reservation was on Queue for Checkin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationQueueInformationType Queue { get; set; }

        /// <summary>
        /// Information regarding housekeeping for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("housekeeping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResHousekeepingType Housekeeping { get; set; }

        /// <summary>
        /// Holds cashiering related information for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCashieringType Cashiering { get; set; }

        /// <summary>
        /// This stores the code for the type of tax calculation especially with tax exemption, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxTypeType TaxType { get; set; }

        /// <summary>
        /// Holds reservation deposit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationDepositType Deposit { get; set; }

        /// <summary>
        /// Collection of reservation allowed actions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(11)]
        public ReservationAllowedActionsType AllowedActions { get; set; }

        /// <summary>
        /// Revenues and Balances Amount summary for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenuesAndBalances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResRevenueBalanceType RevenuesAndBalances { get; set; }

        /// <summary>
        /// Collection of Hotel Interfaces and rights, this is populated only when fetching interface status for rooms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelInterfaceStatusList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInterfaceStatusType> HotelInterfaceStatusList { get; set; }

        /// <summary>
        /// Currency code preferred by guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestPreferredCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GuestPreferredCurrency { get; set; }

        /// <summary>
        /// Currency code preferred by guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turndownInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationTurndownInfoType TurndownInfo { get; set; }

        /// <summary>
        /// Denotes the status of Room Ready, Key Ready messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResMobileNotificationsType MobileNotifications { get; set; }

        /// <summary>
        /// Collection of reservation communication details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCommunicationType ReservationCommunication { get; set; }

        /// <summary>
        /// Information relating to Reservation's Advance Checked In state and Expected Time of Return
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advanceCheckIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvanceCheckInType AdvanceCheckIn { get; set; }

        /// <summary>
        /// This flag will determine wheather the reservation is eligible for Welcome Offer or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("welcomeOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WelcomeOffer { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationInfo CancellationInfo { get; set; }

        /// <summary>
        /// Number of keys created for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KeyCount { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelName { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedServiceTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExpectedServiceTime { get; set; }

        /// <summary>
        /// Boolean True if this reservation is reserving rooms. False if it is only reserving services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStayReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomStayReservation { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

        /// <summary>
        /// When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("walkInIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WalkInIndicator { get; set; }

        /// <summary>
        /// Indicates user restriction on the reservation based on the Access exclusion functionality such as Restriction on Changes, Cancellation or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResAccessRestrictionType? AccessRestriction { get; set; }

        /// <summary>
        /// If not null, reservation is considered to pay out commission to either Travel Agent, Source or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionPayoutTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommissionPayoutToType? CommissionPayoutTo { get; set; }

        /// <summary>
        /// Payment Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Defines if the reservation is pre-registered or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreRegistered { get; set; }

        /// <summary>
        /// Returns true when reservation has an open folio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OpenFolio { get; set; }

        /// <summary>
        /// Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the â€˜trueâ€™ or â€˜falseâ€™ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileCheckout { get; set; }

        /// <summary>
        /// Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileViewFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileViewFolio { get; set; }

        /// <summary>
        /// Attribute OptedForCommunication is set to true when the guest has opted for receiving communicationsl related to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optedForCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptedForCommunication { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// Details on the Room Stay including Guest Counts, Time Span of this Room Stay, pointers to Res Guests, guest Memberships, Comments and Special Requests pertaining to this particular Room Stay and finally financial information related to the Room Stay, including Guarantee, Deposit and Payment and Cancellation Penalties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StayInfoType
    {
        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ArrivalDate { get; set; }

        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DepartureDate { get; set; }

        /// <summary>
        /// The Original Time Span covers the Room Stay dates of the original reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType OriginalTimeSpan { get; set; }

        /// <summary>
        /// The expected arrival, return and departure times of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResExpectedTimesType ExpectedTimes { get; set; }

        /// <summary>
        /// A collection of Guest Counts associated with Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adultCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdultCount { get; set; }

        /// <summary>
        /// A collection of Child Counts associated with Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChildCount { get; set; }

        /// <summary>
        /// Room class code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomClass { get; set; }

        /// <summary>
        /// Room type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        /// <summary>
        /// True indicates room type is a component type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("componentRoomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ComponentRoomType { get; set; }

        /// <summary>
        /// Room Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfRooms { get; set; }

        /// <summary>
        /// Room Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// Rate plan code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Rate amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType RateAmount { get; set; }

        /// <summary>
        /// The Points contains the number of points used to book a particular room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType Points { get; set; }

        /// <summary>
        /// Whether this rate should be suppressed from view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateSuppressed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateSuppressed { get; set; }

        /// <summary>
        /// Key information about the block for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationBlockType ReservationBlock { get; set; }

        /// <summary>
        /// Booking channel code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingChannelCode { get; set; }

        /// <summary>
        /// Party code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LinkCode { get; set; }

        /// <summary>
        /// True if the rate is a fixed rate, otherwise false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FixedRate { get; set; }

        /// <summary>
        /// The total amount charged for the Room Stay including additional occupant amounts and fees. If TaxInclusive is set to True, then taxes are included in the total amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalAmount { get; set; }

        /// <summary>
        /// The guarantee information associated to the Room Stay. A maximum of 5 occurances are available for use depending on the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        /// <summary>
        /// Promotion Codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PromotionType Promotion { get; set; }

        /// <summary>
        /// Market code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MarketCode { get; set; }

        /// <summary>
        /// Description of Market code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string MarketDescription { get; set; }

        /// <summary>
        /// Source of business
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Description of the source of business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string SourceCodeDescription { get; set; }

        /// <summary>
        /// Balance amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        /// <summary>
        /// Comp Balance amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType CompBalance { get; set; }

        /// <summary>
        /// Room type code that was charged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypeCharged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomTypeCharged { get; set; }

        /// <summary>
        /// A collection of deposit and/or payments for the Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType DepositPayments { get; set; }

        /// <summary>
        /// Service Status of In House guest like DND or MUP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestServiceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuestHousekeepingServiceRequestType? GuestServiceStatus { get; set; }

        /// <summary>
        /// Indicates that this reservation is scheduled for automated check out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledCheckoutTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduledCheckoutTime { get; set; }

        /// <summary>
        /// When true, indicates a room number cannot be changed. When false, indicates a room number may be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomNumberLocked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomNumberLocked { get; set; }

        /// <summary>
        /// True indicates as pseudo room type. This is usually used for a posting master reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pseudoRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PseudoRoom { get; set; }

        /// <summary>
        /// Represents the room was assigned by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AssignedByAI { get; set; }

        /// <summary>
        /// Represents the room was assigned by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpgradedByAI { get; set; }

    }

    /// <summary>
    /// Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TimeSpanType
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }

    }

    /// <summary>
    /// Holds the Arrival and Departure Time Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResExpectedTimesType
    {
        /// <summary>
        /// Arrival Time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationExpectedArrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReservationExpectedArrivalTime { get; set; }

        /// <summary>
        /// Departure Time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationExpectedDepartureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReservationExpectedDepartureTime { get; set; }

    }

    /// <summary>
    /// Key information about the block for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationBlockType
    {
        /// <summary>
        /// Collection of unique block identifiers for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BlockIdList BlockIdList { get; set; }

        /// <summary>
        /// The Name of the block that is attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string BlockName { get; set; }

        /// <summary>
        /// This is the HotelCode of the Block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BlockIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// Validations type record returned after Validations are done.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResGuaranteeType
    {
        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GuaranteeCode { get; set; }

        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onHold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnHold { get; set; }

    }

    /// <summary>
    /// Type to specify a rate promotion. Usually attached to a reservation to indicate a specific promotion is applied to the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PromotionType
    {
        /// <summary>
        /// Promotion code associated with the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Promotion code Name associated with the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionName { get; set; }

        /// <summary>
        /// Promotion Coupon Code when promotion is setup to have a valid coupon code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("couponCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CouponCode { get; set; }

    }

    /// <summary>
    /// Possible values for the Guest Service Status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum GuestHousekeepingServiceRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DoNotDisturb")]
        DoNotDisturb = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MakeUpRoom")]
        MakeUpRoom = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoStatusSelected")]
        NoStatusSelected = 2,

    }

    /// <summary>
    /// Specifies Company or Travel Agent profile using IATA or Corp. No.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResGuestInfoType
    {
        /// <summary>
        /// The Membership object identifying the frequent customer reward program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipInfoType Membership { get; set; }

        /// <summary>
        /// Salutation of honorific. (e.g., Mr. Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// Alternate given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateGivenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AlternateGivenName { get; set; }

        /// <summary>
        /// The middle name of the person name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// e.g "van der", "von", "de"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surnamePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SurnamePrefix { get; set; }

        /// <summary>
        /// Family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        /// <summary>
        /// Alternate family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateSurname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AlternateSurname { get; set; }

        /// <summary>
        /// Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Full display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FullName { get; set; }

        /// <summary>
        /// Altername full display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateFullName { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Email { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Affiliation or ethnicity to a particular country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType Nationality { get; set; }

        /// <summary>
        /// The supplier's ranking of the customer (e.g., VIP, numerical ranking).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VIPType Vip { get; set; }

        /// <summary>
        /// Address information that is attached to the reservation guest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressSearchType Address { get; set; }

        /// <summary>
        /// Provides information about the guest's anonymization status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnonymizationType Anonymization { get; set; }

        /// <summary>
        /// List of guest names that are accompanying the reservation guest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accompanyGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResAccompanyGuestListType AccompanyGuests { get; set; }

        /// <summary>
        /// External information about the guest associated with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuestExternalInfoType ExternalInfo { get; set; }

        /// <summary>
        /// Contains information regarding the last stay of this guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestLastStayInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestLastStayInfoType GuestLastStayInfo { get; set; }

        /// <summary>
        /// Guest profile restricted reason code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestRestrictedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string GuestRestrictedCode { get; set; }

        /// <summary>
        /// Guest profile restricted reason description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestRestrictedReasonDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string GuestRestrictedReasonDesc { get; set; }

        /// <summary>
        /// True indicates there are restrictions associated with the current profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestRestricted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GuestRestricted { get; set; }

        /// <summary>
        /// Unique identifier of the police registration card number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registrationCardNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RegistrationCardNo { get; set; }

        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NameTypeType? NameType { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// The Membership object identifies the frequent customer reward program.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MembershipInfoType
    {
        /// <summary>
        /// Membership ID (Unique ID from the memberships table).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MembershipId { get; set; }

        /// <summary>
        /// The code or name of the membership program ('Hertz', 'AAdvantage', etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("programCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ProgramCode { get; set; }

        /// <summary>
        /// The code or name of the bonus program. BonusCode can be used to indicate the level of membership (Gold Club, Platinum member, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BonusCode { get; set; }

        /// <summary>
        /// The description of the ProgramCode.(Delta Previlige for code DP)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipTypeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipTypeDesc { get; set; }

        /// <summary>
        /// The description of the Bonus Code.(Platinum for code P)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevelDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipLevelDesc { get; set; }

        /// <summary>
        /// The account identification number for this particular member in this particular program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AccountId { get; set; }

        /// <summary>
        /// The code or name of the membership level and indicates the level of membership (Gold Club, Platinum member, etc.). This is same as the BonusCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipLevel { get; set; }

        /// <summary>
        /// Ranking assigned to the Player Profile by the Gaming system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerRanking { get; set; }

    }

    /// <summary>
    /// The supplier's ranking of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VIPType
    {
        /// <summary>
        /// VIP Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipCode { get; set; }

        /// <summary>
        /// VIP Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string VipDescription { get; set; }

    }

    /// <summary>
    /// Address Details such as city, state, country, postal code etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddressSearchType
    {
        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CityName { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType Country { get; set; }

        /// <summary>
        /// First Line of Street Address. For profile search it matches the first Address line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// When true indicates that only profiles with city will be fetched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeNoCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeNoCity { get; set; }

    }

    /// <summary>
    /// Collection of accompany guests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResAccompanyGuestListType : System.Collections.ObjectModel.Collection<ResAccompanyGuestInfoType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResAccompanyGuestInfoType
    {
        /// <summary>
        /// Given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FirstName { get; set; }

        /// <summary>
        /// Family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LastName { get; set; }

        /// <summary>
        /// String representation of the full name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FullName { get; set; }

        /// <summary>
        /// Unique identifier of the police registration card number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registrationCardNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RegistrationCardNo { get; set; }

        /// <summary>
        /// Unique identifiers for the Profile for both internal and external systems. In case of Travel Agent the IATA code and in case of Company can be any form of identifier as id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

    }

    /// <summary>
    /// Specifies Company or Travel Agent profile using IATA or Corp. No.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResGuestExternalInfoType
    {
        /// <summary>
        /// Given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// Family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

    }

    /// <summary>
    /// Contains last stay related details of the guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GuestLastStayInfoType
    {
        /// <summary>
        /// Guest's last stay date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastStayDate { get; set; }

        /// <summary>
        /// Room Number where the guest stayed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LastStayRoom { get; set; }

        /// <summary>
        /// The Rate amount of the guest's last stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType LastStayRate { get; set; }

        /// <summary>
        /// The total number of previous stay of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalStay { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum NameTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
        Employee = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Purge")]
        Purge = 8,

    }

    /// <summary>
    /// Collection of shared guest reservations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResSharedGuestListType : System.Collections.ObjectModel.Collection<ResSharedGuestInfoType>
    {

    }

    /// <summary>
    /// Contains information regarding the share reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResSharedGuestInfoType
    {
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FirstName { get; set; }

        /// <summary>
        /// Family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LastName { get; set; }

        /// <summary>
        /// String representation of the full name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FullName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResAttachedProfileListType : System.Collections.ObjectModel.Collection<ResAttachedProfileType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResAttachedProfileType
    {
        /// <summary>
        /// Attached profile name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Name { get; set; }

        /// <summary>
        /// Collection of unique profile identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResProfileTypeType? ReservationProfileType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ResProfileTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TravelAgent")]
        TravelAgent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationContact")]
        ReservationContact = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingContact")]
        BillingContact = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Addressee")]
        Addressee = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationPaymentMethodType
    {
        [Newtonsoft.Json.JsonProperty("paymentCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResPaymentCardType PaymentCard { get; set; }

        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        [Newtonsoft.Json.JsonProperty("authorizationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationRuleType AuthorizationRule { get; set; }

        /// <summary>
        /// Information on an email for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailFolioInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailFolioInfo EmailFolioInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("folioView", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolioView { get; set; }

    }

    /// <summary>
    /// Information on a credit card for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResPaymentCardType
    {
        /// <summary>
        /// credit card id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type CardId { get; set; }

        [Newtonsoft.Json.JsonProperty("currentAuthorizedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType CurrentAuthorizedAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("approvalAmountNeeded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType ApprovalAmountNeeded { get; set; }

        /// <summary>
        /// Indicates the type of credit card from a defined list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardTypeType? CardType { get; set; }

        /// <summary>
        /// Indicates the user defined credit card type if credit card type from a defined list is not provided
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedCardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string UserDefinedCardType { get; set; }

        [Newtonsoft.Json.JsonProperty("cardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CardNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("cardNumberMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CardNumberMasked { get; set; }

        [Newtonsoft.Json.JsonProperty("cardNumberLast4Digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CardNumberLast4Digits { get; set; }

        /// <summary>
        /// Expiration date of the credit card
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        /// <summary>
        /// Masked Expiration date of the credit card
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDateMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExpirationDateMasked { get; set; }

        [Newtonsoft.Json.JsonProperty("expirationDateExpired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpirationDateExpired { get; set; }

        [Newtonsoft.Json.JsonProperty("cardHolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Attach the credit card to profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachCreditCardToProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AttachCreditCardToProfile { get; set; }

        /// <summary>
        /// This contains information on whether EFT is enabled. A value of 'C' indicates EFT is enabled and 'M' indicates manual authorization is available for this payment card type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardProcessingType? Processing { get; set; }

        [Newtonsoft.Json.JsonProperty("swiped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Swiped { get; set; }

        /// <summary>
        /// Flag to determine if the credit card was swiped/manually entered , This element is only used when PAYMENT SERVICE DIRECTIVE(PSD) Opera Control is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardPresent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CardPresent { get; set; }

        /// <summary>
        /// This contains information on whether credit card is tokenized (token enabled). A value of 'Token' indicates credit card is token enabled and 'CardNumber' indicates non token environment for this payment card type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardOrToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardNumberTypeType? CardOrToken { get; set; }

    }

    /// <summary>
    /// This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CardTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ab")]
        Ab = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Am")]
        Am = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ax")]
        Ax = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cb")]
        Cb = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Dc")]
        Dc = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Ds")]
        Ds = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Dt")]
        Dt = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Ec")]
        Ec = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Er")]
        Er = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Jc")]
        Jc = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Jl")]
        Jl = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Mc")]
        Mc = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Nb")]
        Nb = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"So")]
        So = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"St")]
        St = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Sw")]
        Sw = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Va")]
        Va = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Xy")]
        Xy = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Zz")]
        Zz = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Cp")]
        Cp = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Cu")]
        Cu = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CardProcessingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Eft")]
        Eft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,

    }

    /// <summary>
    /// Simple type for indicating if credit card number is tokenized.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CardNumberTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CardNumber")]
        CardNumber = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Token")]
        Token = 1,

    }

    /// <summary>
    /// Configured rule for computing the amount to authorize.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AuthorizationRuleType
    {
        /// <summary>
        /// The authorization rule code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>
        /// The amount applicable to the authorization rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Amount { get; set; }

        /// <summary>
        /// A percentage value if the authorization rule is percentage based.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

    }

    /// <summary>
    /// Collection of reservation folio windows.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationFolioWindowsType : System.Collections.ObjectModel.Collection<ReservationFolioWindowType>
    {

    }

    /// <summary>
    /// Folio window view which holds the set of folios for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationFolioWindowType
    {
        /// <summary>
        /// The window's configured payee information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayeeInfoType PayeeInfo { get; set; }

        /// <summary>
        /// Running balance of the window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        /// <summary>
        /// Payment Method Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("folioWindowNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolioWindowNo { get; set; }

    }

    /// <summary>
    /// Payee information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PayeeInfoType
    {
        /// <summary>
        /// Opera name id of the payee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type PayeeId { get; set; }

        /// <summary>
        /// Name of the payee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string PayeeName { get; set; }

        /// <summary>
        /// Address of the payee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInfoType PayeeAddress { get; set; }

        /// <summary>
        /// Payee multiple address count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeAddressCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PayeeAddressCount { get; set; }

        /// <summary>
        /// Reference currency of the payee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeReferenceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PayeeReferenceCurrency { get; set; }

        /// <summary>
        /// AR account short info of the payee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeAccountInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ARAccountShortInfoType PayeeAccountInfo { get; set; }

        /// <summary>
        /// The tax number of the payee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeTaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PayeeTaxNumber { get; set; }

    }

    /// <summary>
    /// Accounts Receivabales Account details type charged for batched posting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ARAccountShortInfoType
    {
        /// <summary>
        /// Name of the AR Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string AccountName { get; set; }

        /// <summary>
        /// The unique ID for the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type AccountId { get; set; }

        /// <summary>
        /// The Account Number for the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AccountNo { get; set; }

        /// <summary>
        /// The status of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ARAccountStatusType Status { get; set; }

    }

    /// <summary>
    /// Type for the Account Status. Status can be restricted and a message/description added to the Account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ARAccountStatusType
    {
        /// <summary>
        /// The Restriction Code added on the Account. This is available when the functionality for adding restriction codes is ON.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Restriction { get; set; }

        /// <summary>
        /// User defined status message on the Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Flag to indicate if the Account is restricted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restricted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restricted { get; set; }

    }

    /// <summary>
    /// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum HousekeepingRoomStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Clean")]
        Clean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Dirty")]
        Dirty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Pickup")]
        Pickup = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inspected")]
        Inspected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfOrder")]
        OutOfOrder = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfService")]
        OutOfService = 5,

    }

    /// <summary>
    /// List of Generic Name-Value-Pair Parameters used for super search matches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchMatchesType : System.Collections.ObjectModel.Collection<SearchMatchType>
    {

    }

    /// <summary>
    /// Search match indicating attribute and the matching value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchMatchType
    {
        /// <summary>
        /// Search match attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Attribute { get; set; }

        /// <summary>
        /// Search match value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Point of Sale of reservation. Identifies the entity/channel who made the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SourceOfSaleType
    {
        /// <summary>
        /// Type of entity/channel who made the reservation..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string SourceType { get; set; }

        /// <summary>
        /// The entity/channel who made the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceCode { get; set; }

    }

    /// <summary>
    /// Information regarding why reservation is being /has been waitlisted.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WaitlistResType
    {
        /// <summary>
        /// Waitlist Reason Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ReasonDescription { get; set; }

        /// <summary>
        /// Waitlist priority Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priorityDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PriorityDescription { get; set; }

        /// <summary>
        /// Description why the reservation is being /has been waitlisted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Waitlist Reason Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Waitlist Priority Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priorityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PriorityCode { get; set; }

        /// <summary>
        /// Guest telephone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Telephone { get; set; }

    }

    /// <summary>
    /// Information regarding the Date, Duration and Priority of the reservation on Queue for Check in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationQueueInformationType
    {
        /// <summary>
        /// Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpan TimeSpan { get; set; }

        /// <summary>
        /// Information for the message sent to the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestTextInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueueTextInfoType GuestTextInfo { get; set; }

        /// <summary>
        /// The Queue Priority given to this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        /// <summary>
        /// The average time, in seconds, a reservation was on queue prior to Check-In.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageQueueTimeToCheckIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AverageQueueTimeToCheckIn { get; set; }

        /// <summary>
        /// The average time, in seconds, of the reservations currently in queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageQueueTimeCurrentReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AverageQueueTimeCurrentReservations { get; set; }

        /// <summary>
        /// The Business date on which the reservation was due to arrive and is currently placed on Queue for Check In.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? QueueDate { get; set; }

    }

    /// <summary>
    /// Information regarding the message sent to guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class QueueTextInfoType
    {
        /// <summary>
        /// Time the text was last sent to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sentTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SentTime { get; set; }

        /// <summary>
        /// User name of the user who sent message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sentBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string SentBy { get; set; }

    }

    /// <summary>
    /// Holds housekeeping turndown service information for the room.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResHousekeepingType
    {
        /// <summary>
        /// Turndown instructions for the room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Instructions { get; set; }

        /// <summary>
        /// The facility task applicable for the current day. This will be information only and not used for any updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("facilityTaskInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacilityTaskType FacilityTaskInfo { get; set; }

        /// <summary>
        /// Indicates if a linen change is necessary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linenChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LinenChange { get; set; }

        /// <summary>
        /// Indicates whether guest wants turndown facility or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turndownRequested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TurndownRequested { get; set; }

        /// <summary>
        /// This is the Turndown room service time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ServiceTime { get; set; }

        /// <summary>
        /// Expected Start Time for housekeeping task(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedServiceTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedServiceTime { get; set; }

        /// <summary>
        /// Current room status. Current room status is populated only if room is assigned to the reservation and reservation is due in or in house.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HousekeepingRoomStatusType? RoomStatus { get; set; }

    }

    /// <summary>
    /// Information regarding facility task on a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FacilityTaskType
    {
        /// <summary>
        /// The Task Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("task", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HousekeepingTaskCodeType Task { get; set; }

        /// <summary>
        /// Supplies associated with the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public FacilityCodesType Supplies { get; set; }

        /// <summary>
        /// The Date on which the task is applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

    }

    /// <summary>
    /// Information related to a Task Code. Task Codes are used to generate task sheets in Rooms Management.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HousekeepingTaskCodeType
    {
        /// <summary>
        /// Description of the Task Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Description { get; set; }

        /// <summary>
        /// Instructions for this Task Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Instructions { get; set; }

        /// <summary>
        /// Indicates if this task code is the default departure task for Facility Tasks. This requires
        /// </summary>
        [Newtonsoft.Json.JsonProperty("facilityDepartureTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FacilityDepartureTask { get; set; }

        /// <summary>
        /// Indicates if a linen change is necessary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linenChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LinenChange { get; set; }

        /// <summary>
        /// Property where this task code is configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The Code for the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Ordering sequence for display.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }

    }

    /// <summary>
    /// List of the facility codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FacilityCodesType : System.Collections.ObjectModel.Collection<FacilityCodeType>
    {

    }

    /// <summary>
    /// Facility Housekeeping Code, its description and quantity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FacilityCodeType
    {
        /// <summary>
        /// Facility Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Description { get; set; }

        /// <summary>
        /// Signifies the quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Facility code value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Cashiering Information for the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResCashieringType
    {
        /// <summary>
        /// Revenues and Balances Amount summary for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenuesAndBalances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResRevenueBalanceType RevenuesAndBalances { get; set; }

        /// <summary>
        /// Billing privileges set on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPrivilegesType BillingPrivileges { get; set; }

        /// <summary>
        /// This stores the code for the type of tax calculation especially with tax exemption, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationTaxTypeInfo TaxType { get; set; }

        /// <summary>
        /// This stores the information for Bed Tax Reporting. Mainly used in Maldives.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bedTaxReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BedTaxReportingType BedTaxReporting { get; set; }

        /// <summary>
        /// Additional text fields to display on the folio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folioTexts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public FolioTextsType FolioTexts { get; set; }

        /// <summary>
        /// Information regarding periodic folios set on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("periodicFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResPeriodicFolioType PeriodicFolio { get; set; }

        /// <summary>
        /// Information regarding comp accounting on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compAccounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCompAccountingType CompAccounting { get; set; }

        /// <summary>
        /// Information regarding the selected preconfigured routing instruction on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPreConfiguredRoutingInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResPreConfiguredRoutingInstrType ReservationPreConfiguredRoutingInstruction { get; set; }

        /// <summary>
        /// The guest from whom payment has to be recovered (direct guest).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("financiallyResponsible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FinanciallyResponsible { get; set; }

        /// <summary>
        /// In case of Appartment style billing indicates whether a prorated amount should be used for an Apartment Style Billing rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proratedBilling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProratedBilling { get; set; }

        /// <summary>
        /// Date of the last Room And Tax posting. Used primarily to know the date in case of Advance Billing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastRoomAndTaxPostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastRoomAndTaxPostedDate { get; set; }

        /// <summary>
        /// This attribute is to verify if reverse check-in is allowed for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reverseCheckInAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseCheckInAllowed { get; set; }

        /// <summary>
        /// This attribute is to verify if reverse advance check-in is allowed for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reverseAdvanceCheckInAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseAdvanceCheckInAllowed { get; set; }

        /// <summary>
        /// Specifies whether reservation has a financial transaction associated with it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionsPosted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransactionsPosted { get; set; }

    }

    /// <summary>
    /// Revenue and Balance Amount summary for the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResRevenueBalanceType
    {
        /// <summary>
        /// Total Fixed Charges on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFixedCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalFixedCharge { get; set; }

        /// <summary>
        /// Total payment received for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalPayment { get; set; }

        /// <summary>
        /// Room Revenue generated by the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType RoomRevenue { get; set; }

        /// <summary>
        /// Food and Beverage Revenue generated by the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foodAndBevRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType FoodAndBevRevenue { get; set; }

        /// <summary>
        /// Other Revenue generated by the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType OtherRevenue { get; set; }

        /// <summary>
        /// Total Non Revenue posted on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType NonRevenue { get; set; }

        /// <summary>
        /// Total Revenue generated by the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalRevenue { get; set; }

        /// <summary>
        /// Balance amount on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        /// <summary>
        /// Comp Balance amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType CompBalance { get; set; }

    }

    /// <summary>
    /// This stores the information for Bed Tax Reporting. Mainly used in Maldives.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BillingPrivilegesType
    {
        /// <summary>
        /// Flag used by interface program during check in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postingRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostingRestriction { get; set; }

        /// <summary>
        /// Indicates if the reservation has charging privileges before arrival.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preStayCharging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreStayCharging { get; set; }

        /// <summary>
        /// Indicates if the reservation has charging privileges after checkout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postStayCharging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostStayCharging { get; set; }

        /// <summary>
        /// Date when folio was closed. This works with PostStayCharging flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folioCloseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? FolioCloseDate { get; set; }

        /// <summary>
        /// Indicates if the guest is scheduled for automatic check out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ScheduledCheckout { get; set; }

        /// <summary>
        /// Time of automatic check out if guest is schedule for automatic check out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledCheckoutTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduledCheckoutTime { get; set; }

        /// <summary>
        /// If Direct bill is authorized this will hold User ID who authorized it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("directBillAuthorized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DirectBillAuthorized { get; set; }

        /// <summary>
        /// Indicates if the guest can do video checkout
        /// </summary>
        [Newtonsoft.Json.JsonProperty("videoCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VideoCheckout { get; set; }

        /// <summary>
        /// Indicated if a new reservation should be created and automatically checked in whenever the room is checked out. Available for pseudo room types only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowAutoCheckin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowAutoCheckin { get; set; }

        /// <summary>
        /// Indicates if the is a candidate for auto folio settlement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSettlement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoSettlement { get; set; }

        /// <summary>
        /// The folio settlement type for auto folio settlement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSettlementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AutoSettlementType { get; set; }

        /// <summary>
        /// The interval of days between each auto folio settlement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSettlementFreq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AutoSettlementFreq { get; set; }

        /// <summary>
        /// Indicates if the reservation will be included in the Automatic Credit Limit Overages process and also be listed in the Credit Limit Overages screen results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditLimitAutoPay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreditLimitAutoPay { get; set; }

    }

    /// <summary>
    /// Provides information about the Tax Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationTaxTypeInfo
    {
        /// <summary>
        /// Code of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Code of the Tax Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Description of the Tax Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// A boolean flag for Collecting Agent Tax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectingAgentTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CollectingAgentTax { get; set; }

        /// <summary>
        /// Print auto adjust information for this tax type on the tax exempt report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printAutoAdjust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintAutoAdjust { get; set; }

        /// <summary>
        /// Number of days after which the guest will be tax exempt. Only used for tax exempt report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportExemptDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReportExemptDays { get; set; }

        /// <summary>
        /// Tax percentage. Only used for tax exempt report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportTaxPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? ReportTaxPercentage { get; set; }

        /// <summary>
        /// Minimun Length of Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumLengthOfStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLengthOfStay { get; set; }

        /// <summary>
        /// Tax exempt number on the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxExemptNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TaxExemptNo { get; set; }

    }

    /// <summary>
    /// This stores the information for Bed Tax Reporting. Mainly used in Maldives.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BedTaxReportingType
    {
        /// <summary>
        /// Tax Registration Number for Maldives Bed Tax Reporting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxRegistrationNo { get; set; }

        /// <summary>
        /// Visa number used for Maldives Bed Tax Reporting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VisaNumber { get; set; }

        /// <summary>
        /// Visa Issue Date used for Maldives Bed Tax Reporting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? VisaIssueDate { get; set; }

        /// <summary>
        /// Visa Expiration Date used for Maldives Bed Tax Reporting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? VisaExpiryDate { get; set; }

        /// <summary>
        /// Number of days for which the Maldives tax is applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxableDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxableDays { get; set; }

    }

    /// <summary>
    /// This stores the description for the type of tax calculation especially with tax exemption, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FolioTextsType : System.Collections.ObjectModel.Collection<Anonymous2>
    {

    }

    /// <summary>
    /// Information regarding periodic folios set on the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResPeriodicFolioType
    {
        /// <summary>
        /// Latest date when a direct bill settlement was automatically done using the "Direct Bill Batch Folios" option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastSettlementDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastSettlementDate { get; set; }

        /// <summary>
        /// Latest date when a folio was printed using the "Periodic Batch Folios" option
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastFolioDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastFolioDate { get; set; }

        /// <summary>
        /// Frequency in number of days when folios should be printed for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Frequency { get; set; }

    }

    /// <summary>
    /// Information regarding comp accounting on the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResCompAccountingType
    {
        /// <summary>
        /// Code used to identify the casino comp type and ranking of a guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CompType { get; set; }

        /// <summary>
        /// ID of the employee who will act as the host for this guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Authorizer { get; set; }

        /// <summary>
        /// Indicates if the Comp Billing/posting Exist
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compPostings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CompPostings { get; set; }

    }

    /// <summary>
    /// Instruction to attach Pre-Configured Routing Instructions to a Reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResPreConfiguredRoutingInstrType
    {
        /// <summary>
        /// Rate Code with attached Routing Instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Profile Type with attached Routing Instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResProfileTypeType? ProfileType { get; set; }

        /// <summary>
        /// Promotion Code with attached Complimentary Routing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

    }

    /// <summary>
    /// Provides information about the Tax Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TaxTypeType
    {
        /// <summary>
        /// Code of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Code of the Tax Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Description of the Tax Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// A boolean flag for Collecting Agent Tax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectingAgentTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CollectingAgentTax { get; set; }

        /// <summary>
        /// Print auto adjust information for this tax type on the tax exempt report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printAutoAdjust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintAutoAdjust { get; set; }

        /// <summary>
        /// Number of days after which the guest will be tax exempt. Only used for tax exempt report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportExemptDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReportExemptDays { get; set; }

        /// <summary>
        /// Tax percentage. Only used for tax exempt report.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportTaxPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? ReportTaxPercentage { get; set; }

        /// <summary>
        /// Minimun Length of Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumLengthOfStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLengthOfStay { get; set; }

    }

    /// <summary>
    /// Reservation Deposit Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationDepositType
    {
        /// <summary>
        /// Deposit Amount Required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountRequired { get; set; }

        /// <summary>
        /// Deposit Amount Paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountPaid { get; set; }

        /// <summary>
        /// Deposit Amount Owed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountOwed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountOwed { get; set; }

        /// <summary>
        /// Deposit Due Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// Deposit Posting Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PostingDate { get; set; }

        /// <summary>
        /// Resolves whether reservation has paid deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPaid { get; set; }

        /// <summary>
        /// Resolves whether reservation has outstanding deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasOutstanding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasOutstanding { get; set; }

    }

    /// <summary>
    /// Allowed action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationAllowedActionsType : System.Collections.ObjectModel.Collection<ReservationAllowedActionType>
    {

    }

    /// <summary>
    /// Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ReservationAllowedActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Move")]
        Move = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PreCharge")]
        PreCharge = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PostCharge")]
        PostCharge = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FacilitySchedule")]
        FacilitySchedule = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Upsell")]
        Upsell = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PreCheckIn")]
        PreCheckIn = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToNoShowCancel")]
        PostToNoShowCancel = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NameChange")]
        NameChange = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollToPrimaryMembership")]
        EnrollToPrimaryMembership = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollInProgress")]
        EnrollInProgress = 12,

    }

    /// <summary>
    /// Hotel Interface Type for a reservation and status of the various services
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationInterfaceStatusType
    {
        /// <summary>
        /// Identifier for the room extension
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomExtension { get; set; }

        /// <summary>
        /// Hotel interface information for the reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelInterface", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelInterfaceType HotelInterface { get; set; }

        /// <summary>
        /// Contains a list of status/rights for the various services under this interface
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<InterfaceRightsStatusType> InterfaceRights { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelInterfaceType
    {
        /// <summary>
        /// Unique DB internal number of a Hotel Interface record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type InterfaceId { get; set; }

        /// <summary>
        /// Hotel Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Name of the Hotel Interface
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InterfaceName { get; set; }

        /// <summary>
        /// Three letter code for each interface that identifies the interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HotelInterfaceTypeType? InterfaceType { get; set; }

        /// <summary>
        /// Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Logo { get; set; }

        /// <summary>
        /// Unique machine name of the running IFC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("machineName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string MachineName { get; set; }

        /// <summary>
        /// The current status of the IFC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HotelInterfaceStatusType? Status { get; set; }

        /// <summary>
        /// Indicator if the Hotel Interface is active or not. This is different from the Interface Status, which is either STOPPED or RUNNING.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activeFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ActiveFlag { get; set; }

    }

    /// <summary>
    /// XML Posting Interface
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum HotelInterfaceTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Bms")]
        Bms = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cas")]
        Cas = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ccw")]
        Ccw = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Dls")]
        Dls = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Eft")]
        Eft = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Exp")]
        Exp = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Mak")]
        Mak = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Mbs")]
        Mbs = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Msc")]
        Msc = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Pbx")]
        Pbx = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Pos")]
        Pos = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Svs")]
        Svs = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Tik")]
        Tik = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Vid")]
        Vid = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Vms")]
        Vms = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Www")]
        Www = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Xml")]
        Xml = 16,

    }

    /// <summary>
    /// Status of the Hotel Interface either STOPPED or RUNNING.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum HotelInterfaceStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Stopped")]
        Stopped = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Running")]
        Running = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
        Waiting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"StopInitiated")]
        StopInitiated = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"StartInitiated")]
        StartInitiated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RebootInitiated")]
        RebootInitiated = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InterfaceRightsStatusType
    {
        /// <summary>
        /// Internal code for each allowed right of a Hotel Interface record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("right", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Right { get; set; }

        /// <summary>
        /// User defined code for an Interface Right.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string StatusCode { get; set; }

        /// <summary>
        /// User defined description for an Interface Right.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Description { get; set; }

        /// <summary>
        /// Category code of this interface right.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string Category { get; set; }

    }

    /// <summary>
    /// Turndown information for a reservation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationTurndownInfoType
    {
        /// <summary>
        /// Indicates if turndown is allowed or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allowed { get; set; }

        /// <summary>
        /// Indicates turndown status, values could be required, not required, completed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TurndownStatusType? Status { get; set; }

    }

    /// <summary>
    /// Simple type for turndown status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Required, Not Required and Completed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TurndownStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Required")]
        Required = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotRequired")]
        NotRequired = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Compeleted")]
        Compeleted = 2,

    }

    /// <summary>
    /// Contains the status of Room Ready and Key Ready messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResMobileNotificationsType
    {
        /// <summary>
        /// Denotes the status of Room Ready message. It can have one of the values:PENDING, COMPLETED or FAILED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomReady", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommunicationStatusType? RoomReady { get; set; }

        /// <summary>
        /// Denotes the status of Key Ready message. It can have one of the values:PENDING, COMPLETED or FAILED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyReady", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommunicationStatusType? KeyReady { get; set; }

        /// <summary>
        /// Indicates if the Mobile checkout message is received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("checkoutMessageReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckoutMessageReceived { get; set; }

        /// <summary>
        /// Indicates if user action is required. The action could be for sending Room Ready or Key Ready Notification. It could also be for initiating Checkout
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiresAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequiresAction { get; set; }

        /// <summary>
        /// Error message when Mobile Notification has failed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ErrorMessage { get; set; }

    }

    /// <summary>
    /// Enum to denote the Status of Readiness messages sent to Guest Devices.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CommunicationStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingAvailability")]
        PendingAvailability = 6,

    }

    /// <summary>
    /// Communication details for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResCommunicationType
    {
        /// <summary>
        /// List of Telephone Number Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Telephones2 Telephones { get; set; }

        /// <summary>
        /// List of email address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Emails2 Emails { get; set; }

    }

    /// <summary>
    /// Information relating to Reservation's Advance Checked In state and Expected Time of Return
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AdvanceCheckInType
    {
        /// <summary>
        /// Indicates if the reservation is marked as Advance Checked In
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advanceCheckedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdvanceCheckedIn { get; set; }

        /// <summary>
        /// Expected Return Time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedReturnTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedReturnTime { get; set; }

        /// <summary>
        /// ETR Comments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eTRComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ETRComments { get; set; }

    }

    /// <summary>
    /// This reservation is in checked in status and the business date is past departure date. This could occur when ORS and PMS are in same environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PMS_ResStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Waitlisted")]
        Waitlisted = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DueIn")]
        DueIn = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DueOut")]
        DueOut = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Walkin")]
        Walkin = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingCheckout")]
        PendingCheckout = 10,

    }

    /// <summary>
    /// Indicates any Updates/Changes on the reservation as well as Reservation Cancellation are not allowed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ResAccessRestrictionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Change")]
        Change = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeOrCancel")]
        ChangeOrCancel = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CommissionPayoutToType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TravelAgent")]
        TravelAgent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TravelAgentSource")]
        TravelAgentSource = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 3,

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FutureListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : Future reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Information of History and Future Reservation details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationStayHistoryFutureInfoType
    {
        /// <summary>
        /// Refer to History list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayHistoryListType HistoryList { get; set; }

        /// <summary>
        /// Refer to Future list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("futureList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayFutureListType FutureList { get; set; }

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StayHistoryListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : History reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StayReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// The Reservation class contains the current reservation being created or altered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StayReservationInfoType
    {
        /// <summary>
        /// Unique identifiers for the reservation for both internal and external systems
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// Collection of room stays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayInfoType RoomStay { get; set; }

        /// <summary>
        /// List of attached profiles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachedProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResAttachedProfileListType AttachedProfiles { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StayFutureListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : Future reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StayReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Contains last stay related details for the profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LastStayInfoType
    {
        /// <summary>
        /// Used to hold last stay information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastVisit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastVisit { get; set; }

        /// <summary>
        /// Used to hold last room information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LastRoom { get; set; }

        /// <summary>
        /// Used to hold last rate information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType LastRate { get; set; }

        /// <summary>
        /// The total number of previous stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalStay { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileAccessType
    {
        /// <summary>
        /// Indicates the Chain code where the profile was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string ChainCode { get; set; }

        /// <summary>
        /// Indicates the CRO code where the profile was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("croCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CroCode { get; set; }

        /// <summary>
        /// Indicates the Hotel code where the profile was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string HotelId { get; set; }

        /// <summary>
        /// Indicates whether the profile is shared at the following levels : global/property/CRO
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileSharedLevelType? SharedLevel { get; set; }

    }

    /// <summary>
    /// Simple types for Shared level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProfileSharedLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cro")]
        Cro = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileRestrictions
    {
        /// <summary>
        /// Restriction reason associated with the current profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Reason { get; set; }

        /// <summary>
        /// Description of restriction reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ReasonDescription { get; set; }

        /// <summary>
        /// True indicates there are restrictions associated with the current profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restricted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restricted { get; set; }

    }

    /// <summary>
    /// Defines mailing action list for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MailingActionsType
    {
        /// <summary>
        /// Defines mailing action code and description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mailingAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CodeDescriptionType> MailingAction { get; set; }

        /// <summary>
        /// When true indicates that profile has subscribed to the mailing list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Defines Privacy related information for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PrivacyInfoType
    {
        /// <summary>
        /// Indicates if the profile participates in market research.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketResearchParticipation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarketResearchParticipation { get; set; }

        /// <summary>
        /// Indicate the last privacy prompt date of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastPrivacyPromptDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPrivacyPromptDate { get; set; }

        /// <summary>
        /// Indicates if the profile is ok getting info from third parties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("infoFromThirdParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InfoFromThirdParty { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to be automatically enrolled in the property's loyalty program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoEnrollLoyaltyProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoEnrollLoyaltyProgram { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to allow phone calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowPhone { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to allow SMS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowSMS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowSMS { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to allow Email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowEmail { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Mailing List.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInMailingList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInMailingList { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Market Research.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInMarketResearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInMarketResearch { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Third Party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInThirdParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInThirdParty { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Auto Enrolment Member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInAutoEnrollmentMember", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInAutoEnrollmentMember { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInPhone { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for SMS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInSms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInSms { get; set; }

        /// <summary>
        /// Indicates if the profile wishes to opt in for Email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optInEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptInEmail { get; set; }

    }

    /// <summary>
    /// Contains cashiering related details for the profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileCashieringType
    {
        /// <summary>
        /// Contains the direct billing related information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("directBillingList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<DirectBillingType> DirectBillingList { get; set; }

        /// <summary>
        /// Contains the auto folio settlement type for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoFolioSettlementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AutoFolioSettlementType { get; set; }

        /// <summary>
        /// Ability to define on the account, the number of days after which the invoice should be paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentDueDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PaymentDueDays { get; set; }

        /// <summary>
        /// Tax1 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent1 { get; set; }

        /// <summary>
        /// Tax2 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent2 { get; set; }

        /// <summary>
        /// Tax3 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent3 { get; set; }

        /// <summary>
        /// Tax4 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent4 { get; set; }

        /// <summary>
        /// Tax5 Percentage for Collecting Agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxPercent5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaxPercent5 { get; set; }

        /// <summary>
        /// Account Receivables Central Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arNoCentral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ArNoCentral { get; set; }

        /// <summary>
        /// Reference Currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceCurrency { get; set; }

        /// <summary>
        /// VAT Offset Flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vATOffsetYN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string VATOffsetYN { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

    }

    /// <summary>
    /// This is the preconfigured routing instruction type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DirectBillingType
    {
        /// <summary>
        /// Hotel Code for which the details of direct billing is provided for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Hotel Code for which the details of direct billing is provided for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aRNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ARNumber { get; set; }

    }

    /// <summary>
    /// This is the preconfigured routing instruction type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileCommissionType
    {
        /// <summary>
        /// Hotel Code for the commission being used for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// commission Code for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// Bank account used for the commission for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BankAccount { get; set; }

        /// <summary>
        /// Type of payment associated with the bank account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommissionPaymentMethods? PaymentMethod { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

    }

    /// <summary>
    /// Check
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CommissionPaymentMethods
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cent")]
        Cent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Eft")]
        Eft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Chk")]
        Chk = 2,

    }

    /// <summary>
    /// A common type used to hold user defined fields(UDFs). This type should be used to handle UDFs on RReservation, Profiles, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserDefinedFieldsType
    {
        /// <summary>
        /// Collection of user defined fields of Character/String Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("characterUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CharacterUDFsType CharacterUDFs { get; set; }

        /// <summary>
        /// Collection of user defined fields of Numeric Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numericUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public NumericUDFsType NumericUDFs { get; set; }

        /// <summary>
        /// Collection of user defined fields of Date Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DateUDFsType DateUDFs { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Character/String Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CharacterUDFsType : System.Collections.ObjectModel.Collection<CharacterUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Character/String Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CharacterUDFType
    {
        /// <summary>
        /// Used to hold user defined field of Character Type. It is highly recommended to use UDFC01, UDFC02,...UDFC40 (Total 40) as Character/String UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Numeric Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NumericUDFsType : System.Collections.ObjectModel.Collection<NumericUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Numeric Type. It is highly recommended to use UDFN01, UDFN02,...UDFN40 (Total 40) as Numeric UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NumericUDFType
    {
        /// <summary>
        /// Name of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Date Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DateUDFsType : System.Collections.ObjectModel.Collection<DateUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Date Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DateUDFType
    {
        /// <summary>
        /// Used to hold user defined field of Date Type. It is highly recommended to use UDFD01, UDFD02,...UDFN20 (Total 20) as Date UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// Web User Accounts List.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebUserAccountsType : System.Collections.ObjectModel.Collection<WebUserAccountType>
    {

    }

    /// <summary>
    /// Web User Account of the guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebUserAccountType
    {
        /// <summary>
        /// Security Question and its Code associated with the account to verify the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityQuestion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType SecurityQuestion { get; set; }

        /// <summary>
        /// Answer to the Security Question.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityAnswer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string SecurityAnswer { get; set; }

        /// <summary>
        /// Comments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Comments { get; set; }

        /// <summary>
        /// Web User Account History.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WebUserHistoryType History { get; set; }

        /// <summary>
        /// New Login Name of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newLoginName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NewLoginName { get; set; }

        /// <summary>
        /// Login Password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NewPassword { get; set; }

        /// <summary>
        /// A flag which determines if the password is auto generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoGeneratePassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoGeneratePassword { get; set; }

        /// <summary>
        /// Login Name of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loginName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string LoginName { get; set; }

        /// <summary>
        /// Domain code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DomainCode { get; set; }

        /// <summary>
        /// Boolean flag that indicates whether the web account is locked or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Locked { get; set; }

        /// <summary>
        /// Boolean flag that indicates whether the web account is inactive or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

    }

    /// <summary>
    /// Creation date time, Creator Id, last modification date time and last Modifier Id.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebUserHistoryType
    {
        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// Last login date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastLogin { get; set; }

        /// <summary>
        /// Last Password change date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastPasswordChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPasswordChange { get; set; }

        /// <summary>
        /// Inactive date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InactiveDate { get; set; }

    }

    /// <summary>
    /// Profile information related to tax.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileTaxInfoType
    {
        /// <summary>
        /// The tax id of this profile. Usually issued by a government agency. Used by 1099 printing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax1No", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Tax1No { get; set; }

        /// <summary>
        /// Tax 2 id of this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax2No", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Tax2No { get; set; }

        /// <summary>
        /// Tax Category to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TaxCategory { get; set; }

        /// <summary>
        /// Tax Office to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxOffice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TaxOffice { get; set; }

        /// <summary>
        /// Tax type to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TaxType { get; set; }

        /// <summary>
        /// Business ID. The maximum length of this element should not exceed 120 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string BusinessId { get; set; }

        /// <summary>
        /// Business Registration Code. The maximum length of this element should not exceed 120 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string BusinessRegistration { get; set; }

    }

    /// <summary>
    /// Provides sales information about the profiles of type company, travel agent, source and contact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesInfoType
    {
        /// <summary>
        /// Defines the scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Scope { get; set; }

        /// <summary>
        /// Defines the scope city.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scopeCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ScopeCity { get; set; }

        /// <summary>
        /// Defines the account type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AccountType { get; set; }

        /// <summary>
        /// Defines the account source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AccountSource { get; set; }

        /// <summary>
        /// Defines the industry code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("industryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string IndustryCode { get; set; }

        /// <summary>
        /// Defines the Business segments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessSegments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BusinessSegments { get; set; }

        /// <summary>
        /// Defines the priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Priority { get; set; }

        /// <summary>
        /// Defines the rooms potential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomsPotential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string RoomsPotential { get; set; }

        /// <summary>
        /// Defines the action code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string ActionCode { get; set; }

        /// <summary>
        /// Defines the competition code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("competitionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CompetitionCode { get; set; }

        /// <summary>
        /// Defines the influence for the contact profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("influence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Influence { get; set; }

        /// <summary>
        /// Defines the Preferred Room for profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferredRoom { get; set; }

        /// <summary>
        /// Hotel Code used to filter the sales information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// List of e-certificates for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificatesType : System.Collections.ObjectModel.Collection<ECertificateType>
    {

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateType
    {
        /// <summary>
        /// System generated unique certificate id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CertificateId { get; set; }

        /// <summary>
        /// System generated unique voucher number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voucherNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VoucherNo { get; set; }

        /// <summary>
        /// Printed certificate no. This has to be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CertificateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("eCertificateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateInfoType ECertificateInfo { get; set; }

        /// <summary>
        /// Date of expiry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }

        /// <summary>
        /// New Date of expiry to extend e-certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? NewExpiryDate { get; set; }

        /// <summary>
        /// NameId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        [Newtonsoft.Json.JsonProperty("consumptionDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateConsumptionType ConsumptionDetail { get; set; }

        /// <summary>
        /// Status of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateStatusType? Status { get; set; }

        /// <summary>
        /// Print status of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Printed { get; set; }

        /// <summary>
        /// Date the record was marked as inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? InactiveDate { get; set; }

        /// <summary>
        /// AwardID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AwardId AwardId { get; set; }

        /// <summary>
        /// External reference from which the record is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("databaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DatabaseId { get; set; }

        /// <summary>
        /// Source of e-certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateIssueSourceType? Source { get; set; }

        /// <summary>
        /// Process action issued the certificate. valid values are assigned (a),opt in (o) and purchased (p).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateIssueType? IssueType { get; set; }

        /// <summary>
        /// Date when certificate was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }

        /// <summary>
        /// Award points if any in case of certificate use membership award.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwardPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("generationDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateGenerationType GenerationDetail { get; set; }

        /// <summary>
        /// In case of in lieu of certificate this will contain the original voucher no.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalVoucherNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OriginalVoucherNo { get; set; }

        /// <summary>
        /// In case of in lieu of certificate this will contain the original certificate no.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalCertificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OriginalCertificateNo { get; set; }

        /// <summary>
        /// Seq of the in lieu of certificate. 1..n. original certificate will be treated as null = 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inLieuSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InLieuSequence { get; set; }

        /// <summary>
        /// Date on which the cancellation was requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelRequestDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CancelRequestDate { get; set; }

        /// <summary>
        /// Number of times e-certificate is already extended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extensionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExtensionCount { get; set; }

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateInfoType
    {
        /// <summary>
        /// User defined certificate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CertificateType { get; set; }

        /// <summary>
        /// Membership type to which the certificate is linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipType { get; set; }

        /// <summary>
        /// Award type to which the certificate is linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AwardCode { get; set; }

        /// <summary>
        /// Promotion code to which certificate is attached to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Voucher benefit code attached to the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voucherBenefitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VoucherBenefitCode { get; set; }

        /// <summary>
        /// Hotel to which certificate is attached to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hotels Hotels { get; set; }

        /// <summary>
        /// Description about the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Detail description about the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Label for the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Label { get; set; }

        /// <summary>
        /// Number of times e-certificate can be extended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxExtensionAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxExtensionAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("usageCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateUsageCriteriaType UsageCriteria { get; set; }

        /// <summary>
        /// Value of the certificate for the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Value { get; set; }

        /// <summary>
        /// Cost of certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Cost { get; set; }

        /// <summary>
        /// Summary of Benefits attached to this ECertificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefitSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string BenefitSummary { get; set; }

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is available for a specific list of hotels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MultiHotel")]
        MultiHotel = 2,

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateUsageCriteriaType
    {
        /// <summary>
        /// Indicates if certificate is to be used against reservation or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reservation { get; set; }

        /// <summary>
        /// Indicates if web certificate can be consumed in OWS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("web", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Web { get; set; }

        /// <summary>
        /// Indicates if certificate consumption allowable on the web.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WebAllowed { get; set; }

        /// <summary>
        /// Indicates to attach a rate code to the e-certificate as a benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Benefit { get; set; }

        /// <summary>
        /// Indicates if web certificate can be consumed in hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hotel { get; set; }

        /// <summary>
        /// Specify if the certificate number verification is required at time of consumption or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verifyCertificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VerifyCertificateNo { get; set; }

        /// <summary>
        /// Identify if cancel is allowed or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CancelAllowed { get; set; }

        /// <summary>
        /// Identify if in lieu of certificate can be generated or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generateInLieuCertificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GenerateInLieuCertificate { get; set; }

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateConsumptionType
    {
        /// <summary>
        /// Property where certificate was consumed for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Source of consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateConsumeSourceType? Source { get; set; }

        /// <summary>
        /// Last name of the person who consumed the certificate..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        /// <summary>
        /// First name of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string FirstName { get; set; }

        /// <summary>
        /// Middle name of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Email of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Email { get; set; }

        /// <summary>
        /// Date the certificate was consumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Application user who created the consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string UserName { get; set; }

        /// <summary>
        /// Any notes on the certificate entered at time of consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string UserNotes { get; set; }

        /// <summary>
        /// Any reference like reservation no etc against which the certificate was consumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ReferenceId { get; set; }

        /// <summary>
        /// Consumption location type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LocationType { get; set; }

        /// <summary>
        /// Authorization code for consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Date on which the service is due (arrival date in case of reservation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ServiceDate { get; set; }

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is consumed by hotelPMS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateConsumeSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Central")]
        Central = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 2,

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is reserved.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumed")]
        Consumed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Expired")]
        Expired = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Issued")]
        Issued = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 5,

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AwardId
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is issued by external system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateIssueSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Opera")]
        Opera = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Interface")]
        Interface = 2,

    }

    /// <summary>
    /// Indicates that guest purchased OPERA E-Certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ECertificateIssueType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Assigned")]
        Assigned = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OptedIn")]
        OptedIn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Purchased")]
        Purchased = 2,

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ECertificateGenerationType
    {
        /// <summary>
        /// Key to identify the generation rule id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type RuleId { get; set; }

        /// <summary>
        /// Reason for which e-certificate was generated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generationDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string GenerationDetail { get; set; }

        /// <summary>
        /// Type of value that is in the certificate.valid values are membership_level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceValue { get; set; }

    }

    /// <summary>
    /// Details of the OPERA Profile subscription to external system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileSubscriptionListType : System.Collections.ObjectModel.Collection<ProfileSubscriptionType>
    {

    }

    /// <summary>
    /// Contains details of the profile subscription. The subscription represents the link between the OPERA profile and the external profile within a particular external system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileSubscriptionType
    {
        /// <summary>
        /// OPERA Profile ID that this subscription record corresponds to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Profile ID within the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ExternalProfileId { get; set; }

        /// <summary>
        /// This provides name information for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileInfo ProfileInfo { get; set; }

        /// <summary>
        /// Indicates if the profile was distributed to the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Distributed { get; set; }

        /// <summary>
        /// Indicates if the profile information should be overwritten by the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("force", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Force { get; set; }

        /// <summary>
        /// Timestamp when the profile was subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubscriptionDate { get; set; }

        /// <summary>
        /// Timestamp of the most recent distribution of this profile to the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastDistributionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastDistributionDate { get; set; }

        /// <summary>
        /// Timestamp of the most recent update of the subscription information by the external system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastExternalUpdateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastExternalUpdateDate { get; set; }

        /// <summary>
        /// Indicates whether this subscription is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

    }

    /// <summary>
    /// A collection of GuestCount by age group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GuestCountsType
    {
        /// <summary>
        /// Defines Children's Ages. Number of children ages mentioned may mot match with children counts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childAges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ChildAgesType ChildAges { get; set; }

        /// <summary>
        /// Defines children counts with Age Qualifying Group(Child Bucket#1) classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childBuckets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChildBucketsType ChildBuckets { get; set; }

        /// <summary>
        /// Defines the number of Adults.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Adults { get; set; }

        /// <summary>
        /// Defines the number of Children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Children { get; set; }

    }

    /// <summary>
    /// Age of a child in years.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChildAgesType : System.Collections.ObjectModel.Collection<ChildAgeType>
    {

    }

    /// <summary>
    /// Defines Child's Age.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChildAgeType
    {
        /// <summary>
        /// Age of a child in years.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Age { get; set; }

    }

    /// <summary>
    /// Defines children counts with Age Qualifying Group(Child Bucket) classification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChildBucketsType
    {
        /// <summary>
        /// Number of children classified under the first Age Qualifying Group(Child Bucket#1).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket1Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket1Count { get; set; }

        /// <summary>
        /// Number of children classified under the second Age Qualifying Group(Child Bucket#2).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket2Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket2Count { get; set; }

        /// <summary>
        /// Number of children classified under the third Age Qualifying Group(Child Bucket#3).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket3Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket3Count { get; set; }

        /// <summary>
        /// Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket4Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket4Count { get; set; }

        /// <summary>
        /// Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket5Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket5Count { get; set; }

    }

    /// <summary>
    /// Membership Awards code applied on the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResAwardsType
    {
        /// <summary>
        /// Membership program under which the award is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type MembershipNo { get; set; }

        [Newtonsoft.Json.JsonProperty("awardVouchers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public AwardVouchersType AwardVouchers { get; set; }

        /// <summary>
        /// Room Type before the Upgrade Award.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalRoomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OriginalRoomType { get; set; }

        /// <summary>
        /// Room Type after the Upgrade Award.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeRoomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string UpgradeRoomType { get; set; }

    }

    /// <summary>
    /// This stores the Membership Awards code applied on the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AwardVouchersType : System.Collections.ObjectModel.Collection<Anonymous3>
    {

    }

    /// <summary>
    /// Foreign Exchange info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ForeignExchangeType
    {
        /// <summary>
        /// Exchange Type for the postings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Effective Exchange date for the foreign currency posting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }

    }

    /// <summary>
    /// Meal plan codes associated with the rate codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MealPlansType : System.Collections.ObjectModel.Collection<MealPlanCodeType>
    {

    }

    /// <summary>
    /// Meal plan codes associated with the rate codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MealPlanCodeType
    {
        /// <summary>
        /// Meal plan code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Code { get; set; }

        /// <summary>
        /// Represents if the meal plan code is included in rate code or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Included { get; set; }

        /// <summary>
        /// Represents if the meal plan code is available for breakfast or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("breakfastIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BreakfastIncluded { get; set; }

        /// <summary>
        /// Represents if the meal plan code is available for lunch or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lunchIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LunchIncluded { get; set; }

        /// <summary>
        /// Represents if the meal plan code is available for dinner or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dinnerIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DinnerIncluded { get; set; }

    }

    /// <summary>
    /// Indicates the Room Rate is not available due to unavailability of enough items for the rate code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum RoomRateAvailReasonType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Restricted")]
        Restricted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RestrictedDueToInventory")]
        RestrictedDueToInventory = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RestrictedDueToOccupancy")]
        RestrictedDueToOccupancy = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RestrictedDueToItemInventory")]
        RestrictedDueToItemInventory = 4,

    }

    /// <summary>
    /// Information regarding upsell for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpsellInfoType
    {
        /// <summary>
        /// Original Values of the reservation prior to upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OriginalInfo OriginalInfo { get; set; }

        /// <summary>
        /// Information of a reservation during the process of upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpsellInfo UpsellInfo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OwnerResTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizedUser")]
        AuthorizedUser = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PrimaryShareTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NonPrimary")]
        NonPrimary = 1,

    }

    /// <summary>
    /// Availability master info type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailResponseMasterInfoType
    {
        /// <summary>
        /// Collection of room type information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoomTypeMasterInfoType RoomTypes { get; set; }

        /// <summary>
        /// Collection of rate plan information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlans", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvailRatePlanInfoType RatePlans { get; set; }

    }

    /// <summary>
    /// The RoomType element is used to contain all the room type information for a single room type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomTypeMasterInfoType
    {
        /// <summary>
        /// Room type information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoomTypeInfoType> RoomType { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomTypeInfoType
    {
        /// <summary>
        /// Detail description of the Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Name corresponding to a RoomType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string WebName { get; set; }

        /// <summary>
        /// URL providing more information about the Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string WebPage { get; set; }

        /// <summary>
        /// Collection of room features.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public RoomFeaturesType RoomFeatures { get; set; }

        /// <summary>
        /// Room type attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypeAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoomTypeAttributesType RoomTypeAttributes { get; set; }

        /// <summary>
        /// Booking Channels mapping for the Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelMappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<BookingChannelMappingType> BookingChannelMappings { get; set; }

        /// <summary>
        /// Bed type code associated with room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bedTypeCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> BedTypeCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("roomClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomClass { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates room type is a suite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Suite { get; set; }

        /// <summary>
        /// Indicates room type is a Component Room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Component { get; set; }

        /// <summary>
        /// Block code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invBlockCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InvBlockCode { get; set; }

        /// <summary>
        /// Represents the room view code like City view, River view, Ocean view etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomViewCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RoomViewCode { get; set; }

        /// <summary>
        /// Represents the promotional code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Represents the room qualifier code like Deluxe,Economy,Suite etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomQualifierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RoomQualifierCode { get; set; }

        /// <summary>
        /// Represents the match indicator of room qualifier code returned in the response with the requested room qualifier code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomQualifierMatchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomQualifierMatchIndicator { get; set; }

    }

    /// <summary>
    /// A recurring element that identifies the room features.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomFeaturesType : System.Collections.ObjectModel.Collection<RoomFeatureType>
    {

    }

    /// <summary>
    /// Room Feature Information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomFeatureType
    {
        /// <summary>
        /// A code representing a room feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// A code representing a room feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Indicates quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

    }

    /// <summary>
    /// Attributes of property room type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoomTypeAttributesType
    {
        /// <summary>
        /// Default occupancy of property room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultOccupancy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultOccupancy { get; set; }

        /// <summary>
        /// Max occupancy of property room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumOccupancy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumOccupancy { get; set; }

        /// <summary>
        /// Number of physical rooms of property room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noOfPhysicalRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NoOfPhysicalRooms { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BookingChannelMappingType
    {
        [Newtonsoft.Json.JsonProperty("bookingChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingChannelCode { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// The rate plan element is used to contain all the rate information for a single Rate Plan
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailRatePlanInfoType
    {
        /// <summary>
        /// Rate plan information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RatePlan> RatePlan { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RatePlanChannelInfoType
    {
        /// <summary>
        /// All rate codes are associated with rate plan level ( or rate category )for Channels. So if rate plans are given in the request, get all rate codes associated with the rate plan level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanLevel { get; set; }

        /// <summary>
        /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RatePlanId RatePlanId { get; set; }

        /// <summary>
        /// To populate the RatePlanName, setup for the channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanWebName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string RatePlanWebName { get; set; }

    }

    /// <summary>
    /// Specifies Guarantee Code attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GuaranteeType
    {
        /// <summary>
        /// Description of the Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies various policyRequirements for the guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyRequirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuaranteeRequirementsType PolicyRequirements { get; set; }

        /// <summary>
        /// Brief description of the Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslationTextType80 ShortDescription { get; set; }

        /// <summary>
        /// Specifies various payment types for the guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PaymentTypesType PaymentTypes { get; set; }

        /// <summary>
        /// Code assigned to the Guarantee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GuaranteeCode { get; set; }

        /// <summary>
        /// If true indicates this Guarantee Code is used only to hold the inventory during reservation process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onHold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnHold { get; set; }

        /// <summary>
        /// If true indicates inventory will be reserved/deducted when reservation uses this Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reserveInventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReserveInventory { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Represents the late arrival time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lateArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LateArrival { get; set; }

    }

    /// <summary>
    /// Specifies various requirement for the guarantee code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GuaranteeRequirementsType
    {
        /// <summary>
        /// Requirement Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requirementCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RequirementCode { get; set; }

        /// <summary>
        /// When true indicates cancellation on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cancellation { get; set; }

        /// <summary>
        /// When true indicates phone number on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PhoneNumber { get; set; }

        /// <summary>
        /// When true indicates address on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Address { get; set; }

        /// <summary>
        /// When true indicates Credit Card on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreditCard { get; set; }

        /// <summary>
        /// When true indicates arrival Time on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ArrivalTime { get; set; }

        /// <summary>
        /// When true indicates deposit is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deposit { get; set; }

    }

    /// <summary>
    /// Contains Multiple translated texts and language codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TranslationTextType80
    {
        /// <summary>
        /// Default text with Character length from 0 to 80.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string DefaultText { get; set; }

        /// <summary>
        /// List of translated text and language codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("translatedTexts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TranslationsTextType TranslatedTexts { get; set; }

    }

    /// <summary>
    /// Language code for the translation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TranslationsTextType : System.Collections.ObjectModel.Collection<Anonymous4>
    {

    }

    /// <summary>
    /// Payment card code like AX,VI etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PaymentTypesType : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// The CancelPenalty class defines the cancellation policy of the hotel facility.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CancelPenaltyType
    {
        /// <summary>
        /// Cancellation deadline, absolute or relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyDeadlineType Deadline { get; set; }

        /// <summary>
        /// Cancellation fee expressed as a fixed amount, or percentage of/or room nights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyAmountPercentType AmountPercent { get; set; }

        /// <summary>
        /// Text description of the Penalty in a given language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("penaltyDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PenaltyDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OffsetUnitType? OffsetUnit { get; set; }

        /// <summary>
        /// Formatted Text Rule of the Cancellation Penalty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FormattedRule { get; set; }

        /// <summary>
        /// Policy Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PolicyCode { get; set; }

        /// <summary>
        /// Flag to indicate if the cancellation policy is manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Manual { get; set; }

        /// <summary>
        /// Indicates if the amount is refundable if booking is canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonRefundable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonRefundable { get; set; }

    }

    /// <summary>
    /// Cancellation deadline, absolute or relative.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PolicyDeadlineType
    {
        /// <summary>
        /// Defines the absolute deadline. Either this or the offset attributes may be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absoluteDeadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AbsoluteDeadline { get; set; }

        /// <summary>
        /// The number of days before arrival that allows cancellation without penalties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offsetFromArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OffsetFromArrival { get; set; }

        /// <summary>
        /// Time on offset day the cancellation penalties applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offsetDropTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OffsetDropTime { get; set; }

        /// <summary>
        /// The number of days after booking deposit must be paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offsetFromBookingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OffsetFromBookingDate { get; set; }

    }

    /// <summary>
    /// Defines the percentage basis for calculating the fee amount or the amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PolicyAmountPercentType
    {
        /// <summary>
        /// Provides the basis for how the amount of the guarantee is calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PolicyBasisTypeType? BasisType { get; set; }

        /// <summary>
        /// The number of nights of the hotel stay that are used to calculate the fee amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nights { get; set; }

        /// <summary>
        /// The percentage used to calculate the amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? Percent { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// Full Amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PolicyBasisTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FlatAmount")]
        FlatAmount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Percentage")]
        Percentage = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Nights")]
        Nights = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NightPercentage")]
        NightPercentage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FullAmount")]
        FullAmount = 4,

    }

    /// <summary>
    /// Indicates deadline offset unit type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OffsetUnitType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RatePlanCommissionType
    {
        /// <summary>
        /// commission code used by the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// commission percentage used by the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionPercentage { get; set; }

        /// <summary>
        /// commission amount used by the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionAmount { get; set; }

    }

    /// <summary>
    /// Guarantee Code information with cancellation penalty and deposit policy information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GuaranteePoliciesType : System.Collections.ObjectModel.Collection<GuaranteePolicyType>
    {

    }

    /// <summary>
    /// Specifies Guarantee Code attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GuaranteePolicyType
    {
        /// <summary>
        /// Code assigned to the Guarantee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GuaranteeCode { get; set; }

        /// <summary>
        /// Brief description of the Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslationTextType80 ShortDescription { get; set; }

        /// <summary>
        /// Specifies various policyRequirements for the guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyRequirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuaranteeRequirementsType PolicyRequirements { get; set; }

        /// <summary>
        /// Description of the Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies various payment types for the guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PaymentTypesType PaymentTypes { get; set; }

        /// <summary>
        /// If true indicates this Guarantee Code is used only to hold the inventory during reservation process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onHold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnHold { get; set; }

        /// <summary>
        /// If true indicates inventory will be reserved/deducted when reservation uses this Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reserveInventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReserveInventory { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Represents the late arrival time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lateArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LateArrival { get; set; }

        /// <summary>
        /// The CancelPenalty class defines the cancellation policy of the hotel facility.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelPenalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancelPenalty CancelPenalty { get; set; }

        /// <summary>
        /// A deposit policy attached with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepositPolicy DepositPolicy { get; set; }

        /// <summary>
        /// If true indicates this can be the default guarantee type to be selected for a reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultGuarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultGuarantee { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// The type to indicate what revenue is to be used for calculating deposit/cancellation amounts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum DepositCancelRevenueType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Rooms")]
        Rooms = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Catering")]
        Catering = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 2,

    }

    /// <summary>
    /// Used to define the deposit policy, guarantees policy, and/or accepted forms of payment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DepositPolicyType
    {
        /// <summary>
        /// Payment expressed as a fixed amount, or a percentage of/or room nights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyAmountPercentType AmountPercent { get; set; }

        /// <summary>
        /// Payment deadline, absolute or relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyDeadlineType Deadline { get; set; }

        /// <summary>
        /// Text description of the Payment in a given language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Receipt number associated with the deposit policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositReceiptNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DepositReceiptNo { get; set; }

        /// <summary>
        /// Transaction Date associated with the deposit policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransactionDate { get; set; }

        /// <summary>
        /// Flag to indicate if deposit policy is reversed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositReqReversed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DepositReqReversed { get; set; }

        /// <summary>
        /// Formatted Text Rule of the deposit policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FormattedRule { get; set; }

        /// <summary>
        /// Defines if the deposit amount is calculated based on Room Charges, Catering Charges or both
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeOfCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DepositCancelRevenueType? TypeOfCharges { get; set; }

        /// <summary>
        /// Deposit Policy Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PolicyCode { get; set; }

        /// <summary>
        /// Flag to indicate if the cancellation policy is manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Manual { get; set; }

    }

    /// <summary>
    /// Used in conjunction with the Success element to define a business error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WarningsType : System.Collections.ObjectModel.Collection<WarningType>
    {

    }

    /// <summary>
    /// Used when a message has been successfully processed to report any warnings or business errors that occurred.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WarningType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// An abbreviated version of the error in textual format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ShortText { get; set; }

        /// <summary>
        /// If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// If present, this URL refers to an online description of the error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DocURL { get; set; }

        /// <summary>
        /// If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Status { get; set; }

        /// <summary>
        /// If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Tag { get; set; }

        /// <summary>
        /// If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RecordId { get; set; }

        /// <summary>
        /// The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type ="Unknown".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Reference Place Holder used as an index for this warning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string Rph { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MasterRestrictionStatusesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosedForArrival")]
        ClosedForArrival = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosedForDeparture")]
        ClosedForDeparture = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MinimumStayThrough")]
        MinimumStayThrough = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumStayThrough")]
        MaximumStayThrough = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MinimumLengthOfStay")]
        MinimumLengthOfStay = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumLengthOfStay")]
        MaximumLengthOfStay = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LOSNotAvailable")]
        LOSNotAvailable = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MinimumAdvanceBooking")]
        MinimumAdvanceBooking = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumAdvanceBooking")]
        MaximumAdvanceBooking = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenForArrival")]
        OpenForArrival = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenForDeparture")]
        OpenForDeparture = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Hurdle")]
        Hurdle = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MinimumOccupancy")]
        MinimumOccupancy = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumOccupancy")]
        MaximumOccupancy = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RateStrategy")]
        RateStrategy = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RateDetailsNotSet")]
        RateDetailsNotSet = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"InventoryItemNotAvailable")]
        InventoryItemNotAvailable = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"RankRestriction")]
        RankRestriction = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumAuth")]
        MaximumAuth = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"InventoryNotAvailable")]
        InventoryNotAvailable = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomClassNotAvailable")]
        RoomClassNotAvailable = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomTypeNotAvailable")]
        RoomTypeNotAvailable = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BlockSellLimit")]
        BlockSellLimit = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"OnRequest")]
        OnRequest = 25,

    }

    /// <summary>
    /// Indicates the rate amount returned is first night or highest rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum RateChangeTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FirstNight")]
        FirstNight = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Highest")]
        Highest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Lowest")]
        Lowest = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MostCommon")]
        MostCommon = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Average")]
        Average = 4,

    }

    /// <summary>
    /// Contains the basic configuration information about a Hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelInfoType
    {
        /// <summary>
        /// Primary Information of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryDetails PrimaryDetails { get; set; }

        /// <summary>
        /// General Information of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generalInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeneralInformation GeneralInformation { get; set; }

        /// <summary>
        /// Accommodation Details of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accommodationDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccommodationDetails AccommodationDetails { get; set; }

        /// <summary>
        /// Property controls information configuration of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyControls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PropertyControls PropertyControls { get; set; }

        /// <summary>
        /// Communication information of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("communication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Communication Communication { get; set; }

        /// <summary>
        /// Provides address information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>
        /// Names of restaurants which can be found in the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelRestaurants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelRestaurantsType HotelRestaurants { get; set; }

        /// <summary>
        /// The rate ranges which are offered by the hotels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelRateRanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelRateRangesType HotelRateRanges { get; set; }

        /// <summary>
        /// Informations about alternative hotels provided by the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateHotels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AlternateHotelsType AlternateHotels { get; set; }

        /// <summary>
        /// The contacts information the hotels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelContacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelContactsType HotelContacts { get; set; }

        /// <summary>
        /// Even Space information of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelEventSpaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelEventSpacesType HotelEventSpaces { get; set; }

        /// <summary>
        /// List of notes for the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelNotesType HotelNotes { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelCorporateInformations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelCorporateInformationsType HotelCorporateInformations { get; set; }

        /// <summary>
        /// List of Attractions for the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attractions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelAttractionsType Attractions { get; set; }

        /// <summary>
        /// List of Meeting Rooms for the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("meetingRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public MeetingRoomsType MeetingRooms { get; set; }

        /// <summary>
        /// The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChainCode { get; set; }

        /// <summary>
        /// The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The IATA city code; for example DCA, ORD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string HotelCityCode { get; set; }

        /// <summary>
        /// A text field used to communicate the proper name of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelName { get; set; }

        /// <summary>
        /// A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCodeContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string HotelCodeContext { get; set; }

        /// <summary>
        /// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ChainName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelRestaurantsType : System.Collections.ObjectModel.Collection<HotelRestaurantType>
    {

    }

    /// <summary>
    /// Information about the Restaurants in the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelRestaurantType
    {
        /// <summary>
        /// The name of the Restaurant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restaurantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string RestaurantName { get; set; }

        /// <summary>
        /// The Type of Restaurant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restaurantType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string RestaurantType { get; set; }

        /// <summary>
        /// The Hours of Operation of the Restaurant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string Hours { get; set; }

        /// <summary>
        /// The price range of the Restaurant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PriceRange { get; set; }

        /// <summary>
        /// Comments about the Restaurant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        /// <summary>
        /// The category that the Restaurant belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RestaurantCategoryType? Category { get; set; }

        /// <summary>
        /// The Start Date and End Date of the Restaurant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType TimeSpan { get; set; }

        /// <summary>
        /// The new Restaurant Code which is used in the change method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newRestaurantCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NewRestaurantCode { get; set; }

        [Newtonsoft.Json.JsonProperty("restaurantCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RestaurantCode { get; set; }

        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderBy { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// Simple type for Hotel Restaurant.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum RestaurantCategoryType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Restaurant")]
        Restaurant = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Retail")]
        Retail = 1,

    }

    /// <summary>
    /// Lists of rate ranges of the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelRateRangesType : System.Collections.ObjectModel.Collection<HotelRateRangeType>
    {

    }

    /// <summary>
    /// The rate rage information of the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelRateRangeType
    {
        /// <summary>
        /// The Start Date and End Date of the Hotel rate range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType TimeSpan { get; set; }

        /// <summary>
        /// Minimum Rate offered by the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRate { get; set; }

        /// <summary>
        /// Maximum Rate offered by the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRate { get; set; }

        /// <summary>
        /// The base currency code for rate range(The currency code used by the hotel which the rate range belongs to).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AlternateHotelsType : System.Collections.ObjectModel.Collection<AlternateHotelType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AlternateHotelType
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType Address { get; set; }

        [Newtonsoft.Json.JsonProperty("contactNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TelephoneType> ContactNumbers { get; set; }

        [Newtonsoft.Json.JsonProperty("minRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType MinRate { get; set; }

        [Newtonsoft.Json.JsonProperty("maxRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType MaxRate { get; set; }

        [Newtonsoft.Json.JsonProperty("relativePosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelativePositionType RelativePosition { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelAmenities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<HotelAmenityType> HotelAmenities { get; set; }

        /// <summary>
        /// True if the hotel has any scheduled events within the requested date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Event { get; set; }

        /// <summary>
        /// Any additional information like membership, restriction status, room stay information of the requested hotels etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateRoomDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RateRoomDetailsType RateRoomDetails { get; set; }

        /// <summary>
        /// Channel related information if availability request is send for a channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelSummaryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelSummaryInfoType ChannelSummaryInfo { get; set; }

        /// <summary>
        /// Sell messages retrieved based on the Time Span criteria for all Rate Codes and Room Types of the requested hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SellMessagesType SellMessages { get; set; }

        /// <summary>
        /// Exchange Rate information for currency codes of the requested hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyExchangeRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CurrencyExchangeRatesType CurrencyExchangeRates { get; set; }

        /// <summary>
        /// The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChainCode { get; set; }

        /// <summary>
        /// The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The IATA city code; for example DCA, ORD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string HotelCityCode { get; set; }

        /// <summary>
        /// A text field used to communicate the proper name of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelName { get; set; }

        /// <summary>
        /// A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCodeContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string HotelCodeContext { get; set; }

        /// <summary>
        /// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ChainName { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelType { get; set; }

        [Newtonsoft.Json.JsonProperty("negotiated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Negotiated { get; set; }

        [Newtonsoft.Json.JsonProperty("alternate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Alternate { get; set; }

        [Newtonsoft.Json.JsonProperty("displayOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DisplayOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("inventoryRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InventoryRooms { get; set; }

        [Newtonsoft.Json.JsonProperty("availableRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableRooms { get; set; }

        /// <summary>
        /// Comments of alternate Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        /// <summary>
        /// Compass direction to the attraction from the hotel (North/South, etc).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Direction { get; set; }

        /// <summary>
        /// whether the alternate relationship should be applied to the alternate hotel as well. If this flag is true, not only will the AlternateHotelCode hotel be an alternate for HotelCode hotel, but HotelCode hotel will also be an alternate for AlternateHotelCode hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reciprocalRelationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReciprocalRelationship { get; set; }

        [Newtonsoft.Json.JsonProperty("alternateHotelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AlternateHotelCode { get; set; }

        [Newtonsoft.Json.JsonProperty("newAlternateHotelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NewAlternateHotelCode { get; set; }

    }

    /// <summary>
    /// Defines the position of an entity in relation to another entity (e.g. from an airport to a hotel, the relationship is dependent on use).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelativePositionType
    {
        /// <summary>
        /// Defines the distance between two points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Distance { get; set; }

        /// <summary>
        /// The unit of measure in a code format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distanceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DistanceType { get; set; }

        /// <summary>
        /// The driving time in a free text format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("drivingTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DrivingTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelAmenityType
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("displayOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DisplayOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RateRoomDetailsType
    {
        /// <summary>
        /// Detail regarding customer loyalty program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<MembershipSearchType> Memberships { get; set; }

        /// <summary>
        /// Indicates the restriction types if hotel is not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MasterRestrictionStatusesType? RestrictionType { get; set; }

        /// <summary>
        /// Room stay information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoomStayType> RoomStays { get; set; }

    }

    /// <summary>
    /// Identifies criteria for searching frequent customer reward program.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MembershipSearchType
    {
        /// <summary>
        /// Membership ID criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipId { get; set; }

        /// <summary>
        /// Membership Level criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CodeListType MembershipLevel { get; set; }

        /// <summary>
        /// Membership Type criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CodeListType MembershipType { get; set; }

        /// <summary>
        /// If this is true,the reservations which has membership information associated will be resulted .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associatedReservationsOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AssociatedReservationsOnly { get; set; }

    }

    /// <summary>
    /// Depicts channel information such as the type and code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChannelSummaryInfoType
    {
        [Newtonsoft.Json.JsonProperty("bookingChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BookingChannelType BookingChannel { get; set; }

        /// <summary>
        /// Indicates the transaction identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MessageId { get; set; }

        /// <summary>
        /// Used to indicate whether to return summarized or detailed rate room information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SummaryOnly { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BookingChannelType
    {
        [Newtonsoft.Json.JsonProperty("channelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChannelCode { get; set; }

        [Newtonsoft.Json.JsonProperty("channelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ChannelName { get; set; }

        [Newtonsoft.Json.JsonProperty("channelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(240)]
        public string ChannelType { get; set; }

    }

    /// <summary>
    /// The SellMessagesType is the list of message and attributes returned by web service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SellMessagesType
    {
        /// <summary>
        /// This is the message text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<SellMessageType> SellMessage { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// The SellMessagesType defines the standard attributes that will be retrieved with the sell message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SellMessageType
    {
        /// <summary>
        /// This is the message text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Message { get; set; }

        /// <summary>
        /// This is the Central Reservation office code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("croCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CroCode { get; set; }

        /// <summary>
        /// This is the chain code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChainCode { get; set; }

        /// <summary>
        /// This is the hotel code or resort.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// This represents the room type code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        /// <summary>
        /// This represents the rate plan code of the room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// This is the language code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Flag which tells if this message is Sticky (Y/N).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stickyFlagYn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string StickyFlagYn { get; set; }

        /// <summary>
        /// This represents the correct moduletype which should be used for fetching SellMessages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usedInModule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsedInModuleType? UsedInModule { get; set; }

        /// <summary>
        /// This is the Begin date for the configured SellMessage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beginDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BeginDate { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Simple type for indicating the module for which user wants to create the SellMessage. Valid module types are Look To Book Sales,Reservations,Blocks,Function Diary and Group Rooms Control.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum UsedInModuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Blocks")]
        Blocks = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Reservations")]
        Reservations = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FunctionDiary")]
        FunctionDiary = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LookToBookSales")]
        LookToBookSales = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupRoomsControl")]
        GroupRoomsControl = 4,

    }

    /// <summary>
    /// Exchange Rate information for a currency code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CurrencyExchangeRatesType : System.Collections.ObjectModel.Collection<CurrencyExchangeRateType>
    {

    }

    /// <summary>
    /// Currency code configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CurrencyExchangeRateType
    {
        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Description of the currency code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Exchange Rate for the currency code. Exchange rate is based on the current business date of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType ExchangeRate { get; set; }

    }

    /// <summary>
    /// Lists of contacts of the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelContactsType : System.Collections.ObjectModel.Collection<HotelContactType>
    {

    }

    /// <summary>
    /// Contact identification details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelContactType
    {
        /// <summary>
        /// Contact or employee identifier..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type NameId { get; set; }

        /// <summary>
        /// The code of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Name of the hotel contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Name { get; set; }

        /// <summary>
        /// List of HotelContactType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelContactRolesType Roles { get; set; }

        /// <summary>
        /// The contact's code in the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// The preferred method of communication for the contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("communicationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommunicationMethod { get; set; }

        /// <summary>
        /// Details about the preferred communication method. Example: email address, fax number, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("communicationAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CommunicationAddress { get; set; }

        /// <summary>
        /// Primary flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

    }

    /// <summary>
    /// Lists of HotelContactRoles of the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelContactRolesType : System.Collections.ObjectModel.Collection<HotelContactRoleType>
    {

    }

    /// <summary>
    /// The contact's role in the hotel. Possible values are Lead, General, and Contract.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum HotelContactRoleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Lead")]
        Lead = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 2,

    }

    /// <summary>
    /// The Detail and Summary info of event space about the hotel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelEventSpacesType
    {
        /// <summary>
        /// Even Space Detail information of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventSpaceDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelEventSpaceDetailsType EventSpaceDetails { get; set; }

        /// <summary>
        /// Event Space Summary information of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventSpaceSummaries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelEventSpaceSummariesType EventSpaceSummaries { get; set; }

        /// <summary>
        /// List of hotel setup style codes of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("setupStyles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public HotelSetupStylesType SetupStyles { get; set; }

    }

    /// <summary>
    /// List of detail info of hotel event space
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelEventSpaceDetailsType : System.Collections.ObjectModel.Collection<HotelEventSpaceDetailType>
    {

    }

    /// <summary>
    /// The detail info of hotel event space
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelEventSpaceDetailType
    {
        /// <summary>
        /// The code of hotel event space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Th description of the hotel event space
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Th max capacity of the hotel event space
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxCapacity { get; set; }

        /// <summary>
        /// List of max occupancies of the event space based on the setup code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxOccupancies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public EventSpaceMaxOccupanciesType MaxOccupancies { get; set; }

    }

    /// <summary>
    /// List of event space max occupancy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EventSpaceMaxOccupanciesType : System.Collections.ObjectModel.Collection<int>
    {

    }

    /// <summary>
    /// List of summary info of hotel event space
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelEventSpaceSummariesType : System.Collections.ObjectModel.Collection<HotelEventSpaceSummaryType>
    {

    }

    /// <summary>
    /// The summary info of hotel event space
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelEventSpaceSummaryType
    {
        /// <summary>
        /// The total event space number which has the same space type, max capacity and setup style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("no", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? No { get; set; }

        /// <summary>
        /// The type of the event space
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spaceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string SpaceType { get; set; }

        /// <summary>
        /// The max capacity of this event space group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxCapacity { get; set; }

        /// <summary>
        /// List of max occupancies of the event space based on the setup code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxOccupancies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public EventSpaceMaxOccupanciesType MaxOccupancies { get; set; }

    }

    /// <summary>
    /// List of event space setup style codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelSetupStylesType : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// List of Notes of the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelNotesType : System.Collections.ObjectModel.Collection<CommentInfoType>
    {

    }

    /// <summary>
    /// Corporate information details of the property
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelCorporateInformationsType
    {
        [Newtonsoft.Json.JsonProperty("brandCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BrandCode { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("businessUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PrimaryCodesType BusinessUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("departmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PrimaryCodesType DepartmentCode { get; set; }

        [Newtonsoft.Json.JsonProperty("division", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PrimaryCodesType Division { get; set; }

        [Newtonsoft.Json.JsonProperty("opertingUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PrimaryCodesType OpertingUnit { get; set; }

    }

    /// <summary>
    /// List of codes with primary flag
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PrimaryCodesType : System.Collections.ObjectModel.Collection<PrimaryCodeType>
    {

    }

    /// <summary>
    /// Primary flag with code and description.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PrimaryCodeType
    {
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        [Newtonsoft.Json.JsonProperty("codeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType CodeDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelAttractionsType : System.Collections.ObjectModel.Collection<HotelAttractionType>
    {

    }

    /// <summary>
    /// Information about the attractions near the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HotelAttractionType
    {
        /// <summary>
        /// Attraction name for the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslationTextType2000 Name { get; set; }

        /// <summary>
        /// The type of the attraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Type { get; set; }

        /// <summary>
        /// The class of the attraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Class { get; set; }

        /// <summary>
        /// Directions to the attraction from the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generalDirections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string GeneralDirections { get; set; }

        [Newtonsoft.Json.JsonProperty("relativePosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelativePositionType RelativePosition { get; set; }

        /// <summary>
        /// Address of the attraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType Address { get; set; }

        /// <summary>
        /// Website for the attraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLType Website { get; set; }

        /// <summary>
        /// Price range for the attraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PriceRange { get; set; }

        /// <summary>
        /// Price range for the attraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OperationHours { get; set; }

        /// <summary>
        /// Display sequence of the attraction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displaySeq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplaySeq { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    /// <summary>
    /// Contains Multiple translated texts and language codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TranslationTextType2000
    {
        /// <summary>
        /// Default text with Character length from 0 to 2000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DefaultText { get; set; }

        /// <summary>
        /// List of translated text and language codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("translatedTexts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TranslationsTextType TranslatedTexts { get; set; }

    }

    /// <summary>
    /// List of meeting rooms of the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MeetingRoomsType : System.Collections.ObjectModel.Collection<MeetingRoomType>
    {

    }

    /// <summary>
    /// Information about the meeting rooms of the hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MeetingRoomType
    {
        /// <summary>
        /// the code of the meeting room
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// The charge for the meeting room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Charge { get; set; }

        /// <summary>
        /// A description of the meeting room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Channel specific information to be returned in availability response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChannelAvailRSInfoType
    {
        /// <summary>
        /// Channel information like channel code etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelSummaryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelSummaryInfoType ChannelSummaryInfo { get; set; }

        /// <summary>
        /// Channel Marketing Text like cancel,deposit,tax,commission policy etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelMarketingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ChannelMarketingInfoType ChannelMarketingInfo { get; set; }

    }

    /// <summary>
    /// Marketing Text like cancel policy, deposit policy etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChannelMarketingInfoType : System.Collections.ObjectModel.Collection<Anonymous5>
    {

    }

    /// <summary>
    /// Indicates the channel policy type like deposit,cancel etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MarketingPolicyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Deposit")]
        Deposit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Commission")]
        Commission = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Guarantee")]
        Guarantee = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Penalty")]
        Penalty = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Tax")]
        Tax = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Promotion")]
        Promotion = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Links : System.Collections.ObjectModel.Collection<InstanceLink>
    {

    }

    /// <summary>
    /// Metadata describing link description objects that MAY appear in the JSON instance representation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InstanceLink
    {
        /// <summary>
        /// URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the "templated" property must be set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Href { get; set; }

        /// <summary>
        /// Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Rel { get; set; }

        /// <summary>
        /// Boolean flag that specifies that "href" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Templated { get; set; } = false;

        /// <summary>
        /// HTTP method for requesting the target of the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstanceLinkMethod Method { get; set; }

        /// <summary>
        /// Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetSchema { get; set; }

        /// <summary>
        /// The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationId { get; set; }

        /// <summary>
        /// Exact copy of the "summary" field on the linked operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

    }

    /// <summary>
    /// Complex type that contains error details for a REST call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExceptionDetailType
    {
        /// <summary>
        /// Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status code for this occurrence of the problem, set by the origin server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Human-readable description specific to this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>
        /// Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Application error code, which is different from HTTP error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorCode { get; set; }

        /// <summary>
        /// Path to the problem at the resource or property level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorPath { get; set; }

        /// <summary>
        /// Details of the error message, consisting of a hierarchical tree structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorInstance> O_errorDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

    }

    /// <summary>
    /// Complex type that contains error instance details for a REST call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorInstance
    {
        /// <summary>
        /// Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status code for this occurrence of the problem, set by the origin server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Human-readable description specific to this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>
        /// Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Application error code, which is different from HTTP error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorCode { get; set; }

        /// <summary>
        /// Path to the problem at the resource or property level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorPath { get; set; }

    }

    /// <summary>
    /// Response object to fetch reservation guarantees.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReservationGuaranteesPolicies
    {
        /// <summary>
        /// A collection of Guarantee Codes information with cancellation penalty and deposit policy information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resGuarantees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public GuaranteePoliciesType ResGuarantees { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Response object for fetching restrictions based on date range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RestrictionsByDateRange
    {
        /// <summary>
        /// Response of Restrictions By Date Range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictionsByDateRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FetchRestrictionsByDateRangeRSType RestrictionsByDateRange1 { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Response object for searching restrictions by date range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FetchRestrictionsByDateRangeRSType
    {
        /// <summary>
        /// Requested restrictions by date Range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictionsByDateRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RestrictionsByDateRangeType RestrictionsByDateRange { get; set; }

    }

    /// <summary>
    /// Restriction by date range for the requested Hotel.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RestrictionsByDateRangeType
    {
        /// <summary>
        /// Restriction set for a date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictionSets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RestrictionSetType> RestrictionSets { get; set; }

        /// <summary>
        /// The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChainCode { get; set; }

        /// <summary>
        /// The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The IATA city code; for example DCA, ORD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string HotelCityCode { get; set; }

        /// <summary>
        /// A text field used to communicate the proper name of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelName { get; set; }

        /// <summary>
        /// A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCodeContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string HotelCodeContext { get; set; }

        /// <summary>
        /// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ChainName { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Indicates Restriction set applicable for the date range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RestrictionSetType
    {
        /// <summary>
        /// Indicates the applicability of the restriction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictionControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RestrictionControlType RestrictionControl { get; set; }

        /// <summary>
        /// Indicates the type of the restriction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RestrictionStatusType RestrictionStatus { get; set; }

        /// <summary>
        /// Actual time span of the restriction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actualTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType ActualTimeSpan { get; set; }

        /// <summary>
        /// Indicates whether the Closed restriction is flagged as On Request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnRequest { get; set; }

        /// <summary>
        /// Indicates the action performed on restriction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ActionType { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

        [Newtonsoft.Json.JsonProperty("sunday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sunday { get; set; }

        [Newtonsoft.Json.JsonProperty("monday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Monday { get; set; }

        [Newtonsoft.Json.JsonProperty("tuesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tuesday { get; set; }

        [Newtonsoft.Json.JsonProperty("wednesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Wednesday { get; set; }

        [Newtonsoft.Json.JsonProperty("thursday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Thursday { get; set; }

        [Newtonsoft.Json.JsonProperty("friday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Friday { get; set; }

        [Newtonsoft.Json.JsonProperty("saturday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Saturday { get; set; }

    }

    /// <summary>
    /// The RestrictionControlType is used to indicate the applicability of the restriction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RestrictionControlType
    {
        /// <summary>
        /// Indicates the restriction is applicable at the House Level. When this is true all other attributes are ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("house", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? House { get; set; }

        /// <summary>
        /// Indicates restriction is applicable to specified Booking Channel Code in conjunction with other codes, if specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingChannelCode { get; set; }

        /// <summary>
        /// Indicates restriction is applicable to specified Room Category in conjunction with other codes, if specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomClass { get; set; }

        /// <summary>
        /// Indicates restriction is applicable to specified Room Type in conjunction with other codes, if specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        /// <summary>
        /// Indicates restriction is applicable to specified Rate Plan Category in conjunction with other codes, if specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCategory { get; set; }

        /// <summary>
        /// Indicates restriction is applicable to specified Rate Plan Code in conjunction with other codes, if specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

    }

    /// <summary>
    /// The RestrictionStatusType is used to indicate the type of restriction applied. An enumerated restriction type is defined in the attribute group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RestrictionStatusType
    {
        /// <summary>
        /// Identifies the type of restriction. I.E. Closed, ClosedForArrival, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RestrictionStatusesType? Code { get; set; }

        /// <summary>
        /// Defines restriction in conjunction with Restriction Code. Value must be specified for Restriction Codes MinimumStayThrough, MaximumStayThrough, MinimumLengthOfStay, MaximumLengthOfStay, MinimumAdvanceBooking, MaximumAdvanceBooking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Unit { get; set; }

        /// <summary>
        /// Indicates Length of Stay 1 is not available. Defines restriction in conjunction with Restriction Code LOSNotAvailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lOS1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LOS1 { get; set; }

        /// <summary>
        /// Indicates Length of Stay 2 is not available. Defines restriction in conjunction with Restriction Code LOSNotAvailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lOS2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LOS2 { get; set; }

        /// <summary>
        /// Indicates Length of Stay 3 is not available. Defines restriction in conjunction with Restriction Code LOSNotAvailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lOS3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LOS3 { get; set; }

        /// <summary>
        /// Indicates Length of Stay 4 is not available. Defines restriction in conjunction with Restriction Code LOSNotAvailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lOS4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LOS4 { get; set; }

        /// <summary>
        /// Indicates Length of Stay 5 is not available. Defines restriction in conjunction with Restriction Code LOSNotAvailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lOS5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LOS5 { get; set; }

        /// <summary>
        /// Indicates Length of Stay 6 is not available. Defines restriction in conjunction with Restriction Code LOSNotAvailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lOS6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LOS6 { get; set; }

        /// <summary>
        /// Indicates Length of Stay 7 or more is not available. Defines restriction in conjunction with Restriction Code LOSNotAvailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lOS7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LOS7 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum RestrictionStatusesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosedForArrival")]
        ClosedForArrival = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosedForDeparture")]
        ClosedForDeparture = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MinimumStayThrough")]
        MinimumStayThrough = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumStayThrough")]
        MaximumStayThrough = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MinimumLengthOfStay")]
        MinimumLengthOfStay = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumLengthOfStay")]
        MaximumLengthOfStay = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LOSNotAvailable")]
        LOSNotAvailable = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MinimumAdvanceBooking")]
        MinimumAdvanceBooking = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumAdvanceBooking")]
        MaximumAdvanceBooking = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenForArrival")]
        OpenForArrival = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenForDeparture")]
        OpenForDeparture = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TravelAgent")]
        TravelAgent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationContact")]
        ReservationContact = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingContact")]
        BillingContact = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Addressee")]
        Addressee = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum RestrictionInfo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Detail")]
        Detail = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Overview")]
        Overview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 2,

    }

    /// <summary>
    /// An enumerated type defining the Filter Code Categort or Type. Values: BookingChannelCode, RoomClass, RoomType, RatePlanCategory, RatePlanCode.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FilterCodeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BookingChannelCode")]
        BookingChannelCode = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomClass")]
        RoomClass = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomType")]
        RoomType = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RatePlanCategory")]
        RatePlanCategory = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RatePlanCode")]
        RatePlanCode = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AdditionalGuestAmountTypeAgeQualifyingCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADULT")]
        ADULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
        CHILD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHILDBUCKET1")]
        CHILDBUCKET1 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CHILDBUCKET2")]
        CHILDBUCKET2 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CHILDBUCKET3")]
        CHILDBUCKET3 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CHILDBUCKET4")]
        CHILDBUCKET4 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CHILDBUCKET5")]
        CHILDBUCKET5 = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Addresses
    {
        /// <summary>
        /// Collection of Detailed information on an address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<AddressInfoType> AddressInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Telephones
    {
        /// <summary>
        /// Collection of Detailed information on telephone/fax for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TelephoneInfoType> TelephoneInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Emails
    {
        /// <summary>
        /// Collection of Detailed information on an eMail address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<EmailInfoType> EmailInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class URLs
    {
        /// <summary>
        /// Collection of Detailed information on web url/address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<URLInfoType> URLInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Comments
    {
        /// <summary>
        /// Collection of Detailed information on comments for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> CommentInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileDeliveryMethods
    {
        /// <summary>
        /// Collection of delivery methods for this Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileDeliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileDeliveryMethod> ProfileDeliveryMethod { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileMemberships
    {
        /// <summary>
        /// Collection of Detailed information on memberships for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileMembershipType> ProfileMembership { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PreferenceCollection
    {
        /// <summary>
        /// Collection of Detailed information on preferences of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceTypeType> PreferenceType { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Keywords
    {
        /// <summary>
        /// Collection of keywords attached to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<KeywordType> Keyword { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NegotiatedRates
    {
        /// <summary>
        /// Collection of Detailed information on profile negotiated rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<NegotiatedType> NegotiatedRate { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GdsNegotiatedRates
    {
        /// <summary>
        /// Collection of Detailed information on channel negotiated rates for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gdsNegotiatedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<GdsNegotiatedType> GdsNegotiatedRate { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Relationships
    {
        /// <summary>
        /// A collection of the profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelationshipsSummary
    {
        /// <summary>
        /// A collection of the profiles summary that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoSummaryType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Identifications
    {
        /// <summary>
        /// Collection of detailed information on the identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identificationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<IdentificationInfoType> IdentificationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomerTypeGender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum EmailTypeEmailFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Html")]
        Html = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CancellationInfo
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Date when reservation was last cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EmailFolioInfo
    {
        /// <summary>
        /// eMail deatils for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailType Email { get; set; }

        [Newtonsoft.Json.JsonProperty("emailFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EmailFolio { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TimeSpan
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }

        /// <summary>
        /// The total duration, in seconds, the reservation is on Queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DurationInSeconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Anonymous2
    {
        /// <summary>
        /// Additional text field to display on the folio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Text { get; set; }

        /// <summary>
        /// Row number of the additional text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("row", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Row { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Telephones2
    {
        /// <summary>
        /// Collection of Detailed information on telephone/fax for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TelephoneInfoType> TelephoneInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Emails2
    {
        /// <summary>
        /// Collection of Detailed information on an eMail address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<EmailInfoType> EmailInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Hotels
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Code { get; set; }

        /// <summary>
        /// Scope of e-cert: global,single property or multi property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateScopeType? Scope { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProfileInfo
    {
        /// <summary>
        /// Family name, last name or Company Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// Full display Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string FullName { get; set; }

        /// <summary>
        /// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// The middle name of the person name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NameSuffix { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Type of name of the individual, such as former, nickname, alternate or alias name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonNameTypeType? NameType { get; set; }

        /// <summary>
        /// OPERA profile type such as Individual or Company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Anonymous3
    {
        /// <summary>
        /// Membership Award code applied on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AwardCode { get; set; }

        /// <summary>
        /// Membership Award number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voucherNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string VoucherNo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OriginalInfo
    {
        /// <summary>
        /// The Rate Code of the Reservation before it was upgraded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateCode { get; set; }

        /// <summary>
        /// Total Amount of the reservation before it was upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalAmount { get; set; }

        /// <summary>
        /// Original Reservation Room Type before being upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType RoomType { get; set; }

        /// <summary>
        /// The number of nights of the reservation before being upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nights { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpsellInfo
    {
        /// <summary>
        /// Amount that was charged for the upsell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUpsellCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalUpsellCharge { get; set; }

        /// <summary>
        /// Total Amount that was charged including upsell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUpsellMoneyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalUpsellMoneyAmount { get; set; }

        /// <summary>
        /// First Night Total Amount including Upsell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstNightUpsellAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType FirstNightUpsellAmount { get; set; }

        /// <summary>
        /// First Night Upsell Charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstNightUpsellCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType FirstNightUpsellCharge { get; set; }

        /// <summary>
        /// Total Upsell Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUpsellPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalUpsellPoints { get; set; }

        /// <summary>
        /// Actual Total Room Rate for the Target Upsell Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalActualRateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalActualRateAmount { get; set; }

        /// <summary>
        /// Reservation Room Type for Upsell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType RoomType { get; set; }

        /// <summary>
        /// Detail description of the Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomLongDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomLongDescription { get; set; }

        /// <summary>
        /// Upsell Rule Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RuleId { get; set; }

        /// <summary>
        /// Upsell rule code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RuleCode { get; set; }

        /// <summary>
        /// Upsell rule description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RuleDescription { get; set; }

        /// <summary>
        /// Percentage savings resulting from accepting upsell offer. This will be calculated as the ratio of the amount saved by accepting the upsell offer to the actual room rate (i.e. room rate when upsell is not offered)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentageSavings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? PercentageSavings { get; set; }

        /// <summary>
        /// The date on which reservation is upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? UpsellDate { get; set; }

        /// <summary>
        /// User who upgraded the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string UpsellUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RatePlan
    {
        /// <summary>
        /// Brief Information of the Rate Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ShortInfo { get; set; }

        /// <summary>
        /// Detail Information of the Rate Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LongInfo { get; set; }

        /// <summary>
        /// URL providing more information about the Rate Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string WebPage { get; set; }

        /// <summary>
        /// Description of the Rate Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// To populate RatePlanLevel, RatePlanWebName, and RatePlanID according to the setup made under channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanChannelInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RatePlanChannelInfoType RatePlanChannelInfo { get; set; }

        /// <summary>
        /// Currency Code of the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Booking Channel mapping for the Rate Plan Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelMappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<BookingChannelMappingType> BookingChannelMappings { get; set; }

        /// <summary>
        /// All rate codes are associated with rate plan level ( or rate category )for Channels. So if rate plans are given in the request, get all rate codes associated with the rate plan level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanLevel { get; set; }

        /// <summary>
        /// Guarantee details for rate plan code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuaranteeType Guarantee { get; set; }

        /// <summary>
        /// Cancellation details for rate plan code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelPenalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancelPenaltyType CancelPenalty { get; set; }

        /// <summary>
        /// Meal plan codes for rate plan code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mealPlans", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public MealPlansType MealPlans { get; set; }

        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("ratePlanCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCategory { get; set; }

        /// <summary>
        /// Indicates if tax is included in the rate code amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxInclusive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TaxInclusive { get; set; }

        /// <summary>
        /// Indicates if service fee is included in the rate code amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceFeeInclusive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ServiceFeeInclusive { get; set; }

        /// <summary>
        /// Commission details for Rate plan code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RatePlanCommissionType RateCommission { get; set; }

        /// <summary>
        /// A collection of Guarantee Codes information with cancellation penalty and deposit policy information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resGuarantees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public GuaranteePoliciesType ResGuarantees { get; set; }

        /// <summary>
        /// If Rate plane is negotiated by Guest or any attached profiles, this indicates how negotiated it. Applicable values are Guest, Company, Agent and Source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negotiatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? NegotiatedBy { get; set; }

        /// <summary>
        /// Holds the market code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MarketCode { get; set; }

        /// <summary>
        /// Holds the source code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceCode { get; set; }

        /// <summary>
        /// If true, indicates this rates is not allowed to be sold by CRO. For CRO this is information only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelUseOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HotelUseOnly { get; set; }

        /// <summary>
        /// If true, indicates additional discount could be applied on the Rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DiscountAllowed { get; set; }

        /// <summary>
        /// If true, indicates that credentials is required to sell the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentialsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CredentialsRequired { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RatePlanId
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Language code for the translation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Anonymous4
    {
        /// <summary>
        /// Used for Character Strings, length 0 to 2000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CancelPenalty
    {
        /// <summary>
        /// Cancellation deadline, absolute or relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyDeadlineType Deadline { get; set; }

        /// <summary>
        /// Cancellation fee expressed as a fixed amount, or percentage of/or room nights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyAmountPercentType AmountPercent { get; set; }

        /// <summary>
        /// Text description of the Penalty in a given language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("penaltyDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PenaltyDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OffsetUnitType? OffsetUnit { get; set; }

        /// <summary>
        /// Formatted Text Rule of the Cancellation Penalty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FormattedRule { get; set; }

        /// <summary>
        /// Policy Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PolicyCode { get; set; }

        /// <summary>
        /// Flag to indicate if the cancellation policy is manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Manual { get; set; }

        /// <summary>
        /// Indicates if the amount is refundable if booking is canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonRefundable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonRefundable { get; set; }

        /// <summary>
        /// Indicator if Cancellation Penalty is currently applicable or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Effective { get; set; }

        /// <summary>
        /// Message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedAmount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DepositPolicy
    {
        /// <summary>
        /// Type of reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DepositCancelRevenueType? RevenueType { get; set; }

        /// <summary>
        /// Reservation deposit policy details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepositPolicyType Policy { get; set; }

        /// <summary>
        /// Comments attached with a deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        /// <summary>
        /// Total amount paid against the reservation deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType AmountPaid { get; set; }

        /// <summary>
        /// Total amount due against the reservation deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType AmountDue { get; set; }

        /// <summary>
        /// Unique ID of the Reservation Policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type PolicyId { get; set; }

        /// <summary>
        /// Message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedAmount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PrimaryDetails
    {
        /// <summary>
        /// Legal owner of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string LegalOwner { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GeneralInformation
    {
        /// <summary>
        /// The type of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelType { get; set; }

        /// <summary>
        /// The total number of rooms in the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoomCount { get; set; }

        /// <summary>
        /// The total number of beds in the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bedCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BedCount { get; set; }

        /// <summary>
        /// The total number of floors of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("floorCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FloorCount { get; set; }

        /// <summary>
        /// The official check in time of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("checkInTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CheckInTime { get; set; }

        /// <summary>
        /// The official check out time of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("checkOutTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CheckOutTime { get; set; }

        /// <summary>
        /// URL where property information is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelInfoWebsite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLType HotelInfoWebsite { get; set; }

        /// <summary>
        /// Longitude of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Latitude of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The base language of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string BaseLanguage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AccommodationDetails
    {
        /// <summary>
        /// The number of Single Rooms of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("singleRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SingleRooms { get; set; }

        /// <summary>
        /// The number of Double Rooms of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doubleRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DoubleRooms { get; set; }

        /// <summary>
        /// The number of Twin Rooms of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twinRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TwinRooms { get; set; }

        /// <summary>
        /// The number of Family Rooms of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("familyRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FamilyRooms { get; set; }

        /// <summary>
        /// The number of Connecting Rooms of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("connectingRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConnectingRooms { get; set; }

        /// <summary>
        /// The number of Accessible Rooms of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessibleRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccessibleRooms { get; set; }

        /// <summary>
        /// The number of Non-Smoking Rooms of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonSmokingRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NonSmokingRooms { get; set; }

        /// <summary>
        /// Maximum Adults for Family Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxAdultsInFamilyRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAdultsInFamilyRoom { get; set; }

        /// <summary>
        /// Maximum Children for Family Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxChildrenInFamilyRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxChildrenInFamilyRoom { get; set; }

        /// <summary>
        /// The total number of the Guest Room Floors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestRoomFloors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GuestRoomFloors { get; set; }

        /// <summary>
        /// The number of Guest Room Elevators.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestRoomElevators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GuestRoomElevators { get; set; }

        /// <summary>
        /// The number of Suites of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Suites { get; set; }

        /// <summary>
        /// The floor number of Executive Floors of the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("executiveFloorNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string ExecutiveFloorNo { get; set; }

        /// <summary>
        /// The information about the Room Amenities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomAmenties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomAmenties { get; set; }

        /// <summary>
        /// The Description of the shops in the Hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shopDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ShopDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PropertyControls
    {
        /// <summary>
        /// The sell controls information configuration of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellControls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SellControls SellControls { get; set; }

        /// <summary>
        /// Currency Formatting information configuration of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyFormatting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyFormatting CurrencyFormatting { get; set; }

        /// <summary>
        /// Catering Currency Formatting information configuration of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cateringCurrencyFormatting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CateringCurrencyFormatting CateringCurrencyFormatting { get; set; }

        /// <summary>
        /// Date Time Formatting information configuration of the hotel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTimeFormatting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeFormatting DateTimeFormatting { get; set; }

        /// <summary>
        /// Application Mode information configuration of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationMode ApplicationMode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Communication
    {
        /// <summary>
        /// The direct dial phone number of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneType PhoneNumber { get; set; }

        /// <summary>
        /// Toll free phone number of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tollFreeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneType TollFreeNumber { get; set; }

        /// <summary>
        /// Fax phone number of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneType FaxNumber { get; set; }

        /// <summary>
        /// Email address of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The web address of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLType WebPage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// Indicator to define if the Address is validated by the Address Validation System.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValidated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValidated { get; set; }

        /// <summary>
        /// When the address is unformatted (FormattedInd="false") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CityName { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Post Office City Extension Code number. City Extension mainly used for UK addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CityExtension { get; set; }

        /// <summary>
        /// County or District Name (e.g., Fairfax). This is read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string County { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType Country { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Defines the type of address (e.g. home, business, other).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Indicates whether to update the reservations or not. If true and the address is primary, then all associated active reservations will be updated with the new primary address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateReservations { get; set; }

        /// <summary>
        /// The postal barcode for the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BarCode { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// The region code of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegionCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Anonymous5
    {
        /// <summary>
        /// Marketing Text like cancel policy, deposit policy etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates the policy type like cancel,deposit etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketingPolicyType? PolicyType { get; set; }

        /// <summary>
        /// Indicates the rate code for which the policy is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum InstanceLinkMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIONS")]
        OPTIONS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HEAD")]
        HEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SellControls
    {
        /// <summary>
        /// Date when the hotel become valid for use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// The end date of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// The hotel code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CurrencyFormatting
    {
        /// <summary>
        /// The base currency code for this hotel..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Format for the local currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CurrencyFormat { get; set; }

        /// <summary>
        /// Symbol to designate the default currency of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Number of decimal positions used for this currency type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPositions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CateringCurrencyFormatting
    {
        /// <summary>
        /// The base currency code for this hotel..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Format for the local currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CurrencyFormat { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DateTimeFormatting
    {
        /// <summary>
        /// Long date format of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longDateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LongDateFormat { get; set; }

        /// <summary>
        /// Short date format of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ShortDateFormat { get; set; }

        /// <summary>
        /// Time format for the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TimeFormat { get; set; }

        /// <summary>
        /// Time zone region of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeZoneRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string TimeZoneRegion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApplicationMode
    {
        /// <summary>
        /// The hotel's configuration mode if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurationMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ConfigurationMode { get; set; }

        /// <summary>
        /// The hotel's country code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CountryMode { get; set; }

        /// <summary>
        /// Hotel Code used for third party exports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expHotelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExpHotelCode { get; set; }

        /// <summary>
        /// The Tourist Number of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("touristNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TouristNumber { get; set; }

        /// <summary>
        /// Indicates if the hotel uses MBS (Marriott Business Services).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mBSSupported", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MBSSupported { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PriceAvailabilityRateExeption : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public PriceAvailabilityRateExeption(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PriceAvailabilityRateExeption<TResult> : PriceAvailabilityRateExeption
    {
        public TResult Result { get; private set; }

        public PriceAvailabilityRateExeption(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603