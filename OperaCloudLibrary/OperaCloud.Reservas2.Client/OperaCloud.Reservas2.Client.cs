//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OperaCloud.Reservas2
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(string baseUrl)
        {
            BaseUrl = baseUrl;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Register Call
        /// </summary>
        /// <param name="registerCall">Request to register call. Either creates a new call or updates an existing call.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response that contains either created/updated call information if successful or error(s) if not.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RegisterCall>> CallsAsync(RegisterCall registerCall, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return CallsAsync(registerCall, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register Call
        /// </summary>
        /// <param name="registerCall">Request to register call. Either creates a new call or updates an existing call.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response that contains either created/updated call information if successful or error(s) if not.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RegisterCall>> CallsAsync(RegisterCall registerCall, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (registerCall == null)
                throw new System.ArgumentNullException("registerCall");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/calls");

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(registerCall, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegisterCall>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RegisterCall>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Reservations for a hotel
        /// </summary>
        /// <param name="extSystemCode">Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.</param>
        /// <param name="externalReferenceList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="recentlyAccessed">Mark this reservation as recently accessed.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="offset">Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.</param>
        /// <param name="searchType">Represents Reservation search type Player Snapshot.</param>
        /// <param name="hotelIds">List of Hotels to support searches with multiple resorts for which traces are to be fetched.</param>
        /// <param name="text">Free form text field for searching all reservation fields</param>
        /// <param name="arrivalEndDate">The ending value of the date range.</param>
        /// <param name="arrivalStartDate">The starting value of the date range.</param>
        /// <param name="departureEndDate">The ending value of the date range.</param>
        /// <param name="departureStartDate">The starting value of the date range.</param>
        /// <param name="expectedArrivalStartTime">The ending value of the time span.</param>
        /// <param name="expectedArrivalEndTime">The starting value of the time span.</param>
        /// <param name="expectedReturnEndTime">The ending value of the time span.</param>
        /// <param name="expectedReturnStartTime">The starting value of the time span.</param>
        /// <param name="companyNames">Attached profile name</param>
        /// <param name="travelAgentIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="companyIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="sourceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="contactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="groupIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="billingContactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="profileIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="membershipCardNumber">Membership ID criteria.</param>
        /// <param name="surname">Family name, last name.</param>
        /// <param name="givenName">Given name, first name or names</param>
        /// <param name="anyVIPStatus">VIP status of the customer.</param>
        /// <param name="vipCodes">VIP status of the customer.</param>
        /// <param name="guaranteeCode">Fetches the reservation having Guarantee Code(Reservation Type) supplied here.</param>
        /// <param name="paymentMethod">Fetches the reservation having method of payment supplied here.</param>
        /// <param name="discountApplied">Fetches the reservation for which discount is applied</param>
        /// <param name="createdBy">Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.</param>
        /// <param name="cancelledByList">Fetches reservations cancelled by list of users.</param>
        /// <param name="cancelledOn">Fetches the reservations which are cancelled on a specific date.</param>
        /// <param name="excludeBlockReservations">If true the search result will exclude the blocks reservations.</param>
        /// <param name="blockName">The Name of the block that is attached to the reservation.</param>
        /// <param name="blockIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="blockCodes">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="customReference">Custom reference</param>
        /// <param name="recordLocator">GDS Record Locator for reservation.</param>
        /// <param name="roomAssignedOnly">Indicator to query reservations which have a room number assigned.</param>
        /// <param name="roomUnassignedOnly">Indicator to query reservations which does not have a room number assigned.</param>
        /// <param name="roomId">Room number of the reservation to search by.</param>
        /// <param name="roomType">Room Type.</param>
        /// <param name="roomFeatures">A code representing a room feature.</param>
        /// <param name="roomSpecials">Preference value for display purposes.</param>
        /// <param name="roomSmokingPreference">Preference value for display purposes.</param>
        /// <param name="roomFloorPreferences">Preference value for display purposes.</param>
        /// <param name="housekeepingRoomStatuses">Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.</param>
        /// <param name="communication">Filter by the last digits of a reservation's phone number.</param>
        /// <param name="fetchInstructions">Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.</param>
        /// <param name="allowPreRegistration">Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.</param>
        /// <param name="hasDepositBalance">Indicates that only reservations with deposit balance should be expected from the result.</param>
        /// <param name="hasOpenBalance">Indicates that only reservations with open balance should be expected from the result.</param>
        /// <param name="hasOpenFolio">Indicates that only reservations with open folio should be expected from the result.</param>
        /// <param name="includeScheduledCheckOut">Criteria that indicates whether to scheduled checkouts or not.</param>
        /// <param name="linkedOnly">Indicates that only linked reservations should be expected from the result.</param>
        /// <param name="unlinkedOnly">Indicates that only unlinked reservations should be expected from the result.</param>
        /// <param name="actualArrivals">Indicates if reservations which have already arrived on the Search Date is required.</param>
        /// <param name="actualDepartures">Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.</param>
        /// <param name="complimentaryReservations">Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="dayOfArrivalCancels">Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.</param>
        /// <param name="dayUse">Indicates if reservations which are day use reservation on the Search Date, is required.</param>
        /// <param name="earlyDepartures">Indicates if reservations which checked out early on the Search Date, is required.</param>
        /// <param name="expectedArrivals">Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.</param>
        /// <param name="expectedDepartures">Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.</param>
        /// <param name="extendedStays">Indicates if reservations which have extended their stays on the Search Date, is required.</param>
        /// <param name="houseUseReservations">Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="stayovers">Indicates if reservations which are StayOvers on the Search Date, is required.</param>
        /// <param name="stayDate">Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.</param>
        /// <param name="roomRoutingId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludePseudoRoomReservations">Indicates to exclude Pseudo room reservations.</param>
        /// <param name="excludeReservationIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludeVIPStatusCodes">VIP status of the customer.</param>
        /// <param name="excludeSpecials">Preference value for display purposes.</param>
        /// <param name="excludeFloorPreferences">Preference value for display purposes.</param>
        /// <param name="excludeAdvanceCheckedIn">Indicates to exclude Advance Checked In Reservations from search result.</param>
        /// <param name="playerId">Player ID associated to the reservation.</param>
        /// <param name="gamingBalanceFrom">Balance from.</param>
        /// <param name="gamingBalanceTo">Balance to.</param>
        /// <param name="compAccountingBalanceFrom">Comp Balance From</param>
        /// <param name="compAccountingBalanceTo">Comp Balance To</param>
        /// <param name="searchTypes">Represents Reservation search type Player Snapshot.</param>
        /// <param name="reservationStatuses">Reservation status type for reservations search.</param>
        /// <param name="transportationCodes">Codes to be searched.</param>
        /// <param name="roomReadyStatuses">Enum to denote the Status of Readiness messages sent to Guest Devices.</param>
        /// <param name="checkoutMessageReceived">Fetches the reservations for which Checkout Message is received.</param>
        /// <param name="optedForCommunication">Fetches the reservations for which reservation communication has been opted.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to the Fetch Reservation Request operation. Based on the criteria, reservation information is returned.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ReservationsDetails>> ExternalSystemsReservationsAsync(string extSystemCode, System.Collections.Generic.IEnumerable<string> externalReferenceList, bool? recentlyAccessed, int? limit, int? offset, SearchType? searchType, System.Collections.Generic.IEnumerable<string> hotelIds, string text, System.DateTimeOffset? arrivalEndDate, System.DateTimeOffset? arrivalStartDate, System.DateTimeOffset? departureEndDate, System.DateTimeOffset? departureStartDate, System.DateTimeOffset? expectedArrivalStartTime, System.DateTimeOffset? expectedArrivalEndTime, System.DateTimeOffset? expectedReturnEndTime, System.DateTimeOffset? expectedReturnStartTime, System.Collections.Generic.IEnumerable<string> companyNames, System.Collections.Generic.IEnumerable<string> travelAgentIds, System.Collections.Generic.IEnumerable<string> companyIds, System.Collections.Generic.IEnumerable<string> sourceIds, System.Collections.Generic.IEnumerable<string> contactIds, System.Collections.Generic.IEnumerable<string> groupIds, System.Collections.Generic.IEnumerable<string> billingContactIds, System.Collections.Generic.IEnumerable<string> profileIds, string membershipCardNumber, System.Collections.Generic.IEnumerable<string> membershipLevels, System.Collections.Generic.IEnumerable<string> membershipTypes, string surname, string givenName, bool? anyVIPStatus, System.Collections.Generic.IEnumerable<string> vipCodes, string guaranteeCode, string paymentMethod, bool? discountApplied, System.Collections.Generic.IEnumerable<string> user, string createdBy, System.Collections.Generic.IEnumerable<string> cancelledByList, System.DateTimeOffset? cancelledOn, System.Collections.Generic.IEnumerable<string> ratePlanCodes, System.Collections.Generic.IEnumerable<string> sourceCodes, System.Collections.Generic.IEnumerable<string> marketCodes, bool? excludeBlockReservations, string blockName, System.Collections.Generic.IEnumerable<string> blockIds, System.Collections.Generic.IEnumerable<string> blockCodes, string customReference, string recordLocator, System.Collections.Generic.IEnumerable<Anonymous> orderBy, System.Collections.Generic.IEnumerable<Anonymous2> sortOrder, bool? roomAssignedOnly, bool? roomUnassignedOnly, string roomId, System.Collections.Generic.IEnumerable<string> roomType, System.Collections.Generic.IEnumerable<string> roomFeatures, System.Collections.Generic.IEnumerable<string> roomSpecials, string roomSmokingPreference, System.Collections.Generic.IEnumerable<string> roomFloorPreferences, System.Collections.Generic.IEnumerable<Anonymous3> housekeepingRoomStatuses, System.Collections.Generic.IEnumerable<string> roomClasses, string roomRangeFrom, string roomRangeTo, string communication, System.Collections.Generic.IEnumerable<Anonymous4> fetchInstructions, bool? allowPreRegistration, bool? hasDepositBalance, bool? hasOpenBalance, bool? hasOpenFolio, bool? includeScheduledCheckOut, bool? linkedOnly, bool? unlinkedOnly, bool? actualArrivals, bool? actualDepartures, bool? complimentaryReservations, bool? dayOfArrivalCancels, bool? dayUse, bool? earlyDepartures, bool? expectedArrivals, bool? expectedDepartures, bool? extendedStays, bool? houseUseReservations, bool? stayovers, System.DateTimeOffset? stayDate, string roomRoutingId, bool? excludePseudoRoomReservations, System.Collections.Generic.IEnumerable<string> excludeReservationIds, System.Collections.Generic.IEnumerable<string> excludeVIPStatusCodes, System.Collections.Generic.IEnumerable<string> excludeSpecials, System.Collections.Generic.IEnumerable<string> excludeFloorPreferences, bool? excludeAdvanceCheckedIn, string playerId, double? gamingBalanceFrom, double? gamingBalanceTo, double? compAccountingBalanceFrom, double? compAccountingBalanceTo, System.Collections.Generic.IEnumerable<Anonymous5> searchTypes, System.Collections.Generic.IEnumerable<Anonymous6> reservationStatuses, System.Collections.Generic.IEnumerable<string> transportationCodes, System.Collections.Generic.IEnumerable<Anonymous7> roomReadyStatuses, bool? checkoutMessageReceived, bool? optedForCommunication, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return ExternalSystemsReservationsAsync(extSystemCode, externalReferenceList, recentlyAccessed, limit, offset, searchType, hotelIds, text, arrivalEndDate, arrivalStartDate, departureEndDate, departureStartDate, expectedArrivalStartTime, expectedArrivalEndTime, expectedReturnEndTime, expectedReturnStartTime, companyNames, travelAgentIds, companyIds, sourceIds, contactIds, groupIds, billingContactIds, profileIds, membershipCardNumber, membershipLevels, membershipTypes, surname, givenName, anyVIPStatus, vipCodes, guaranteeCode, paymentMethod, discountApplied, user, createdBy, cancelledByList, cancelledOn, ratePlanCodes, sourceCodes, marketCodes, excludeBlockReservations, blockName, blockIds, blockCodes, customReference, recordLocator, orderBy, sortOrder, roomAssignedOnly, roomUnassignedOnly, roomId, roomType, roomFeatures, roomSpecials, roomSmokingPreference, roomFloorPreferences, housekeepingRoomStatuses, roomClasses, roomRangeFrom, roomRangeTo, communication, fetchInstructions, allowPreRegistration, hasDepositBalance, hasOpenBalance, hasOpenFolio, includeScheduledCheckOut, linkedOnly, unlinkedOnly, actualArrivals, actualDepartures, complimentaryReservations, dayOfArrivalCancels, dayUse, earlyDepartures, expectedArrivals, expectedDepartures, extendedStays, houseUseReservations, stayovers, stayDate, roomRoutingId, excludePseudoRoomReservations, excludeReservationIds, excludeVIPStatusCodes, excludeSpecials, excludeFloorPreferences, excludeAdvanceCheckedIn, playerId, gamingBalanceFrom, gamingBalanceTo, compAccountingBalanceFrom, compAccountingBalanceTo, searchTypes, reservationStatuses, transportationCodes, roomReadyStatuses, checkoutMessageReceived, optedForCommunication, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Reservations for a hotel
        /// </summary>
        /// <param name="extSystemCode">Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.</param>
        /// <param name="externalReferenceList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="recentlyAccessed">Mark this reservation as recently accessed.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="offset">Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.</param>
        /// <param name="searchType">Represents Reservation search type Player Snapshot.</param>
        /// <param name="hotelIds">List of Hotels to support searches with multiple resorts for which traces are to be fetched.</param>
        /// <param name="text">Free form text field for searching all reservation fields</param>
        /// <param name="arrivalEndDate">The ending value of the date range.</param>
        /// <param name="arrivalStartDate">The starting value of the date range.</param>
        /// <param name="departureEndDate">The ending value of the date range.</param>
        /// <param name="departureStartDate">The starting value of the date range.</param>
        /// <param name="expectedArrivalStartTime">The ending value of the time span.</param>
        /// <param name="expectedArrivalEndTime">The starting value of the time span.</param>
        /// <param name="expectedReturnEndTime">The ending value of the time span.</param>
        /// <param name="expectedReturnStartTime">The starting value of the time span.</param>
        /// <param name="companyNames">Attached profile name</param>
        /// <param name="travelAgentIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="companyIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="sourceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="contactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="groupIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="billingContactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="profileIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="membershipCardNumber">Membership ID criteria.</param>
        /// <param name="surname">Family name, last name.</param>
        /// <param name="givenName">Given name, first name or names</param>
        /// <param name="anyVIPStatus">VIP status of the customer.</param>
        /// <param name="vipCodes">VIP status of the customer.</param>
        /// <param name="guaranteeCode">Fetches the reservation having Guarantee Code(Reservation Type) supplied here.</param>
        /// <param name="paymentMethod">Fetches the reservation having method of payment supplied here.</param>
        /// <param name="discountApplied">Fetches the reservation for which discount is applied</param>
        /// <param name="createdBy">Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.</param>
        /// <param name="cancelledByList">Fetches reservations cancelled by list of users.</param>
        /// <param name="cancelledOn">Fetches the reservations which are cancelled on a specific date.</param>
        /// <param name="excludeBlockReservations">If true the search result will exclude the blocks reservations.</param>
        /// <param name="blockName">The Name of the block that is attached to the reservation.</param>
        /// <param name="blockIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="blockCodes">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="customReference">Custom reference</param>
        /// <param name="recordLocator">GDS Record Locator for reservation.</param>
        /// <param name="roomAssignedOnly">Indicator to query reservations which have a room number assigned.</param>
        /// <param name="roomUnassignedOnly">Indicator to query reservations which does not have a room number assigned.</param>
        /// <param name="roomId">Room number of the reservation to search by.</param>
        /// <param name="roomType">Room Type.</param>
        /// <param name="roomFeatures">A code representing a room feature.</param>
        /// <param name="roomSpecials">Preference value for display purposes.</param>
        /// <param name="roomSmokingPreference">Preference value for display purposes.</param>
        /// <param name="roomFloorPreferences">Preference value for display purposes.</param>
        /// <param name="housekeepingRoomStatuses">Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.</param>
        /// <param name="communication">Filter by the last digits of a reservation's phone number.</param>
        /// <param name="fetchInstructions">Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.</param>
        /// <param name="allowPreRegistration">Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.</param>
        /// <param name="hasDepositBalance">Indicates that only reservations with deposit balance should be expected from the result.</param>
        /// <param name="hasOpenBalance">Indicates that only reservations with open balance should be expected from the result.</param>
        /// <param name="hasOpenFolio">Indicates that only reservations with open folio should be expected from the result.</param>
        /// <param name="includeScheduledCheckOut">Criteria that indicates whether to scheduled checkouts or not.</param>
        /// <param name="linkedOnly">Indicates that only linked reservations should be expected from the result.</param>
        /// <param name="unlinkedOnly">Indicates that only unlinked reservations should be expected from the result.</param>
        /// <param name="actualArrivals">Indicates if reservations which have already arrived on the Search Date is required.</param>
        /// <param name="actualDepartures">Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.</param>
        /// <param name="complimentaryReservations">Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="dayOfArrivalCancels">Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.</param>
        /// <param name="dayUse">Indicates if reservations which are day use reservation on the Search Date, is required.</param>
        /// <param name="earlyDepartures">Indicates if reservations which checked out early on the Search Date, is required.</param>
        /// <param name="expectedArrivals">Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.</param>
        /// <param name="expectedDepartures">Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.</param>
        /// <param name="extendedStays">Indicates if reservations which have extended their stays on the Search Date, is required.</param>
        /// <param name="houseUseReservations">Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="stayovers">Indicates if reservations which are StayOvers on the Search Date, is required.</param>
        /// <param name="stayDate">Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.</param>
        /// <param name="roomRoutingId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludePseudoRoomReservations">Indicates to exclude Pseudo room reservations.</param>
        /// <param name="excludeReservationIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludeVIPStatusCodes">VIP status of the customer.</param>
        /// <param name="excludeSpecials">Preference value for display purposes.</param>
        /// <param name="excludeFloorPreferences">Preference value for display purposes.</param>
        /// <param name="excludeAdvanceCheckedIn">Indicates to exclude Advance Checked In Reservations from search result.</param>
        /// <param name="playerId">Player ID associated to the reservation.</param>
        /// <param name="gamingBalanceFrom">Balance from.</param>
        /// <param name="gamingBalanceTo">Balance to.</param>
        /// <param name="compAccountingBalanceFrom">Comp Balance From</param>
        /// <param name="compAccountingBalanceTo">Comp Balance To</param>
        /// <param name="searchTypes">Represents Reservation search type Player Snapshot.</param>
        /// <param name="reservationStatuses">Reservation status type for reservations search.</param>
        /// <param name="transportationCodes">Codes to be searched.</param>
        /// <param name="roomReadyStatuses">Enum to denote the Status of Readiness messages sent to Guest Devices.</param>
        /// <param name="checkoutMessageReceived">Fetches the reservations for which Checkout Message is received.</param>
        /// <param name="optedForCommunication">Fetches the reservations for which reservation communication has been opted.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to the Fetch Reservation Request operation. Based on the criteria, reservation information is returned.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ReservationsDetails>> ExternalSystemsReservationsAsync(string extSystemCode, System.Collections.Generic.IEnumerable<string> externalReferenceList, bool? recentlyAccessed, int? limit, int? offset, SearchType? searchType, System.Collections.Generic.IEnumerable<string> hotelIds, string text, System.DateTimeOffset? arrivalEndDate, System.DateTimeOffset? arrivalStartDate, System.DateTimeOffset? departureEndDate, System.DateTimeOffset? departureStartDate, System.DateTimeOffset? expectedArrivalStartTime, System.DateTimeOffset? expectedArrivalEndTime, System.DateTimeOffset? expectedReturnEndTime, System.DateTimeOffset? expectedReturnStartTime, System.Collections.Generic.IEnumerable<string> companyNames, System.Collections.Generic.IEnumerable<string> travelAgentIds, System.Collections.Generic.IEnumerable<string> companyIds, System.Collections.Generic.IEnumerable<string> sourceIds, System.Collections.Generic.IEnumerable<string> contactIds, System.Collections.Generic.IEnumerable<string> groupIds, System.Collections.Generic.IEnumerable<string> billingContactIds, System.Collections.Generic.IEnumerable<string> profileIds, string membershipCardNumber, System.Collections.Generic.IEnumerable<string> membershipLevels, System.Collections.Generic.IEnumerable<string> membershipTypes, string surname, string givenName, bool? anyVIPStatus, System.Collections.Generic.IEnumerable<string> vipCodes, string guaranteeCode, string paymentMethod, bool? discountApplied, System.Collections.Generic.IEnumerable<string> user, string createdBy, System.Collections.Generic.IEnumerable<string> cancelledByList, System.DateTimeOffset? cancelledOn, System.Collections.Generic.IEnumerable<string> ratePlanCodes, System.Collections.Generic.IEnumerable<string> sourceCodes, System.Collections.Generic.IEnumerable<string> marketCodes, bool? excludeBlockReservations, string blockName, System.Collections.Generic.IEnumerable<string> blockIds, System.Collections.Generic.IEnumerable<string> blockCodes, string customReference, string recordLocator, System.Collections.Generic.IEnumerable<Anonymous> orderBy, System.Collections.Generic.IEnumerable<Anonymous2> sortOrder, bool? roomAssignedOnly, bool? roomUnassignedOnly, string roomId, System.Collections.Generic.IEnumerable<string> roomType, System.Collections.Generic.IEnumerable<string> roomFeatures, System.Collections.Generic.IEnumerable<string> roomSpecials, string roomSmokingPreference, System.Collections.Generic.IEnumerable<string> roomFloorPreferences, System.Collections.Generic.IEnumerable<Anonymous3> housekeepingRoomStatuses, System.Collections.Generic.IEnumerable<string> roomClasses, string roomRangeFrom, string roomRangeTo, string communication, System.Collections.Generic.IEnumerable<Anonymous4> fetchInstructions, bool? allowPreRegistration, bool? hasDepositBalance, bool? hasOpenBalance, bool? hasOpenFolio, bool? includeScheduledCheckOut, bool? linkedOnly, bool? unlinkedOnly, bool? actualArrivals, bool? actualDepartures, bool? complimentaryReservations, bool? dayOfArrivalCancels, bool? dayUse, bool? earlyDepartures, bool? expectedArrivals, bool? expectedDepartures, bool? extendedStays, bool? houseUseReservations, bool? stayovers, System.DateTimeOffset? stayDate, string roomRoutingId, bool? excludePseudoRoomReservations, System.Collections.Generic.IEnumerable<string> excludeReservationIds, System.Collections.Generic.IEnumerable<string> excludeVIPStatusCodes, System.Collections.Generic.IEnumerable<string> excludeSpecials, System.Collections.Generic.IEnumerable<string> excludeFloorPreferences, bool? excludeAdvanceCheckedIn, string playerId, double? gamingBalanceFrom, double? gamingBalanceTo, double? compAccountingBalanceFrom, double? compAccountingBalanceTo, System.Collections.Generic.IEnumerable<Anonymous5> searchTypes, System.Collections.Generic.IEnumerable<Anonymous6> reservationStatuses, System.Collections.Generic.IEnumerable<string> transportationCodes, System.Collections.Generic.IEnumerable<Anonymous7> roomReadyStatuses, bool? checkoutMessageReceived, bool? optedForCommunication, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (extSystemCode == null)
                throw new System.ArgumentNullException("extSystemCode");

            if (externalReferenceList == null)
                throw new System.ArgumentNullException("externalReferenceList");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalSystems/{extSystemCode}/reservations?");
            urlBuilder_.Replace("{extSystemCode}", System.Uri.EscapeDataString(ConvertToString(extSystemCode, System.Globalization.CultureInfo.InvariantCulture)));
            foreach (var item_ in externalReferenceList) { urlBuilder_.Append(System.Uri.EscapeDataString("externalReferenceList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (recentlyAccessed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recentlyAccessed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recentlyAccessed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hotelIds != null)
            {
                foreach (var item_ in hotelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("hotelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (text != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("text") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalEndDate") + "=").Append(System.Uri.EscapeDataString(arrivalEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalStartDate") + "=").Append(System.Uri.EscapeDataString(arrivalStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (departureEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("departureEndDate") + "=").Append(System.Uri.EscapeDataString(departureEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (departureStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("departureStartDate") + "=").Append(System.Uri.EscapeDataString(departureStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivalStartTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivalStartTime") + "=").Append(System.Uri.EscapeDataString(expectedArrivalStartTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivalEndTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivalEndTime") + "=").Append(System.Uri.EscapeDataString(expectedArrivalEndTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedReturnEndTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedReturnEndTime") + "=").Append(System.Uri.EscapeDataString(expectedReturnEndTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedReturnStartTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedReturnStartTime") + "=").Append(System.Uri.EscapeDataString(expectedReturnStartTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyNames != null)
            {
                foreach (var item_ in companyNames) { urlBuilder_.Append(System.Uri.EscapeDataString("companyNames") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (travelAgentIds != null)
            {
                foreach (var item_ in travelAgentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("travelAgentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (companyIds != null)
            {
                foreach (var item_ in companyIds) { urlBuilder_.Append(System.Uri.EscapeDataString("companyIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sourceIds != null)
            {
                foreach (var item_ in sourceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sourceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (contactIds != null)
            {
                foreach (var item_ in contactIds) { urlBuilder_.Append(System.Uri.EscapeDataString("contactIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (groupIds != null)
            {
                foreach (var item_ in groupIds) { urlBuilder_.Append(System.Uri.EscapeDataString("groupIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (billingContactIds != null)
            {
                foreach (var item_ in billingContactIds) { urlBuilder_.Append(System.Uri.EscapeDataString("billingContactIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (profileIds != null)
            {
                foreach (var item_ in profileIds) { urlBuilder_.Append(System.Uri.EscapeDataString("profileIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (membershipCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("membershipCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(membershipCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (membershipLevels != null)
            {
                foreach (var item_ in membershipLevels) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipLevels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (membershipTypes != null)
            {
                foreach (var item_ in membershipTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (surname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("surname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(surname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (givenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("givenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(givenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (anyVIPStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("anyVIPStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(anyVIPStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vipCodes != null)
            {
                foreach (var item_ in vipCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("vipCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (guaranteeCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("guaranteeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(guaranteeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (discountApplied != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("discountApplied") + "=").Append(System.Uri.EscapeDataString(ConvertToString(discountApplied, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user != null)
            {
                foreach (var item_ in user) { urlBuilder_.Append(System.Uri.EscapeDataString("user") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (createdBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cancelledByList != null)
            {
                foreach (var item_ in cancelledByList) { urlBuilder_.Append(System.Uri.EscapeDataString("cancelledByList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cancelledOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cancelledOn") + "=").Append(System.Uri.EscapeDataString(cancelledOn.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ratePlanCodes != null)
            {
                foreach (var item_ in ratePlanCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sourceCodes != null)
            {
                foreach (var item_ in sourceCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sourceCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketCodes != null)
            {
                foreach (var item_ in marketCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("marketCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeBlockReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeBlockReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeBlockReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("blockName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(blockName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockIds != null)
            {
                foreach (var item_ in blockIds) { urlBuilder_.Append(System.Uri.EscapeDataString("blockIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (blockCodes != null)
            {
                foreach (var item_ in blockCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("blockCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customReference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customReference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customReference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recordLocator != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recordLocator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recordLocator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sortOrder != null)
            {
                foreach (var item_ in sortOrder) { urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomAssignedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomAssignedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomAssignedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomUnassignedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomUnassignedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomUnassignedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomType != null)
            {
                foreach (var item_ in roomType) { urlBuilder_.Append(System.Uri.EscapeDataString("roomType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomFeatures != null)
            {
                foreach (var item_ in roomFeatures) { urlBuilder_.Append(System.Uri.EscapeDataString("roomFeatures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomSpecials != null)
            {
                foreach (var item_ in roomSpecials) { urlBuilder_.Append(System.Uri.EscapeDataString("roomSpecials") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomSmokingPreference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomSmokingPreference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomSmokingPreference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomFloorPreferences != null)
            {
                foreach (var item_ in roomFloorPreferences) { urlBuilder_.Append(System.Uri.EscapeDataString("roomFloorPreferences") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (housekeepingRoomStatuses != null)
            {
                foreach (var item_ in housekeepingRoomStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("housekeepingRoomStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomClasses != null)
            {
                foreach (var item_ in roomClasses) { urlBuilder_.Append(System.Uri.EscapeDataString("roomClasses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomRangeFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRangeFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRangeFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomRangeTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRangeTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRangeTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (communication != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("communication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (allowPreRegistration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("allowPreRegistration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(allowPreRegistration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDepositBalance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasDepositBalance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasDepositBalance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasOpenBalance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasOpenBalance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasOpenBalance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasOpenFolio != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasOpenFolio") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasOpenFolio, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeScheduledCheckOut != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeScheduledCheckOut") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeScheduledCheckOut, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (linkedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("linkedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(linkedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unlinkedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unlinkedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unlinkedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (actualArrivals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("actualArrivals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(actualArrivals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (actualDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("actualDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(actualDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (complimentaryReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("complimentaryReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(complimentaryReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dayOfArrivalCancels != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dayOfArrivalCancels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dayOfArrivalCancels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dayUse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dayUse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dayUse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (earlyDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("earlyDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(earlyDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expectedArrivals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expectedDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (extendedStays != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("extendedStays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(extendedStays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (houseUseReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("houseUseReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(houseUseReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stayovers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stayovers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stayovers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stayDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stayDate") + "=").Append(System.Uri.EscapeDataString(stayDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomRoutingId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRoutingId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRoutingId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludePseudoRoomReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludePseudoRoomReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludePseudoRoomReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeReservationIds != null)
            {
                foreach (var item_ in excludeReservationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeReservationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeVIPStatusCodes != null)
            {
                foreach (var item_ in excludeVIPStatusCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeVIPStatusCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeSpecials != null)
            {
                foreach (var item_ in excludeSpecials) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeSpecials") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeFloorPreferences != null)
            {
                foreach (var item_ in excludeFloorPreferences) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeFloorPreferences") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeAdvanceCheckedIn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeAdvanceCheckedIn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeAdvanceCheckedIn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (playerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("playerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(playerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gamingBalanceFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gamingBalanceFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gamingBalanceFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gamingBalanceTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gamingBalanceTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gamingBalanceTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (compAccountingBalanceFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("compAccountingBalanceFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(compAccountingBalanceFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (compAccountingBalanceTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("compAccountingBalanceTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(compAccountingBalanceTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchTypes != null)
            {
                foreach (var item_ in searchTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("searchTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (reservationStatuses != null)
            {
                foreach (var item_ in reservationStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("reservationStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (transportationCodes != null)
            {
                foreach (var item_ in transportationCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("transportationCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomReadyStatuses != null)
            {
                foreach (var item_ in roomReadyStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("roomReadyStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (checkoutMessageReceived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("checkoutMessageReceived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(checkoutMessageReceived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (optedForCommunication != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("optedForCommunication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(optedForCommunication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReservationsDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ReservationsDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("ExternalSystemReservations not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Reservation for a Block
        /// </summary>
        /// <param name="blockId">Unique OPERA internal ID for the block.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is created.</param>
        /// <param name="createReservation">Request object to create reservations. Includes instructions for information which needs to be returned.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsBlocksReservationsAsync(string blockId, string hotelId, CreateReservation2 createReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsBlocksReservationsAsync(blockId, hotelId, createReservation, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Reservation for a Block
        /// </summary>
        /// <param name="blockId">Unique OPERA internal ID for the block.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is created.</param>
        /// <param name="createReservation">Request object to create reservations. Includes instructions for information which needs to be returned.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsBlocksReservationsAsync(string blockId, string hotelId, CreateReservation2 createReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (blockId == null)
                throw new System.ArgumentNullException("blockId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (createReservation == null)
                throw new System.ArgumentNullException("createReservation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/blocks/{blockId}/reservations");
            urlBuilder_.Replace("{blockId}", System.Uri.EscapeDataString(ConvertToString(blockId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createReservation, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Status>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Combine Share Reservations
        /// </summary>
        /// <param name="reservationExternalId">External reservation ID.</param>
        /// <param name="externalSystemCode">Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="combineShareReservations">Request to combine sharer reservations. This request requires a Reservation Name Id(Joining to) and a Joining Reservation Id</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response for the combine share reservation request. Based on the request, this will return all sharer reservations including the request reservation.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<CombineShareReservationsDetails>> HotelsExternalSystemsReservationsSharesAsync(string reservationExternalId, string externalSystemCode, string hotelId, CombineShareReservations combineShareReservations, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsExternalSystemsReservationsSharesAsync(reservationExternalId, externalSystemCode, hotelId, combineShareReservations, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Combine Share Reservations
        /// </summary>
        /// <param name="reservationExternalId">External reservation ID.</param>
        /// <param name="externalSystemCode">Code to identify the external system from which the request is coming. This is the ExternalSystem ID used to exchange information between OPERA and the external system.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="combineShareReservations">Request to combine sharer reservations. This request requires a Reservation Name Id(Joining to) and a Joining Reservation Id</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response for the combine share reservation request. Based on the request, this will return all sharer reservations including the request reservation.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<CombineShareReservationsDetails>> HotelsExternalSystemsReservationsSharesAsync(string reservationExternalId, string externalSystemCode, string hotelId, CombineShareReservations combineShareReservations, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationExternalId == null)
                throw new System.ArgumentNullException("reservationExternalId");

            if (externalSystemCode == null)
                throw new System.ArgumentNullException("externalSystemCode");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (combineShareReservations == null)
                throw new System.ArgumentNullException("combineShareReservations");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares");
            urlBuilder_.Replace("{reservationExternalId}", System.Uri.EscapeDataString(ConvertToString(reservationExternalId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{externalSystemCode}", System.Uri.EscapeDataString(ConvertToString(externalSystemCode, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(combineShareReservations, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CombineShareReservationsDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<CombineShareReservationsDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Reservations for a hotel
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="recentlyAccessed">Mark this reservation as recently accessed.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="offset">Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.</param>
        /// <param name="searchType">Represents Reservation search type Player Snapshot.</param>
        /// <param name="text">Free form text field for searching all reservation fields</param>
        /// <param name="reservationIdList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="confirmationNumberList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="cancellationNumberList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalReferenceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalSystemCodes">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="arrivalEndDate">The ending value of the date range.</param>
        /// <param name="arrivalStartDate">The starting value of the date range.</param>
        /// <param name="departureEndDate">The ending value of the date range.</param>
        /// <param name="departureStartDate">The starting value of the date range.</param>
        /// <param name="stayOnStartDate">The starting value of the date range.</param>
        /// <param name="createdOnStartDate">The starting value of the date range.</param>
        /// <param name="expectedArrivalEndTime">The ending value of the time span.</param>
        /// <param name="expectedArrivalStartTime">The starting value of the time span.</param>
        /// <param name="expectedReturnEndTime">The ending value of the time span.</param>
        /// <param name="expectedReturnStartTime">The starting value of the time span.</param>
        /// <param name="companyNames">Attached profile name</param>
        /// <param name="sourceNames">Attached profile name</param>
        /// <param name="travelAgentNames">Attached profile name</param>
        /// <param name="groupNames">Attached profile name</param>
        /// <param name="travelAgentIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="companyIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="sourceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="contactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="groupIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="billingContactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="profileId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="membershipCardNumber">Membership ID criteria.</param>
        /// <param name="surname">Family name, last name.</param>
        /// <param name="givenName">Given name, first name or names</param>
        /// <param name="anyVIPStatus">VIP status of the customer.</param>
        /// <param name="vipCodes">VIP status of the customer.</param>
        /// <param name="guaranteeCode">Fetches the reservation having Guarantee Code(Reservation Type) supplied here.</param>
        /// <param name="paymentMethod">Fetches the reservation having method of payment supplied here.</param>
        /// <param name="discountApplied">Fetches the reservation for which discount is applied</param>
        /// <param name="createdBy">Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.</param>
        /// <param name="cancelledByList">Fetches reservations cancelled by list of users.</param>
        /// <param name="cancelledOn">Fetches the reservations which are cancelled on a specific date.</param>
        /// <param name="excludeBlockReservations">If true the search result will exclude the blocks reservations.</param>
        /// <param name="blockCriteriaHotelCode">The Hotel Code of the Block.</param>
        /// <param name="blockName">The Name of the block that is attached to the reservation.</param>
        /// <param name="blockIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="blockCodes">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="customReference">Custom reference</param>
        /// <param name="recordLocator">GDS Record Locator for reservation.</param>
        /// <param name="roomAssignedOnly">Indicator to query reservations which have a room number assigned.</param>
        /// <param name="roomUnassignedOnly">Indicator to query reservations which does not have a room number assigned.</param>
        /// <param name="roomId">Room number of the reservation to search by.</param>
        /// <param name="roomType">Room Type.</param>
        /// <param name="roomFeatures">A code representing a room feature.</param>
        /// <param name="roomSpecials">Preference value for display purposes.</param>
        /// <param name="roomSmokingPreference">Preference value for display purposes.</param>
        /// <param name="roomFloorPreferences">Preference value for display purposes.</param>
        /// <param name="housekeepingRoomStatuses">Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.</param>
        /// <param name="communication">Filter by the last digits of a reservation's phone number.</param>
        /// <param name="fetchInstructions">Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.</param>
        /// <param name="allowedReservationActions">Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.</param>
        /// <param name="allowPreRegistration">Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.</param>
        /// <param name="excludeNoPost">Indicates that reservations with No Post flag should not be expected from the result.</param>
        /// <param name="excludePMRooms">Indicates that reservations with PM room type should not be expected from the result.</param>
        /// <param name="hasDepositBalance">Indicates that only reservations with deposit balance should be expected from the result.</param>
        /// <param name="hasOpenBalance">Indicates that only reservations with open balance should be expected from the result.</param>
        /// <param name="hasOpenFolio">Indicates that only reservations with open folio should be expected from the result.</param>
        /// <param name="includeScheduledCheckOut">Criteria that indicates whether to scheduled checkouts or not.</param>
        /// <param name="linkedOnly">Indicates that only linked reservations should be expected from the result.</param>
        /// <param name="unlinkedOnly">Indicates that only unlinked reservations should be expected from the result.</param>
        /// <param name="actualArrivals">Indicates if reservations which have already arrived on the Search Date is required.</param>
        /// <param name="actualDepartures">Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.</param>
        /// <param name="complimentaryReservations">Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="dayOfArrivalCancels">Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.</param>
        /// <param name="dayUse">Indicates if reservations which are day use reservation on the Search Date, is required.</param>
        /// <param name="earlyDepartures">Indicates if reservations which checked out early on the Search Date, is required.</param>
        /// <param name="expectedArrivals">Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.</param>
        /// <param name="expectedDepartures">Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.</param>
        /// <param name="extendedStays">Indicates if reservations which have extended their stays on the Search Date, is required.</param>
        /// <param name="houseUseReservations">Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="stayovers">Indicates if reservations which are StayOvers on the Search Date, is required.</param>
        /// <param name="stayDate">Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.</param>
        /// <param name="roomRoutingId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="periodicFolio">Periodic folio type.</param>
        /// <param name="folioSettlementTypes">Comma-delimited list of Folio Settlement Type codes.</param>
        /// <param name="defaultDays">Use the Number of Days For Settlement, defined for the Reservation.</param>
        /// <param name="excludePseudoRoomReservations">Indicates to exclude Pseudo room reservations.</param>
        /// <param name="excludeReservationIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludeVIPStatusCodes">VIP status of the customer.</param>
        /// <param name="excludeSpecials">Preference value for display purposes.</param>
        /// <param name="excludeFloorPreferences">Preference value for display purposes.</param>
        /// <param name="excludeAdvanceCheckedIn">Indicates to exclude Advance Checked In Reservations from search result.</param>
        /// <param name="playerId">Player ID associated to the reservation.</param>
        /// <param name="gamingBalanceFrom">Balance from.</param>
        /// <param name="gamingBalanceTo">Balance to.</param>
        /// <param name="compAccountingBalanceFrom">Comp Balance From</param>
        /// <param name="compAccountingBalanceTo">Comp Balance To</param>
        /// <param name="searchTypes">Represents Reservation search type Player Snapshot.</param>
        /// <param name="reservationStatuses">Reservation status type for reservations search.</param>
        /// <param name="transportationCodes">Codes to be searched.</param>
        /// <param name="roomReadyStatuses">Enum to denote the Status of Readiness messages sent to Guest Devices.</param>
        /// <param name="checkoutMessageReceived">Fetches the reservations for which Checkout Message is received.</param>
        /// <param name="optedForCommunication">Fetches the reservations for which reservation communication has been opted.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to the Fetch Reservation Request operation. Based on the criteria, reservation information is returned.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ReservationsDetails>> HotelsReservationsGetAsync(string hotelId, bool? recentlyAccessed, int? limit, int? offset, SearchType2? searchType, string text, System.Collections.Generic.IEnumerable<string> reservationIdList, System.Collections.Generic.IEnumerable<string> confirmationNumberList, System.Collections.Generic.IEnumerable<string> cancellationNumberList, System.Collections.Generic.IEnumerable<string> externalReferenceIds, System.Collections.Generic.IEnumerable<string> externalSystemCodes, System.DateTimeOffset? arrivalEndDate, System.DateTimeOffset? arrivalStartDate, System.DateTimeOffset? departureEndDate, System.DateTimeOffset? departureStartDate, System.DateTimeOffset? stayOnStartDate, System.DateTimeOffset? createdOnStartDate, System.DateTimeOffset? expectedArrivalEndTime, System.DateTimeOffset? expectedArrivalStartTime, System.DateTimeOffset? expectedReturnEndTime, System.DateTimeOffset? expectedReturnStartTime, System.Collections.Generic.IEnumerable<string> companyNames, System.Collections.Generic.IEnumerable<string> sourceNames, System.Collections.Generic.IEnumerable<string> travelAgentNames, System.Collections.Generic.IEnumerable<string> groupNames, System.Collections.Generic.IEnumerable<string> travelAgentIds, System.Collections.Generic.IEnumerable<string> companyIds, System.Collections.Generic.IEnumerable<string> sourceIds, System.Collections.Generic.IEnumerable<string> contactIds, System.Collections.Generic.IEnumerable<string> groupIds, System.Collections.Generic.IEnumerable<string> billingContactIds, string profileId, string membershipCardNumber, System.Collections.Generic.IEnumerable<string> membershipLevels, System.Collections.Generic.IEnumerable<string> membershipTypes, string surname, string givenName, bool? anyVIPStatus, System.Collections.Generic.IEnumerable<string> vipCodes, string guaranteeCode, string paymentMethod, bool? discountApplied, System.Collections.Generic.IEnumerable<string> user, string createdBy, System.Collections.Generic.IEnumerable<string> cancelledByList, System.DateTimeOffset? cancelledOn, System.Collections.Generic.IEnumerable<string> ratePlanCodes, System.Collections.Generic.IEnumerable<string> sourceCodes, System.Collections.Generic.IEnumerable<string> marketCodes, bool? excludeBlockReservations, string blockCriteriaHotelCode, string blockName, System.Collections.Generic.IEnumerable<string> blockIds, System.Collections.Generic.IEnumerable<string> blockCodes, string customReference, string recordLocator, System.Collections.Generic.IEnumerable<Anonymous8> orderBy, System.Collections.Generic.IEnumerable<Anonymous9> sortOrder, bool? roomAssignedOnly, bool? roomUnassignedOnly, string roomId, System.Collections.Generic.IEnumerable<string> roomType, System.Collections.Generic.IEnumerable<string> roomFeatures, System.Collections.Generic.IEnumerable<string> roomSpecials, string roomSmokingPreference, System.Collections.Generic.IEnumerable<string> roomFloorPreferences, System.Collections.Generic.IEnumerable<Anonymous10> housekeepingRoomStatuses, System.Collections.Generic.IEnumerable<string> roomClasses, string roomRangeFrom, string roomRangeTo, string communication, System.Collections.Generic.IEnumerable<Anonymous11> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous12> allowedReservationActions, bool? allowPreRegistration, bool? excludeNoPost, bool? excludePMRooms, bool? hasDepositBalance, bool? hasOpenBalance, bool? hasOpenFolio, bool? includeScheduledCheckOut, bool? linkedOnly, bool? unlinkedOnly, bool? actualArrivals, bool? actualDepartures, bool? complimentaryReservations, bool? dayOfArrivalCancels, bool? dayUse, bool? earlyDepartures, bool? expectedArrivals, bool? expectedDepartures, bool? extendedStays, bool? houseUseReservations, bool? stayovers, System.DateTimeOffset? stayDate, string roomRoutingId, PeriodicFolio? periodicFolio, string folioSettlementTypes, bool? defaultDays, bool? excludePseudoRoomReservations, System.Collections.Generic.IEnumerable<string> excludeReservationIds, System.Collections.Generic.IEnumerable<string> excludeVIPStatusCodes, System.Collections.Generic.IEnumerable<string> excludeSpecials, System.Collections.Generic.IEnumerable<string> excludeFloorPreferences, bool? excludeAdvanceCheckedIn, string playerId, double? gamingBalanceFrom, double? gamingBalanceTo, double? compAccountingBalanceFrom, double? compAccountingBalanceTo, System.Collections.Generic.IEnumerable<Anonymous13> searchTypes, System.Collections.Generic.IEnumerable<Anonymous14> reservationStatuses, System.Collections.Generic.IEnumerable<string> transportationCodes, System.Collections.Generic.IEnumerable<Anonymous15> roomReadyStatuses, bool? checkoutMessageReceived, bool? optedForCommunication, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsGetAsync(hotelId, recentlyAccessed, limit, offset, searchType, text, reservationIdList, confirmationNumberList, cancellationNumberList, externalReferenceIds, externalSystemCodes, arrivalEndDate, arrivalStartDate, departureEndDate, departureStartDate, stayOnStartDate, createdOnStartDate, expectedArrivalEndTime, expectedArrivalStartTime, expectedReturnEndTime, expectedReturnStartTime, companyNames, sourceNames, travelAgentNames, groupNames, travelAgentIds, companyIds, sourceIds, contactIds, groupIds, billingContactIds, profileId, membershipCardNumber, membershipLevels, membershipTypes, surname, givenName, anyVIPStatus, vipCodes, guaranteeCode, paymentMethod, discountApplied, user, createdBy, cancelledByList, cancelledOn, ratePlanCodes, sourceCodes, marketCodes, excludeBlockReservations, blockCriteriaHotelCode, blockName, blockIds, blockCodes, customReference, recordLocator, orderBy, sortOrder, roomAssignedOnly, roomUnassignedOnly, roomId, roomType, roomFeatures, roomSpecials, roomSmokingPreference, roomFloorPreferences, housekeepingRoomStatuses, roomClasses, roomRangeFrom, roomRangeTo, communication, fetchInstructions, allowedReservationActions, allowPreRegistration, excludeNoPost, excludePMRooms, hasDepositBalance, hasOpenBalance, hasOpenFolio, includeScheduledCheckOut, linkedOnly, unlinkedOnly, actualArrivals, actualDepartures, complimentaryReservations, dayOfArrivalCancels, dayUse, earlyDepartures, expectedArrivals, expectedDepartures, extendedStays, houseUseReservations, stayovers, stayDate, roomRoutingId, periodicFolio, folioSettlementTypes, defaultDays, excludePseudoRoomReservations, excludeReservationIds, excludeVIPStatusCodes, excludeSpecials, excludeFloorPreferences, excludeAdvanceCheckedIn, playerId, gamingBalanceFrom, gamingBalanceTo, compAccountingBalanceFrom, compAccountingBalanceTo, searchTypes, reservationStatuses, transportationCodes, roomReadyStatuses, checkoutMessageReceived, optedForCommunication, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Reservations for a hotel
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="recentlyAccessed">Mark this reservation as recently accessed.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="offset">Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.</param>
        /// <param name="searchType">Represents Reservation search type Player Snapshot.</param>
        /// <param name="text">Free form text field for searching all reservation fields</param>
        /// <param name="reservationIdList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="confirmationNumberList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="cancellationNumberList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalReferenceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalSystemCodes">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="arrivalEndDate">The ending value of the date range.</param>
        /// <param name="arrivalStartDate">The starting value of the date range.</param>
        /// <param name="departureEndDate">The ending value of the date range.</param>
        /// <param name="departureStartDate">The starting value of the date range.</param>
        /// <param name="stayOnStartDate">The starting value of the date range.</param>
        /// <param name="createdOnStartDate">The starting value of the date range.</param>
        /// <param name="expectedArrivalEndTime">The ending value of the time span.</param>
        /// <param name="expectedArrivalStartTime">The starting value of the time span.</param>
        /// <param name="expectedReturnEndTime">The ending value of the time span.</param>
        /// <param name="expectedReturnStartTime">The starting value of the time span.</param>
        /// <param name="companyNames">Attached profile name</param>
        /// <param name="sourceNames">Attached profile name</param>
        /// <param name="travelAgentNames">Attached profile name</param>
        /// <param name="groupNames">Attached profile name</param>
        /// <param name="travelAgentIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="companyIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="sourceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="contactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="groupIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="billingContactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation. API expects CompanyName Query parameter along with the ID to obtain correct results.</param>
        /// <param name="profileId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="membershipCardNumber">Membership ID criteria.</param>
        /// <param name="surname">Family name, last name.</param>
        /// <param name="givenName">Given name, first name or names</param>
        /// <param name="anyVIPStatus">VIP status of the customer.</param>
        /// <param name="vipCodes">VIP status of the customer.</param>
        /// <param name="guaranteeCode">Fetches the reservation having Guarantee Code(Reservation Type) supplied here.</param>
        /// <param name="paymentMethod">Fetches the reservation having method of payment supplied here.</param>
        /// <param name="discountApplied">Fetches the reservation for which discount is applied</param>
        /// <param name="createdBy">Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.</param>
        /// <param name="cancelledByList">Fetches reservations cancelled by list of users.</param>
        /// <param name="cancelledOn">Fetches the reservations which are cancelled on a specific date.</param>
        /// <param name="excludeBlockReservations">If true the search result will exclude the blocks reservations.</param>
        /// <param name="blockCriteriaHotelCode">The Hotel Code of the Block.</param>
        /// <param name="blockName">The Name of the block that is attached to the reservation.</param>
        /// <param name="blockIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="blockCodes">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="customReference">Custom reference</param>
        /// <param name="recordLocator">GDS Record Locator for reservation.</param>
        /// <param name="roomAssignedOnly">Indicator to query reservations which have a room number assigned.</param>
        /// <param name="roomUnassignedOnly">Indicator to query reservations which does not have a room number assigned.</param>
        /// <param name="roomId">Room number of the reservation to search by.</param>
        /// <param name="roomType">Room Type.</param>
        /// <param name="roomFeatures">A code representing a room feature.</param>
        /// <param name="roomSpecials">Preference value for display purposes.</param>
        /// <param name="roomSmokingPreference">Preference value for display purposes.</param>
        /// <param name="roomFloorPreferences">Preference value for display purposes.</param>
        /// <param name="housekeepingRoomStatuses">Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.</param>
        /// <param name="communication">Filter by the last digits of a reservation's phone number.</param>
        /// <param name="fetchInstructions">Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.</param>
        /// <param name="allowedReservationActions">Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.</param>
        /// <param name="allowPreRegistration">Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.</param>
        /// <param name="excludeNoPost">Indicates that reservations with No Post flag should not be expected from the result.</param>
        /// <param name="excludePMRooms">Indicates that reservations with PM room type should not be expected from the result.</param>
        /// <param name="hasDepositBalance">Indicates that only reservations with deposit balance should be expected from the result.</param>
        /// <param name="hasOpenBalance">Indicates that only reservations with open balance should be expected from the result.</param>
        /// <param name="hasOpenFolio">Indicates that only reservations with open folio should be expected from the result.</param>
        /// <param name="includeScheduledCheckOut">Criteria that indicates whether to scheduled checkouts or not.</param>
        /// <param name="linkedOnly">Indicates that only linked reservations should be expected from the result.</param>
        /// <param name="unlinkedOnly">Indicates that only unlinked reservations should be expected from the result.</param>
        /// <param name="actualArrivals">Indicates if reservations which have already arrived on the Search Date is required.</param>
        /// <param name="actualDepartures">Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.</param>
        /// <param name="complimentaryReservations">Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="dayOfArrivalCancels">Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.</param>
        /// <param name="dayUse">Indicates if reservations which are day use reservation on the Search Date, is required.</param>
        /// <param name="earlyDepartures">Indicates if reservations which checked out early on the Search Date, is required.</param>
        /// <param name="expectedArrivals">Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.</param>
        /// <param name="expectedDepartures">Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.</param>
        /// <param name="extendedStays">Indicates if reservations which have extended their stays on the Search Date, is required.</param>
        /// <param name="houseUseReservations">Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="stayovers">Indicates if reservations which are StayOvers on the Search Date, is required.</param>
        /// <param name="stayDate">Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.</param>
        /// <param name="roomRoutingId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="periodicFolio">Periodic folio type.</param>
        /// <param name="folioSettlementTypes">Comma-delimited list of Folio Settlement Type codes.</param>
        /// <param name="defaultDays">Use the Number of Days For Settlement, defined for the Reservation.</param>
        /// <param name="excludePseudoRoomReservations">Indicates to exclude Pseudo room reservations.</param>
        /// <param name="excludeReservationIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludeVIPStatusCodes">VIP status of the customer.</param>
        /// <param name="excludeSpecials">Preference value for display purposes.</param>
        /// <param name="excludeFloorPreferences">Preference value for display purposes.</param>
        /// <param name="excludeAdvanceCheckedIn">Indicates to exclude Advance Checked In Reservations from search result.</param>
        /// <param name="playerId">Player ID associated to the reservation.</param>
        /// <param name="gamingBalanceFrom">Balance from.</param>
        /// <param name="gamingBalanceTo">Balance to.</param>
        /// <param name="compAccountingBalanceFrom">Comp Balance From</param>
        /// <param name="compAccountingBalanceTo">Comp Balance To</param>
        /// <param name="searchTypes">Represents Reservation search type Player Snapshot.</param>
        /// <param name="reservationStatuses">Reservation status type for reservations search.</param>
        /// <param name="transportationCodes">Codes to be searched.</param>
        /// <param name="roomReadyStatuses">Enum to denote the Status of Readiness messages sent to Guest Devices.</param>
        /// <param name="checkoutMessageReceived">Fetches the reservations for which Checkout Message is received.</param>
        /// <param name="optedForCommunication">Fetches the reservations for which reservation communication has been opted.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to the Fetch Reservation Request operation. Based on the criteria, reservation information is returned.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ReservationsDetails>> HotelsReservationsGetAsync(string hotelId, bool? recentlyAccessed, int? limit, int? offset, SearchType2? searchType, string text, System.Collections.Generic.IEnumerable<string> reservationIdList, System.Collections.Generic.IEnumerable<string> confirmationNumberList, System.Collections.Generic.IEnumerable<string> cancellationNumberList, System.Collections.Generic.IEnumerable<string> externalReferenceIds, System.Collections.Generic.IEnumerable<string> externalSystemCodes, System.DateTimeOffset? arrivalEndDate, System.DateTimeOffset? arrivalStartDate, System.DateTimeOffset? departureEndDate, System.DateTimeOffset? departureStartDate, System.DateTimeOffset? stayOnStartDate, System.DateTimeOffset? createdOnStartDate, System.DateTimeOffset? expectedArrivalEndTime, System.DateTimeOffset? expectedArrivalStartTime, System.DateTimeOffset? expectedReturnEndTime, System.DateTimeOffset? expectedReturnStartTime, System.Collections.Generic.IEnumerable<string> companyNames, System.Collections.Generic.IEnumerable<string> sourceNames, System.Collections.Generic.IEnumerable<string> travelAgentNames, System.Collections.Generic.IEnumerable<string> groupNames, System.Collections.Generic.IEnumerable<string> travelAgentIds, System.Collections.Generic.IEnumerable<string> companyIds, System.Collections.Generic.IEnumerable<string> sourceIds, System.Collections.Generic.IEnumerable<string> contactIds, System.Collections.Generic.IEnumerable<string> groupIds, System.Collections.Generic.IEnumerable<string> billingContactIds, string profileId, string membershipCardNumber, System.Collections.Generic.IEnumerable<string> membershipLevels, System.Collections.Generic.IEnumerable<string> membershipTypes, string surname, string givenName, bool? anyVIPStatus, System.Collections.Generic.IEnumerable<string> vipCodes, string guaranteeCode, string paymentMethod, bool? discountApplied, System.Collections.Generic.IEnumerable<string> user, string createdBy, System.Collections.Generic.IEnumerable<string> cancelledByList, System.DateTimeOffset? cancelledOn, System.Collections.Generic.IEnumerable<string> ratePlanCodes, System.Collections.Generic.IEnumerable<string> sourceCodes, System.Collections.Generic.IEnumerable<string> marketCodes, bool? excludeBlockReservations, string blockCriteriaHotelCode, string blockName, System.Collections.Generic.IEnumerable<string> blockIds, System.Collections.Generic.IEnumerable<string> blockCodes, string customReference, string recordLocator, System.Collections.Generic.IEnumerable<Anonymous8> orderBy, System.Collections.Generic.IEnumerable<Anonymous9> sortOrder, bool? roomAssignedOnly, bool? roomUnassignedOnly, string roomId, System.Collections.Generic.IEnumerable<string> roomType, System.Collections.Generic.IEnumerable<string> roomFeatures, System.Collections.Generic.IEnumerable<string> roomSpecials, string roomSmokingPreference, System.Collections.Generic.IEnumerable<string> roomFloorPreferences, System.Collections.Generic.IEnumerable<Anonymous10> housekeepingRoomStatuses, System.Collections.Generic.IEnumerable<string> roomClasses, string roomRangeFrom, string roomRangeTo, string communication, System.Collections.Generic.IEnumerable<Anonymous11> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous12> allowedReservationActions, bool? allowPreRegistration, bool? excludeNoPost, bool? excludePMRooms, bool? hasDepositBalance, bool? hasOpenBalance, bool? hasOpenFolio, bool? includeScheduledCheckOut, bool? linkedOnly, bool? unlinkedOnly, bool? actualArrivals, bool? actualDepartures, bool? complimentaryReservations, bool? dayOfArrivalCancels, bool? dayUse, bool? earlyDepartures, bool? expectedArrivals, bool? expectedDepartures, bool? extendedStays, bool? houseUseReservations, bool? stayovers, System.DateTimeOffset? stayDate, string roomRoutingId, PeriodicFolio? periodicFolio, string folioSettlementTypes, bool? defaultDays, bool? excludePseudoRoomReservations, System.Collections.Generic.IEnumerable<string> excludeReservationIds, System.Collections.Generic.IEnumerable<string> excludeVIPStatusCodes, System.Collections.Generic.IEnumerable<string> excludeSpecials, System.Collections.Generic.IEnumerable<string> excludeFloorPreferences, bool? excludeAdvanceCheckedIn, string playerId, double? gamingBalanceFrom, double? gamingBalanceTo, double? compAccountingBalanceFrom, double? compAccountingBalanceTo, System.Collections.Generic.IEnumerable<Anonymous13> searchTypes, System.Collections.Generic.IEnumerable<Anonymous14> reservationStatuses, System.Collections.Generic.IEnumerable<string> transportationCodes, System.Collections.Generic.IEnumerable<Anonymous15> roomReadyStatuses, bool? checkoutMessageReceived, bool? optedForCommunication, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations?");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (recentlyAccessed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recentlyAccessed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recentlyAccessed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (text != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("text") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reservationIdList != null)
            {
                foreach (var item_ in reservationIdList) { urlBuilder_.Append(System.Uri.EscapeDataString("reservationIdList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (confirmationNumberList != null)
            {
                foreach (var item_ in confirmationNumberList) { urlBuilder_.Append(System.Uri.EscapeDataString("confirmationNumberList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cancellationNumberList != null)
            {
                foreach (var item_ in cancellationNumberList) { urlBuilder_.Append(System.Uri.EscapeDataString("cancellationNumberList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalReferenceIds != null)
            {
                foreach (var item_ in externalReferenceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("externalReferenceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalSystemCodes != null)
            {
                foreach (var item_ in externalSystemCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("externalSystemCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (arrivalEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalEndDate") + "=").Append(System.Uri.EscapeDataString(arrivalEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalStartDate") + "=").Append(System.Uri.EscapeDataString(arrivalStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (departureEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("departureEndDate") + "=").Append(System.Uri.EscapeDataString(departureEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (departureStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("departureStartDate") + "=").Append(System.Uri.EscapeDataString(departureStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stayOnStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stayOnStartDate") + "=").Append(System.Uri.EscapeDataString(stayOnStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdOnStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdOnStartDate") + "=").Append(System.Uri.EscapeDataString(createdOnStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivalEndTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivalEndTime") + "=").Append(System.Uri.EscapeDataString(expectedArrivalEndTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivalStartTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivalStartTime") + "=").Append(System.Uri.EscapeDataString(expectedArrivalStartTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedReturnEndTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedReturnEndTime") + "=").Append(System.Uri.EscapeDataString(expectedReturnEndTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedReturnStartTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedReturnStartTime") + "=").Append(System.Uri.EscapeDataString(expectedReturnStartTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyNames != null)
            {
                foreach (var item_ in companyNames) { urlBuilder_.Append(System.Uri.EscapeDataString("companyNames") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sourceNames != null)
            {
                foreach (var item_ in sourceNames) { urlBuilder_.Append(System.Uri.EscapeDataString("sourceNames") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (travelAgentNames != null)
            {
                foreach (var item_ in travelAgentNames) { urlBuilder_.Append(System.Uri.EscapeDataString("travelAgentNames") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (groupNames != null)
            {
                foreach (var item_ in groupNames) { urlBuilder_.Append(System.Uri.EscapeDataString("groupNames") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (travelAgentIds != null)
            {
                foreach (var item_ in travelAgentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("travelAgentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (companyIds != null)
            {
                foreach (var item_ in companyIds) { urlBuilder_.Append(System.Uri.EscapeDataString("companyIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sourceIds != null)
            {
                foreach (var item_ in sourceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sourceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (contactIds != null)
            {
                foreach (var item_ in contactIds) { urlBuilder_.Append(System.Uri.EscapeDataString("contactIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (groupIds != null)
            {
                foreach (var item_ in groupIds) { urlBuilder_.Append(System.Uri.EscapeDataString("groupIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (billingContactIds != null)
            {
                foreach (var item_ in billingContactIds) { urlBuilder_.Append(System.Uri.EscapeDataString("billingContactIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (profileId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("profileId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (membershipCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("membershipCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(membershipCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (membershipLevels != null)
            {
                foreach (var item_ in membershipLevels) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipLevels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (membershipTypes != null)
            {
                foreach (var item_ in membershipTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (surname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("surname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(surname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (givenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("givenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(givenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (anyVIPStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("anyVIPStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(anyVIPStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vipCodes != null)
            {
                foreach (var item_ in vipCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("vipCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (guaranteeCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("guaranteeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(guaranteeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (discountApplied != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("discountApplied") + "=").Append(System.Uri.EscapeDataString(ConvertToString(discountApplied, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user != null)
            {
                foreach (var item_ in user) { urlBuilder_.Append(System.Uri.EscapeDataString("user") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (createdBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cancelledByList != null)
            {
                foreach (var item_ in cancelledByList) { urlBuilder_.Append(System.Uri.EscapeDataString("cancelledByList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cancelledOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cancelledOn") + "=").Append(System.Uri.EscapeDataString(cancelledOn.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ratePlanCodes != null)
            {
                foreach (var item_ in ratePlanCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sourceCodes != null)
            {
                foreach (var item_ in sourceCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sourceCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketCodes != null)
            {
                foreach (var item_ in marketCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("marketCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeBlockReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeBlockReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeBlockReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockCriteriaHotelCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("blockCriteriaHotelCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(blockCriteriaHotelCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("blockName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(blockName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockIds != null)
            {
                foreach (var item_ in blockIds) { urlBuilder_.Append(System.Uri.EscapeDataString("blockIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (blockCodes != null)
            {
                foreach (var item_ in blockCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("blockCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customReference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customReference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customReference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recordLocator != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recordLocator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recordLocator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sortOrder != null)
            {
                foreach (var item_ in sortOrder) { urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomAssignedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomAssignedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomAssignedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomUnassignedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomUnassignedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomUnassignedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomType != null)
            {
                foreach (var item_ in roomType) { urlBuilder_.Append(System.Uri.EscapeDataString("roomType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomFeatures != null)
            {
                foreach (var item_ in roomFeatures) { urlBuilder_.Append(System.Uri.EscapeDataString("roomFeatures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomSpecials != null)
            {
                foreach (var item_ in roomSpecials) { urlBuilder_.Append(System.Uri.EscapeDataString("roomSpecials") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomSmokingPreference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomSmokingPreference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomSmokingPreference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomFloorPreferences != null)
            {
                foreach (var item_ in roomFloorPreferences) { urlBuilder_.Append(System.Uri.EscapeDataString("roomFloorPreferences") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (housekeepingRoomStatuses != null)
            {
                foreach (var item_ in housekeepingRoomStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("housekeepingRoomStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomClasses != null)
            {
                foreach (var item_ in roomClasses) { urlBuilder_.Append(System.Uri.EscapeDataString("roomClasses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomRangeFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRangeFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRangeFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomRangeTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRangeTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRangeTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (communication != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("communication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (allowedReservationActions != null)
            {
                foreach (var item_ in allowedReservationActions) { urlBuilder_.Append(System.Uri.EscapeDataString("allowedReservationActions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (allowPreRegistration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("allowPreRegistration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(allowPreRegistration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeNoPost != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeNoPost") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeNoPost, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludePMRooms != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludePMRooms") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludePMRooms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDepositBalance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasDepositBalance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasDepositBalance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasOpenBalance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasOpenBalance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasOpenBalance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasOpenFolio != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasOpenFolio") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasOpenFolio, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeScheduledCheckOut != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeScheduledCheckOut") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeScheduledCheckOut, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (linkedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("linkedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(linkedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unlinkedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unlinkedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unlinkedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (actualArrivals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("actualArrivals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(actualArrivals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (actualDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("actualDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(actualDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (complimentaryReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("complimentaryReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(complimentaryReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dayOfArrivalCancels != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dayOfArrivalCancels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dayOfArrivalCancels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dayUse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dayUse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dayUse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (earlyDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("earlyDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(earlyDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expectedArrivals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expectedDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (extendedStays != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("extendedStays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(extendedStays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (houseUseReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("houseUseReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(houseUseReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stayovers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stayovers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stayovers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stayDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stayDate") + "=").Append(System.Uri.EscapeDataString(stayDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomRoutingId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRoutingId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRoutingId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (periodicFolio != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("periodicFolio") + "=").Append(System.Uri.EscapeDataString(ConvertToString(periodicFolio, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (folioSettlementTypes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("folioSettlementTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(folioSettlementTypes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (defaultDays != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("defaultDays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(defaultDays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludePseudoRoomReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludePseudoRoomReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludePseudoRoomReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeReservationIds != null)
            {
                foreach (var item_ in excludeReservationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeReservationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeVIPStatusCodes != null)
            {
                foreach (var item_ in excludeVIPStatusCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeVIPStatusCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeSpecials != null)
            {
                foreach (var item_ in excludeSpecials) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeSpecials") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeFloorPreferences != null)
            {
                foreach (var item_ in excludeFloorPreferences) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeFloorPreferences") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeAdvanceCheckedIn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeAdvanceCheckedIn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeAdvanceCheckedIn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (playerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("playerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(playerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gamingBalanceFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gamingBalanceFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gamingBalanceFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gamingBalanceTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gamingBalanceTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gamingBalanceTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (compAccountingBalanceFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("compAccountingBalanceFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(compAccountingBalanceFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (compAccountingBalanceTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("compAccountingBalanceTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(compAccountingBalanceTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchTypes != null)
            {
                foreach (var item_ in searchTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("searchTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (reservationStatuses != null)
            {
                foreach (var item_ in reservationStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("reservationStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (transportationCodes != null)
            {
                foreach (var item_ in transportationCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("transportationCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomReadyStatuses != null)
            {
                foreach (var item_ in roomReadyStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("roomReadyStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (checkoutMessageReceived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("checkoutMessageReceived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(checkoutMessageReceived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (optedForCommunication != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("optedForCommunication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(optedForCommunication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    //request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authorization);

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReservationsDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ReservationsDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("HotelReservations not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Reservation
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="createReservation">Request object to create reservations. Includes instructions for information which needs to be returned.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsPostAsync(string hotelId, CreateReservation3 createReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsPostAsync(hotelId, createReservation, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Reservation
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="createReservation">Request object to create reservations. Includes instructions for information which needs to be returned.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsPostAsync(string hotelId, CreateReservation3 createReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (createReservation == null)
                throw new System.ArgumentNullException("createReservation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    //request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authorization);

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                    string serializeObject = Newtonsoft.Json.JsonConvert.SerializeObject(createReservation, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(serializeObject);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Status>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch Reservation Activity Log
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="parameterName">Name of the parameter.</param>
        /// <param name="parameterValue">Value of the parameter.</param>
        /// <param name="searchText">Search text for the user activity log.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for the request for the reservation user activity log.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ActivityLog>> HotelsReservationsActivityLogAsync(string hotelId, int? limit, System.Collections.Generic.IEnumerable<string> parameterName, System.Collections.Generic.IEnumerable<string> parameterValue, string activityGroup, string activityType, string searchText, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsActivityLogAsync(hotelId, limit, parameterName, parameterValue, activityGroup, activityType, searchText, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch Reservation Activity Log
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="parameterName">Name of the parameter.</param>
        /// <param name="parameterValue">Value of the parameter.</param>
        /// <param name="searchText">Search text for the user activity log.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for the request for the reservation user activity log.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ActivityLog>> HotelsReservationsActivityLogAsync(string hotelId, int? limit, System.Collections.Generic.IEnumerable<string> parameterName, System.Collections.Generic.IEnumerable<string> parameterValue, string activityGroup, string activityType, string searchText, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/activityLog?");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (parameterName != null)
            {
                foreach (var item_ in parameterName) { urlBuilder_.Append(System.Uri.EscapeDataString("parameterName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (parameterValue != null)
            {
                foreach (var item_ in parameterValue) { urlBuilder_.Append(System.Uri.EscapeDataString("parameterValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (activityGroup != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("activityGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(activityGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (activityType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("activityType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(activityType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchText != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchText") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchText, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivityLog>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ActivityLog>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("ReservationActivityLog not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Link Reservations
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="linkReservationsCriteria">Request to link a list of reservations with another existing reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsLinkedReservationsPostAsync(string reservationId, string hotelId, LinkReservationsCriteria2 linkReservationsCriteria, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsLinkedReservationsPostAsync(reservationId, hotelId, linkReservationsCriteria, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Link Reservations
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="linkReservationsCriteria">Request to link a list of reservations with another existing reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsLinkedReservationsPostAsync(string reservationId, string hotelId, LinkReservationsCriteria2 linkReservationsCriteria, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (linkReservationsCriteria == null)
                throw new System.ArgumentNullException("linkReservationsCriteria");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/linkedReservations/{reservationId}");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(linkReservationsCriteria, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Status>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Reservation Links
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsLinkedReservationsDeleteAsync(string reservationId, string hotelId, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsLinkedReservationsDeleteAsync(reservationId, hotelId, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Reservation Links
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsLinkedReservationsDeleteAsync(string reservationId, string hotelId, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/linkedReservations/{reservationId}");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Status>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get rate information
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="currencyCode">The code specifying a monetary unit. Use ISO 4217, three alpha code.</param>
        /// <param name="summaryInfo">Flag to indicate if summary information is required.</param>
        /// <param name="adults">Defines the number of Adults.</param>
        /// <param name="children">Defines the number of Children.</param>
        /// <param name="childAge">Age of a child in years.</param>
        /// <param name="bucket1Count">Number of children classified under the first Age Qualifying Group(Child Bucket#1).</param>
        /// <param name="bucket2Count">Number of children classified under the second Age Qualifying Group(Child Bucket#2).</param>
        /// <param name="bucket3Count">Number of children classified under the third Age Qualifying Group(Child Bucket#3).</param>
        /// <param name="bucket4Count">Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).</param>
        /// <param name="bucket5Count">Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).</param>
        /// <param name="detailDate">This field is only required when the criteria is meant for a detailed results. The date for the rate detail is needed.</param>
        /// <param name="blockId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="blockIdType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="id">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="idExtension">Additional identifying value assigned by the creating system.</param>
        /// <param name="idContext">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="type">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="ratePlanCode">Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.</param>
        /// <param name="effectiveRateEnd">The ending value of the date range.</param>
        /// <param name="effectiveRateStart">The starting value of the date range.</param>
        /// <param name="roomType">Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response will either be Summary or Detail type, but not both. See the request for the summary attribute flag.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<RateInfo>> HotelsReservationsRateInfoAsync(string hotelId, string currencyCode, bool? summaryInfo, System.DateTimeOffset? criteriaStartDate, System.DateTimeOffset? criteriaEndDate, int? adults, int? children, System.Collections.Generic.IEnumerable<int> childAge, int? bucket1Count, int? bucket2Count, int? bucket3Count, int? bucket4Count, int? bucket5Count, System.DateTimeOffset? detailDate, string blockId, string blockIdType, string id, int? idExtension, string idContext, string type, string ratePlanCode, System.Collections.Generic.IEnumerable<System.DateTimeOffset> effectiveRateEnd, System.Collections.Generic.IEnumerable<System.DateTimeOffset> effectiveRateStart, string roomType, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsRateInfoAsync(hotelId, currencyCode, summaryInfo, criteriaStartDate, criteriaEndDate, adults, children, childAge, bucket1Count, bucket2Count, bucket3Count, bucket4Count, bucket5Count, detailDate, blockId, blockIdType, id, idExtension, idContext, type, ratePlanCode, effectiveRateEnd, effectiveRateStart, roomType, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get rate information
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="currencyCode">The code specifying a monetary unit. Use ISO 4217, three alpha code.</param>
        /// <param name="summaryInfo">Flag to indicate if summary information is required.</param>
        /// <param name="adults">Defines the number of Adults.</param>
        /// <param name="children">Defines the number of Children.</param>
        /// <param name="childAge">Age of a child in years.</param>
        /// <param name="bucket1Count">Number of children classified under the first Age Qualifying Group(Child Bucket#1).</param>
        /// <param name="bucket2Count">Number of children classified under the second Age Qualifying Group(Child Bucket#2).</param>
        /// <param name="bucket3Count">Number of children classified under the third Age Qualifying Group(Child Bucket#3).</param>
        /// <param name="bucket4Count">Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).</param>
        /// <param name="bucket5Count">Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).</param>
        /// <param name="detailDate">This field is only required when the criteria is meant for a detailed results. The date for the rate detail is needed.</param>
        /// <param name="blockId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="blockIdType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="id">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="idExtension">Additional identifying value assigned by the creating system.</param>
        /// <param name="idContext">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="type">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="ratePlanCode">Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.</param>
        /// <param name="effectiveRateEnd">The ending value of the date range.</param>
        /// <param name="effectiveRateStart">The starting value of the date range.</param>
        /// <param name="roomType">Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response will either be Summary or Detail type, but not both. See the request for the summary attribute flag.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<RateInfo>> HotelsReservationsRateInfoAsync(string hotelId, string currencyCode, bool? summaryInfo, System.DateTimeOffset? criteriaStartDate, System.DateTimeOffset? criteriaEndDate, int? adults, int? children, System.Collections.Generic.IEnumerable<int> childAge, int? bucket1Count, int? bucket2Count, int? bucket3Count, int? bucket4Count, int? bucket5Count, System.DateTimeOffset? detailDate, string blockId, string blockIdType, string id, int? idExtension, string idContext, string type, string ratePlanCode, System.Collections.Generic.IEnumerable<System.DateTimeOffset> effectiveRateEnd, System.Collections.Generic.IEnumerable<System.DateTimeOffset> effectiveRateStart, string roomType, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/rateInfo?");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (summaryInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("summaryInfo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(summaryInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (criteriaStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("criteriaStartDate") + "=").Append(System.Uri.EscapeDataString(criteriaStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (criteriaEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("criteriaEndDate") + "=").Append(System.Uri.EscapeDataString(criteriaEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adults != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adults") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adults, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (children != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("children") + "=").Append(System.Uri.EscapeDataString(ConvertToString(children, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (childAge != null)
            {
                foreach (var item_ in childAge) { urlBuilder_.Append(System.Uri.EscapeDataString("childAge") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (bucket1Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket1Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket1Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bucket2Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket2Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket2Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bucket3Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket3Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket3Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bucket4Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket4Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket4Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bucket5Count != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bucket5Count") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bucket5Count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (detailDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("detailDate") + "=").Append(System.Uri.EscapeDataString(detailDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("blockId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(blockId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockIdType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("blockIdType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(blockIdType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idExtension != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idExtension") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idExtension, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idContext != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idContext") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idContext, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ratePlanCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ratePlanCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (effectiveRateEnd != null)
            {
                foreach (var item_ in effectiveRateEnd) { urlBuilder_.Append(System.Uri.EscapeDataString("effectiveRateEnd") + "=").Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (effectiveRateStart != null)
            {
                foreach (var item_ in effectiveRateStart) { urlBuilder_.Append(System.Uri.EscapeDataString("effectiveRateStart") + "=").Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RateInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<RateInfo>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("RateInfo not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Validate Reservation Change
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="validateReservationChanges">Request to validate reservation changes.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response for validating reservation changes.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ValidateReservationChangesDetails>> HotelsReservationsValidationsAsync(string hotelId, ValidateReservationChanges2 validateReservationChanges, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsValidationsAsync(hotelId, validateReservationChanges, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validate Reservation Change
        /// </summary>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="validateReservationChanges">Request to validate reservation changes.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response for validating reservation changes.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ValidateReservationChangesDetails>> HotelsReservationsValidationsAsync(string hotelId, ValidateReservationChanges2 validateReservationChanges, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (validateReservationChanges == null)
                throw new System.ArgumentNullException("validateReservationChanges");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/validations");
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(validateReservationChanges, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidateReservationChangesDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ValidateReservationChangesDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Reservation by ID
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="fetchInstructions">Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.</param>
        /// <param name="allowedActions">Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Return object to the request for information regarding a reservation.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Reservation>> HotelsReservationsGetAsync(string reservationId, string hotelId, System.Collections.Generic.IEnumerable<Anonymous16> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous17> allowedActions, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsGetAsync(reservationId, hotelId, fetchInstructions, allowedActions, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Reservation by ID
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="fetchInstructions">Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.</param>
        /// <param name="allowedActions">Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Return object to the request for information regarding a reservation.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Reservation>> HotelsReservationsGetAsync(string reservationId, string hotelId, System.Collections.Generic.IEnumerable<Anonymous16> fetchInstructions, System.Collections.Generic.IEnumerable<Anonymous17> allowedActions, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}?");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (allowedActions != null)
            {
                foreach (var item_ in allowedActions) { urlBuilder_.Append(System.Uri.EscapeDataString("allowedActions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Reservation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Reservation>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("Reservation not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Reservation by ID
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="changeReservation">Request method to change a reservations information.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Existing Operations Responses will eventually be modified to be extended from this type.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ChangeReservationDetails>> HotelsReservationsPutAsync(string reservationId, string hotelId, ChangeReservation2 changeReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsPutAsync(reservationId, hotelId, changeReservation, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Reservation by ID
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="changeReservation">Request method to change a reservations information.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Existing Operations Responses will eventually be modified to be extended from this type.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ChangeReservationDetails>> HotelsReservationsPutAsync(string reservationId, string hotelId, ChangeReservation2 changeReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (changeReservation == null)
                throw new System.ArgumentNullException("changeReservation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(changeReservation, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChangeReservationDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ChangeReservationDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reinstate a Reservation
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="reinstateReservation">Overriding the validation check will log the supposed errors in the warnings log if they would fail.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Existing Operations Responses will eventually be modified to be extended from this type.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ReinstateReservationDetails>> HotelsReservationsCancellationsPutAsync(string reservationId, string hotelId, ReinstateReservation reinstateReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsCancellationsPutAsync(reservationId, hotelId, reinstateReservation, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reinstate a Reservation
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="reinstateReservation">Overriding the validation check will log the supposed errors in the warnings log if they would fail.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Existing Operations Responses will eventually be modified to be extended from this type.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ReinstateReservationDetails>> HotelsReservationsCancellationsPutAsync(string reservationId, string hotelId, ReinstateReservation reinstateReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (reinstateReservation == null)
                throw new System.ArgumentNullException("reinstateReservation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}/cancellations");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(reinstateReservation, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReinstateReservationDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ReinstateReservationDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel Reservation by ID
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="cancelReservation">Request object for canceling reservations.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for the request to cancel reservations. Response contains the reservations which were successfully canceled.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<CancelReservationDetails>> HotelsReservationsCancellationsPostAsync(string reservationId, string hotelId, CancelReservation2 cancelReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsCancellationsPostAsync(reservationId, hotelId, cancelReservation, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Reservation by ID
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="cancelReservation">Request object for canceling reservations.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object for the request to cancel reservations. Response contains the reservations which were successfully canceled.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<CancelReservationDetails>> HotelsReservationsCancellationsPostAsync(string reservationId, string hotelId, CancelReservation2 cancelReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (cancelReservation == null)
                throw new System.ArgumentNullException("cancelReservation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}/cancellations");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(cancelReservation, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelReservationDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<CancelReservationDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Pre-Checkin a Reservation
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="preCheckInReservation">Request to pre-register a reservation eligible for pre-registration and change arrival details.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsPreCheckInPostAsync(string reservationId, string hotelId, PreCheckInReservation2 preCheckInReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsPreCheckInPostAsync(reservationId, hotelId, preCheckInReservation, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Pre-Checkin a Reservation
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="preCheckInReservation">Request to pre-register a reservation eligible for pre-registration and change arrival details.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsPreCheckInPostAsync(string reservationId, string hotelId, PreCheckInReservation2 preCheckInReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (preCheckInReservation == null)
                throw new System.ArgumentNullException("preCheckInReservation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}/preCheckIn");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(preCheckInReservation, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Status>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revert a PreCheckIn Reservation
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="resvIDExtension">Additional identifying value assigned by the creating system.</param>
        /// <param name="arrivalTime">The time at which the guest arrives at the hotel.</param>
        /// <param name="roomNumber">Room Number to be assigned to the reservation.</param>
        /// <param name="guestPreferredCurrency">Currency code preferred by guest.</param>
        /// <param name="allowMobileViewFolio">Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.</param>
        /// <param name="attachCreditCardToProfile">Attach the credit card to profile.</param>
        /// <param name="cardOrToken">Simple type for indicating if credit card number is tokenized.</param>
        /// <param name="cardType">This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.</param>
        /// <param name="expirationDate">Expiration date of the credit card</param>
        /// <param name="expirationDateMasked">Masked Expiration date of the credit card</param>
        /// <param name="userDefinedCardType">Indicates the user defined credit card type if credit card type from a defined list is not provided</param>
        /// <param name="cardId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="cardIdIDExtension">Additional identifying value assigned by the creating system.</param>
        /// <param name="cardIdIDContext">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="cardIdType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="currentAuthorizedAmount">A monetary amount.</param>
        /// <param name="authorizedAmountCurrencyCode">Provides a currency code to reflect the currency in which an amount may be expressed.</param>
        /// <param name="approvalAmountNeeded">A monetary amount.</param>
        /// <param name="approvalAmountCurrencyCode">Provides a currency code to reflect the currency in which an amount may be expressed.</param>
        /// <param name="balanceAmount">A monetary amount.</param>
        /// <param name="balanceCurrencyCode">Provides a currency code to reflect the currency in which an amount may be expressed.</param>
        /// <param name="authorizationRuleCode">The authorization rule code.</param>
        /// <param name="authorizationRuleAmount">A monetary amount.</param>
        /// <param name="authorizationRuleCurrencyCode">Provides a currency code to reflect the currency in which an amount may be expressed.</param>
        /// <param name="authorizationRulePercent">A percentage value if the authorization rule is percentage based.</param>
        /// <param name="emailFolioID">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="emailFolioIDExtension">Additional identifying value assigned by the creating system.</param>
        /// <param name="emailFolioIDContext">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="emailFolioIDType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="emailFolioCreateDateTime">Time stamp of the creation.</param>
        /// <param name="emailFolioCreatorID">ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.</param>
        /// <param name="emailFolioEmailAddress">Defines the e-mail address.</param>
        /// <param name="emailFolioEmailFormat">Supported Email format.</param>
        /// <param name="emailFolioLastModifierID">Identifies the last software system or person to modify a record.</param>
        /// <param name="emailFolioLastModifyDateTime">Time stamp of last modification.</param>
        /// <param name="emailFolioOrderSequence">Display Order sequence.</param>
        /// <param name="emailFolioPrimaryInd">When true, indicates a primary information.</param>
        /// <param name="emailFolioPurgeDate">Date an item will be purged from a database (e.g., from a live database to an archive).</param>
        /// <param name="emailFolioType">Defines the purpose of the e-mail address (e.g. personal, business, listserve).</param>
        /// <param name="emailFolioTypeDescription">Describes the Type code</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsPreCheckInDeleteAsync(string reservationId, string hotelId, int? resvIDExtension, System.DateTimeOffset? arrivalTime, string roomNumber, string guestPreferredCurrency, bool? allowMobileViewFolio, System.Collections.Generic.IEnumerable<string> paymentMethodDescription, System.Collections.Generic.IEnumerable<int> paymentMethodFolioView, System.Collections.Generic.IEnumerable<string> paymentMethod, bool? attachCreditCardToProfile, string cardHolderName, string cardNumber, string cardNumberLast4Digits, string cardNumberMasked, CardOrToken? cardOrToken, CardType? cardType, System.DateTimeOffset? expirationDate, bool? expirationDateExpired, string expirationDateMasked, Processing? processing, bool? swiped, string userDefinedCardType, string cardId, int? cardIdIDExtension, string cardIdIDContext, string cardIdType, double? currentAuthorizedAmount, string authorizedAmountCurrencyCode, double? approvalAmountNeeded, string approvalAmountCurrencyCode, double? balanceAmount, string balanceCurrencyCode, int? authorizationRuleCode, double? authorizationRuleAmount, string authorizationRuleCurrencyCode, double? authorizationRulePercent, bool? emailFolio, string emailFolioID, int? emailFolioIDExtension, string emailFolioIDContext, string emailFolioIDType, System.DateTimeOffset? emailFolioCreateDateTime, string emailFolioCreatorID, string emailFolioEmailAddress, EmailFolioEmailFormat? emailFolioEmailFormat, string emailFolioLastModifierID, System.DateTimeOffset? emailFolioLastModifyDateTime, double? emailFolioOrderSequence, bool? emailFolioPrimaryInd, System.DateTimeOffset? emailFolioPurgeDate, string emailFolioType, string emailFolioTypeDescription, string arrivalCarrierCode, System.DateTimeOffset? arrivalDateTime, string arrivalStationCode, string arrivalTransportCode, bool? arrivalTransportationReqd, string arrivalType, string arrivalComments, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsPreCheckInDeleteAsync(reservationId, hotelId, resvIDExtension, arrivalTime, roomNumber, guestPreferredCurrency, allowMobileViewFolio, paymentMethodDescription, paymentMethodFolioView, paymentMethod, attachCreditCardToProfile, cardHolderName, cardNumber, cardNumberLast4Digits, cardNumberMasked, cardOrToken, cardType, expirationDate, expirationDateExpired, expirationDateMasked, processing, swiped, userDefinedCardType, cardId, cardIdIDExtension, cardIdIDContext, cardIdType, currentAuthorizedAmount, authorizedAmountCurrencyCode, approvalAmountNeeded, approvalAmountCurrencyCode, balanceAmount, balanceCurrencyCode, authorizationRuleCode, authorizationRuleAmount, authorizationRuleCurrencyCode, authorizationRulePercent, emailFolio, emailFolioID, emailFolioIDExtension, emailFolioIDContext, emailFolioIDType, emailFolioCreateDateTime, emailFolioCreatorID, emailFolioEmailAddress, emailFolioEmailFormat, emailFolioLastModifierID, emailFolioLastModifyDateTime, emailFolioOrderSequence, emailFolioPrimaryInd, emailFolioPurgeDate, emailFolioType, emailFolioTypeDescription, arrivalCarrierCode, arrivalDateTime, arrivalStationCode, arrivalTransportCode, arrivalTransportationReqd, arrivalType, arrivalComments, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revert a PreCheckIn Reservation
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="resvIDExtension">Additional identifying value assigned by the creating system.</param>
        /// <param name="arrivalTime">The time at which the guest arrives at the hotel.</param>
        /// <param name="roomNumber">Room Number to be assigned to the reservation.</param>
        /// <param name="guestPreferredCurrency">Currency code preferred by guest.</param>
        /// <param name="allowMobileViewFolio">Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.</param>
        /// <param name="attachCreditCardToProfile">Attach the credit card to profile.</param>
        /// <param name="cardOrToken">Simple type for indicating if credit card number is tokenized.</param>
        /// <param name="cardType">This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.</param>
        /// <param name="expirationDate">Expiration date of the credit card</param>
        /// <param name="expirationDateMasked">Masked Expiration date of the credit card</param>
        /// <param name="userDefinedCardType">Indicates the user defined credit card type if credit card type from a defined list is not provided</param>
        /// <param name="cardId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="cardIdIDExtension">Additional identifying value assigned by the creating system.</param>
        /// <param name="cardIdIDContext">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="cardIdType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="currentAuthorizedAmount">A monetary amount.</param>
        /// <param name="authorizedAmountCurrencyCode">Provides a currency code to reflect the currency in which an amount may be expressed.</param>
        /// <param name="approvalAmountNeeded">A monetary amount.</param>
        /// <param name="approvalAmountCurrencyCode">Provides a currency code to reflect the currency in which an amount may be expressed.</param>
        /// <param name="balanceAmount">A monetary amount.</param>
        /// <param name="balanceCurrencyCode">Provides a currency code to reflect the currency in which an amount may be expressed.</param>
        /// <param name="authorizationRuleCode">The authorization rule code.</param>
        /// <param name="authorizationRuleAmount">A monetary amount.</param>
        /// <param name="authorizationRuleCurrencyCode">Provides a currency code to reflect the currency in which an amount may be expressed.</param>
        /// <param name="authorizationRulePercent">A percentage value if the authorization rule is percentage based.</param>
        /// <param name="emailFolioID">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="emailFolioIDExtension">Additional identifying value assigned by the creating system.</param>
        /// <param name="emailFolioIDContext">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="emailFolioIDType">A reference to the type of object defined by the UniqueID element.</param>
        /// <param name="emailFolioCreateDateTime">Time stamp of the creation.</param>
        /// <param name="emailFolioCreatorID">ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.</param>
        /// <param name="emailFolioEmailAddress">Defines the e-mail address.</param>
        /// <param name="emailFolioEmailFormat">Supported Email format.</param>
        /// <param name="emailFolioLastModifierID">Identifies the last software system or person to modify a record.</param>
        /// <param name="emailFolioLastModifyDateTime">Time stamp of last modification.</param>
        /// <param name="emailFolioOrderSequence">Display Order sequence.</param>
        /// <param name="emailFolioPrimaryInd">When true, indicates a primary information.</param>
        /// <param name="emailFolioPurgeDate">Date an item will be purged from a database (e.g., from a live database to an archive).</param>
        /// <param name="emailFolioType">Defines the purpose of the e-mail address (e.g. personal, business, listserve).</param>
        /// <param name="emailFolioTypeDescription">Describes the Type code</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsPreCheckInDeleteAsync(string reservationId, string hotelId, int? resvIDExtension, System.DateTimeOffset? arrivalTime, string roomNumber, string guestPreferredCurrency, bool? allowMobileViewFolio, System.Collections.Generic.IEnumerable<string> paymentMethodDescription, System.Collections.Generic.IEnumerable<int> paymentMethodFolioView, System.Collections.Generic.IEnumerable<string> paymentMethod, bool? attachCreditCardToProfile, string cardHolderName, string cardNumber, string cardNumberLast4Digits, string cardNumberMasked, CardOrToken? cardOrToken, CardType? cardType, System.DateTimeOffset? expirationDate, bool? expirationDateExpired, string expirationDateMasked, Processing? processing, bool? swiped, string userDefinedCardType, string cardId, int? cardIdIDExtension, string cardIdIDContext, string cardIdType, double? currentAuthorizedAmount, string authorizedAmountCurrencyCode, double? approvalAmountNeeded, string approvalAmountCurrencyCode, double? balanceAmount, string balanceCurrencyCode, int? authorizationRuleCode, double? authorizationRuleAmount, string authorizationRuleCurrencyCode, double? authorizationRulePercent, bool? emailFolio, string emailFolioID, int? emailFolioIDExtension, string emailFolioIDContext, string emailFolioIDType, System.DateTimeOffset? emailFolioCreateDateTime, string emailFolioCreatorID, string emailFolioEmailAddress, EmailFolioEmailFormat? emailFolioEmailFormat, string emailFolioLastModifierID, System.DateTimeOffset? emailFolioLastModifyDateTime, double? emailFolioOrderSequence, bool? emailFolioPrimaryInd, System.DateTimeOffset? emailFolioPurgeDate, string emailFolioType, string emailFolioTypeDescription, string arrivalCarrierCode, System.DateTimeOffset? arrivalDateTime, string arrivalStationCode, string arrivalTransportCode, bool? arrivalTransportationReqd, string arrivalType, string arrivalComments, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}/preCheckIn?");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));
            if (resvIDExtension != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("resvIDExtension") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resvIDExtension, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalTime") + "=").Append(System.Uri.EscapeDataString(arrivalTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (guestPreferredCurrency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("guestPreferredCurrency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(guestPreferredCurrency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (allowMobileViewFolio != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("allowMobileViewFolio") + "=").Append(System.Uri.EscapeDataString(ConvertToString(allowMobileViewFolio, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentMethodDescription != null)
            {
                foreach (var item_ in paymentMethodDescription) { urlBuilder_.Append(System.Uri.EscapeDataString("paymentMethodDescription") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paymentMethodFolioView != null)
            {
                foreach (var item_ in paymentMethodFolioView) { urlBuilder_.Append(System.Uri.EscapeDataString("paymentMethodFolioView") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paymentMethod != null)
            {
                foreach (var item_ in paymentMethod) { urlBuilder_.Append(System.Uri.EscapeDataString("paymentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (attachCreditCardToProfile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("attachCreditCardToProfile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(attachCreditCardToProfile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardHolderName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardHolderName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardHolderName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardNumberLast4Digits != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardNumberLast4Digits") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardNumberLast4Digits, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardNumberMasked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardNumberMasked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardNumberMasked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardOrToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardOrToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardOrToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expirationDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expirationDate") + "=").Append(System.Uri.EscapeDataString(expirationDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expirationDateExpired != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expirationDateExpired") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expirationDateExpired, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expirationDateMasked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expirationDateMasked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expirationDateMasked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processing != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processing") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processing, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (swiped != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("swiped") + "=").Append(System.Uri.EscapeDataString(ConvertToString(swiped, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userDefinedCardType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userDefinedCardType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userDefinedCardType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardIdIDExtension != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardIdIDExtension") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardIdIDExtension, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardIdIDContext != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardIdIDContext") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardIdIDContext, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cardIdType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cardIdType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cardIdType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currentAuthorizedAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currentAuthorizedAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currentAuthorizedAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (authorizedAmountCurrencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("authorizedAmountCurrencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(authorizedAmountCurrencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (approvalAmountNeeded != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("approvalAmountNeeded") + "=").Append(System.Uri.EscapeDataString(ConvertToString(approvalAmountNeeded, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (approvalAmountCurrencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("approvalAmountCurrencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(approvalAmountCurrencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (balanceAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("balanceAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(balanceAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (balanceCurrencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("balanceCurrencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(balanceCurrencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (authorizationRuleCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("authorizationRuleCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(authorizationRuleCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (authorizationRuleAmount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("authorizationRuleAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(authorizationRuleAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (authorizationRuleCurrencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("authorizationRuleCurrencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(authorizationRuleCurrencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (authorizationRulePercent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("authorizationRulePercent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(authorizationRulePercent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolio != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolio") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolio, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioIDExtension != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioIDExtension") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioIDExtension, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioIDContext != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioIDContext") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioIDContext, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioIDType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioIDType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioIDType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioCreateDateTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioCreateDateTime") + "=").Append(System.Uri.EscapeDataString(emailFolioCreateDateTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioCreatorID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioCreatorID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioCreatorID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioEmailAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioEmailAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioEmailAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioEmailFormat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioEmailFormat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioEmailFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioLastModifierID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioLastModifierID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioLastModifierID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioLastModifyDateTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioLastModifyDateTime") + "=").Append(System.Uri.EscapeDataString(emailFolioLastModifyDateTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioOrderSequence != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioOrderSequence") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioOrderSequence, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioPrimaryInd != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioPrimaryInd") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioPrimaryInd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioPurgeDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioPurgeDate") + "=").Append(System.Uri.EscapeDataString(emailFolioPurgeDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (emailFolioTypeDescription != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("emailFolioTypeDescription") + "=").Append(System.Uri.EscapeDataString(ConvertToString(emailFolioTypeDescription, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalCarrierCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalCarrierCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arrivalCarrierCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalDateTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalDateTime") + "=").Append(System.Uri.EscapeDataString(arrivalDateTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalStationCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalStationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arrivalStationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalTransportCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalTransportCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arrivalTransportCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalTransportationReqd != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalTransportationReqd") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arrivalTransportationReqd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arrivalType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalComments != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalComments") + "=").Append(System.Uri.EscapeDataString(ConvertToString(arrivalComments, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Status>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Combine Share Reservations
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="combineShareReservations">Request to combine sharer reservations. This request requires a Reservation Name Id(Joining to) and a Joining Reservation Id</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response for the combine share reservation request. Based on the request, this will return all sharer reservations including the request reservation.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<CombineShareReservationsDetails>> HotelsReservationsSharesAsync(string reservationId, string hotelId, CombineShareReservations combineShareReservations, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsSharesAsync(reservationId, hotelId, combineShareReservations, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Combine Share Reservations
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="combineShareReservations">Request to combine sharer reservations. This request requires a Reservation Name Id(Joining to) and a Joining Reservation Id</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response for the combine share reservation request. Based on the request, this will return all sharer reservations including the request reservation.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<CombineShareReservationsDetails>> HotelsReservationsSharesAsync(string reservationId, string hotelId, CombineShareReservations combineShareReservations, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (combineShareReservations == null)
                throw new System.ArgumentNullException("combineShareReservations");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}/shares");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(combineShareReservations, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CombineShareReservationsDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<CombineShareReservationsDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upsell a Reservation
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="upsellReservation">Request to upsell a reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsUpsellPostAsync(string reservationId, string hotelId, UpsellReservation2 upsellReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsUpsellPostAsync(reservationId, hotelId, upsellReservation, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upsell a Reservation
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="upsellReservation">Request to upsell a reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Status>> HotelsReservationsUpsellPostAsync(string reservationId, string hotelId, UpsellReservation2 upsellReservation, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            if (upsellReservation == null)
                throw new System.ArgumentNullException("upsellReservation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}/upsell");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(upsellReservation, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Status>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get available Upsell offers
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to the that contains information for a reservation prior to upgrade.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ReservationUpsellInfo>> HotelsReservationsUpsellGetAsync(string reservationId, string hotelId, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return HotelsReservationsUpsellGetAsync(reservationId, hotelId, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available Upsell offers
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="hotelId">Unique ID of the hotel where reservation is searched based on reservation ID.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to the that contains information for a reservation prior to upgrade.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ReservationUpsellInfo>> HotelsReservationsUpsellGetAsync(string reservationId, string hotelId, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (hotelId == null)
                throw new System.ArgumentNullException("hotelId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hotels/{hotelId}/reservations/{reservationId}/upsell");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{hotelId}", System.Uri.EscapeDataString(ConvertToString(hotelId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReservationUpsellInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ReservationUpsellInfo>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("ReservationUpsellInfo not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Reservations for a hotel
        /// </summary>
        /// <param name="recentlyAccessed">Mark this reservation as recently accessed.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="offset">Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.</param>
        /// <param name="searchType">Represents Reservation search type Player Snapshot.</param>
        /// <param name="hotelIds">List of Hotels to support searches with multiple resorts for which traces are to be fetched.</param>
        /// <param name="text">Free form text field for searching all reservation fields</param>
        /// <param name="reservationIdList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="confirmationNumberList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="cancellationNumberList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalReferenceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalSystemCodes">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="arrivalEndDate">The ending value of the date range.</param>
        /// <param name="arrivalStartDate">The starting value of the date range.</param>
        /// <param name="departureEndDate">The ending value of the date range.</param>
        /// <param name="departureStartDate">The starting value of the date range.</param>
        /// <param name="expectedArrivalStartTime">The ending value of the time span.</param>
        /// <param name="expectedArrivalEndTime">The starting value of the time span.</param>
        /// <param name="expectedReturnEndTime">The ending value of the time span.</param>
        /// <param name="expectedReturnStartTime">The starting value of the time span.</param>
        /// <param name="companyNames">Attached profile name</param>
        /// <param name="travelAgentIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="companyIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="sourceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="contactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="groupIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="billingContactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="profileIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="membershipCardNumber">Membership ID criteria.</param>
        /// <param name="surname">Family name, last name.</param>
        /// <param name="givenName">Given name, first name or names</param>
        /// <param name="anyVIPStatus">VIP status of the customer.</param>
        /// <param name="vipCodes">VIP status of the customer.</param>
        /// <param name="guaranteeCode">Fetches the reservation having Guarantee Code(Reservation Type) supplied here.</param>
        /// <param name="paymentMethod">Fetches the reservation having method of payment supplied here.</param>
        /// <param name="discountApplied">Fetches the reservation for which discount is applied</param>
        /// <param name="createdBy">Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.</param>
        /// <param name="cancelledByList">Fetches reservations cancelled by list of users.</param>
        /// <param name="cancelledOn">Fetches the reservations which are cancelled on a specific date.</param>
        /// <param name="excludeBlockReservations">If true the search result will exclude the blocks reservations.</param>
        /// <param name="blockName">The Name of the block that is attached to the reservation.</param>
        /// <param name="blockIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="blockCodes">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="customReference">Custom reference</param>
        /// <param name="recordLocator">GDS Record Locator for reservation.</param>
        /// <param name="roomAssignedOnly">Indicator to query reservations which have a room number assigned.</param>
        /// <param name="roomUnassignedOnly">Indicator to query reservations which does not have a room number assigned.</param>
        /// <param name="roomId">Room number of the reservation to search by.</param>
        /// <param name="roomType">Room Type.</param>
        /// <param name="roomFeatures">A code representing a room feature.</param>
        /// <param name="roomSpecials">Preference value for display purposes.</param>
        /// <param name="roomSmokingPreference">Preference value for display purposes.</param>
        /// <param name="roomFloorPreferences">Preference value for display purposes.</param>
        /// <param name="housekeepingRoomStatuses">Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.</param>
        /// <param name="communication">Filter by the last digits of a reservation's phone number.</param>
        /// <param name="fetchInstructions">Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.</param>
        /// <param name="allowPreRegistration">Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.</param>
        /// <param name="hasDepositBalance">Indicates that only reservations with deposit balance should be expected from the result.</param>
        /// <param name="hasOpenBalance">Indicates that only reservations with open balance should be expected from the result.</param>
        /// <param name="hasOpenFolio">Indicates that only reservations with open folio should be expected from the result.</param>
        /// <param name="includeScheduledCheckOut">Criteria that indicates whether to scheduled checkouts or not.</param>
        /// <param name="linkedOnly">Indicates that only linked reservations should be expected from the result.</param>
        /// <param name="unlinkedOnly">Indicates that only unlinked reservations should be expected from the result.</param>
        /// <param name="actualArrivals">Indicates if reservations which have already arrived on the Search Date is required.</param>
        /// <param name="actualDepartures">Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.</param>
        /// <param name="complimentaryReservations">Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="dayOfArrivalCancels">Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.</param>
        /// <param name="dayUse">Indicates if reservations which are day use reservation on the Search Date, is required.</param>
        /// <param name="earlyDepartures">Indicates if reservations which checked out early on the Search Date, is required.</param>
        /// <param name="expectedArrivals">Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.</param>
        /// <param name="expectedDepartures">Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.</param>
        /// <param name="extendedStays">Indicates if reservations which have extended their stays on the Search Date, is required.</param>
        /// <param name="houseUseReservations">Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="stayovers">Indicates if reservations which are StayOvers on the Search Date, is required.</param>
        /// <param name="stayDate">Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.</param>
        /// <param name="roomRoutingId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludePseudoRoomReservations">Indicates to exclude Pseudo room reservations.</param>
        /// <param name="excludeReservationIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludeVIPStatusCodes">VIP status of the customer.</param>
        /// <param name="excludeSpecials">Preference value for display purposes.</param>
        /// <param name="excludeFloorPreferences">Preference value for display purposes.</param>
        /// <param name="excludeAdvanceCheckedIn">Indicates to exclude Advance Checked In Reservations from search result.</param>
        /// <param name="playerId">Player ID associated to the reservation.</param>
        /// <param name="gamingBalanceFrom">Balance from.</param>
        /// <param name="gamingBalanceTo">Balance to.</param>
        /// <param name="compAccountingBalanceFrom">Comp Balance From</param>
        /// <param name="compAccountingBalanceTo">Comp Balance To</param>
        /// <param name="searchTypes">Represents Reservation search type Player Snapshot.</param>
        /// <param name="reservationStatuses">Reservation status type for reservations search.</param>
        /// <param name="transportationCodes">Codes to be searched.</param>
        /// <param name="roomReadyStatuses">Enum to denote the Status of Readiness messages sent to Guest Devices.</param>
        /// <param name="checkoutMessageReceived">Fetches the reservations for which Checkout Message is received.</param>
        /// <param name="optedForCommunication">Fetches the reservations for which reservation communication has been opted.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to the Fetch Reservation Request operation. Based on the criteria, reservation information is returned.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ReservationsDetails>> ReservationsAsync(bool? recentlyAccessed, int? limit, int? offset, SearchType3? searchType, System.Collections.Generic.IEnumerable<string> hotelIds, string text, System.Collections.Generic.IEnumerable<string> reservationIdList, System.Collections.Generic.IEnumerable<string> confirmationNumberList, System.Collections.Generic.IEnumerable<string> cancellationNumberList, System.Collections.Generic.IEnumerable<string> externalReferenceIds, System.Collections.Generic.IEnumerable<string> externalSystemCodes, System.DateTimeOffset? arrivalEndDate, System.DateTimeOffset? arrivalStartDate, System.DateTimeOffset? departureEndDate, System.DateTimeOffset? departureStartDate, System.DateTimeOffset? expectedArrivalStartTime, System.DateTimeOffset? expectedArrivalEndTime, System.DateTimeOffset? expectedReturnEndTime, System.DateTimeOffset? expectedReturnStartTime, System.Collections.Generic.IEnumerable<string> companyNames, System.Collections.Generic.IEnumerable<string> travelAgentIds, System.Collections.Generic.IEnumerable<string> companyIds, System.Collections.Generic.IEnumerable<string> sourceIds, System.Collections.Generic.IEnumerable<string> contactIds, System.Collections.Generic.IEnumerable<string> groupIds, System.Collections.Generic.IEnumerable<string> billingContactIds, System.Collections.Generic.IEnumerable<string> profileIds, string membershipCardNumber, System.Collections.Generic.IEnumerable<string> membershipLevels, System.Collections.Generic.IEnumerable<string> membershipTypes, string surname, string givenName, bool? anyVIPStatus, System.Collections.Generic.IEnumerable<string> vipCodes, string guaranteeCode, string paymentMethod, bool? discountApplied, System.Collections.Generic.IEnumerable<string> user, string createdBy, System.Collections.Generic.IEnumerable<string> cancelledByList, System.DateTimeOffset? cancelledOn, System.Collections.Generic.IEnumerable<string> ratePlanCodes, System.Collections.Generic.IEnumerable<string> sourceCodes, System.Collections.Generic.IEnumerable<string> marketCodes, bool? excludeBlockReservations, string blockName, System.Collections.Generic.IEnumerable<string> blockIds, System.Collections.Generic.IEnumerable<string> blockCodes, string customReference, string recordLocator, System.Collections.Generic.IEnumerable<Anonymous18> orderBy, System.Collections.Generic.IEnumerable<Anonymous19> sortOrder, bool? roomAssignedOnly, bool? roomUnassignedOnly, string roomId, System.Collections.Generic.IEnumerable<string> roomType, System.Collections.Generic.IEnumerable<string> roomFeatures, System.Collections.Generic.IEnumerable<string> roomSpecials, string roomSmokingPreference, System.Collections.Generic.IEnumerable<string> roomFloorPreferences, System.Collections.Generic.IEnumerable<Anonymous20> housekeepingRoomStatuses, System.Collections.Generic.IEnumerable<string> roomClasses, string roomRangeFrom, string roomRangeTo, string communication, System.Collections.Generic.IEnumerable<Anonymous21> fetchInstructions, bool? allowPreRegistration, bool? hasDepositBalance, bool? hasOpenBalance, bool? hasOpenFolio, bool? includeScheduledCheckOut, bool? linkedOnly, bool? unlinkedOnly, bool? actualArrivals, bool? actualDepartures, bool? complimentaryReservations, bool? dayOfArrivalCancels, bool? dayUse, bool? earlyDepartures, bool? expectedArrivals, bool? expectedDepartures, bool? extendedStays, bool? houseUseReservations, bool? stayovers, System.DateTimeOffset? stayDate, string roomRoutingId, bool? excludePseudoRoomReservations, System.Collections.Generic.IEnumerable<string> excludeReservationIds, System.Collections.Generic.IEnumerable<string> excludeVIPStatusCodes, System.Collections.Generic.IEnumerable<string> excludeSpecials, System.Collections.Generic.IEnumerable<string> excludeFloorPreferences, bool? excludeAdvanceCheckedIn, string playerId, double? gamingBalanceFrom, double? gamingBalanceTo, double? compAccountingBalanceFrom, double? compAccountingBalanceTo, System.Collections.Generic.IEnumerable<Anonymous22> searchTypes, System.Collections.Generic.IEnumerable<Anonymous23> reservationStatuses, System.Collections.Generic.IEnumerable<string> transportationCodes, System.Collections.Generic.IEnumerable<Anonymous24> roomReadyStatuses, bool? checkoutMessageReceived, bool? optedForCommunication, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return ReservationsAsync(recentlyAccessed, limit, offset, searchType, hotelIds, text, reservationIdList, confirmationNumberList, cancellationNumberList, externalReferenceIds, externalSystemCodes, arrivalEndDate, arrivalStartDate, departureEndDate, departureStartDate, expectedArrivalStartTime, expectedArrivalEndTime, expectedReturnEndTime, expectedReturnStartTime, companyNames, travelAgentIds, companyIds, sourceIds, contactIds, groupIds, billingContactIds, profileIds, membershipCardNumber, membershipLevels, membershipTypes, surname, givenName, anyVIPStatus, vipCodes, guaranteeCode, paymentMethod, discountApplied, user, createdBy, cancelledByList, cancelledOn, ratePlanCodes, sourceCodes, marketCodes, excludeBlockReservations, blockName, blockIds, blockCodes, customReference, recordLocator, orderBy, sortOrder, roomAssignedOnly, roomUnassignedOnly, roomId, roomType, roomFeatures, roomSpecials, roomSmokingPreference, roomFloorPreferences, housekeepingRoomStatuses, roomClasses, roomRangeFrom, roomRangeTo, communication, fetchInstructions, allowPreRegistration, hasDepositBalance, hasOpenBalance, hasOpenFolio, includeScheduledCheckOut, linkedOnly, unlinkedOnly, actualArrivals, actualDepartures, complimentaryReservations, dayOfArrivalCancels, dayUse, earlyDepartures, expectedArrivals, expectedDepartures, extendedStays, houseUseReservations, stayovers, stayDate, roomRoutingId, excludePseudoRoomReservations, excludeReservationIds, excludeVIPStatusCodes, excludeSpecials, excludeFloorPreferences, excludeAdvanceCheckedIn, playerId, gamingBalanceFrom, gamingBalanceTo, compAccountingBalanceFrom, compAccountingBalanceTo, searchTypes, reservationStatuses, transportationCodes, roomReadyStatuses, checkoutMessageReceived, optedForCommunication, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Reservations for a hotel
        /// </summary>
        /// <param name="recentlyAccessed">Mark this reservation as recently accessed.</param>
        /// <param name="limit">Indicates maximum number of records a Web Service should return.</param>
        /// <param name="offset">Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.</param>
        /// <param name="searchType">Represents Reservation search type Player Snapshot.</param>
        /// <param name="hotelIds">List of Hotels to support searches with multiple resorts for which traces are to be fetched.</param>
        /// <param name="text">Free form text field for searching all reservation fields</param>
        /// <param name="reservationIdList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="confirmationNumberList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="cancellationNumberList">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalReferenceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="externalSystemCodes">Used to identify the source of the identifier (e.g., IATA, ABTA).</param>
        /// <param name="arrivalEndDate">The ending value of the date range.</param>
        /// <param name="arrivalStartDate">The starting value of the date range.</param>
        /// <param name="departureEndDate">The ending value of the date range.</param>
        /// <param name="departureStartDate">The starting value of the date range.</param>
        /// <param name="expectedArrivalStartTime">The ending value of the time span.</param>
        /// <param name="expectedArrivalEndTime">The starting value of the time span.</param>
        /// <param name="expectedReturnEndTime">The ending value of the time span.</param>
        /// <param name="expectedReturnStartTime">The starting value of the time span.</param>
        /// <param name="companyNames">Attached profile name</param>
        /// <param name="travelAgentIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="companyIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="sourceIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="contactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="groupIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="billingContactIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="profileIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="membershipCardNumber">Membership ID criteria.</param>
        /// <param name="surname">Family name, last name.</param>
        /// <param name="givenName">Given name, first name or names</param>
        /// <param name="anyVIPStatus">VIP status of the customer.</param>
        /// <param name="vipCodes">VIP status of the customer.</param>
        /// <param name="guaranteeCode">Fetches the reservation having Guarantee Code(Reservation Type) supplied here.</param>
        /// <param name="paymentMethod">Fetches the reservation having method of payment supplied here.</param>
        /// <param name="discountApplied">Fetches the reservation for which discount is applied</param>
        /// <param name="createdBy">Fetches reservation created by specified user. If both CreatedByUsers and CreatedBy is specified, CreatedByUsers will take precedence.</param>
        /// <param name="cancelledByList">Fetches reservations cancelled by list of users.</param>
        /// <param name="cancelledOn">Fetches the reservations which are cancelled on a specific date.</param>
        /// <param name="excludeBlockReservations">If true the search result will exclude the blocks reservations.</param>
        /// <param name="blockName">The Name of the block that is attached to the reservation.</param>
        /// <param name="blockIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="blockCodes">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="customReference">Custom reference</param>
        /// <param name="recordLocator">GDS Record Locator for reservation.</param>
        /// <param name="roomAssignedOnly">Indicator to query reservations which have a room number assigned.</param>
        /// <param name="roomUnassignedOnly">Indicator to query reservations which does not have a room number assigned.</param>
        /// <param name="roomId">Room number of the reservation to search by.</param>
        /// <param name="roomType">Room Type.</param>
        /// <param name="roomFeatures">A code representing a room feature.</param>
        /// <param name="roomSpecials">Preference value for display purposes.</param>
        /// <param name="roomSmokingPreference">Preference value for display purposes.</param>
        /// <param name="roomFloorPreferences">Preference value for display purposes.</param>
        /// <param name="housekeepingRoomStatuses">Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.</param>
        /// <param name="communication">Filter by the last digits of a reservation's phone number.</param>
        /// <param name="fetchInstructions">Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.</param>
        /// <param name="allowPreRegistration">Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device. Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.</param>
        /// <param name="hasDepositBalance">Indicates that only reservations with deposit balance should be expected from the result.</param>
        /// <param name="hasOpenBalance">Indicates that only reservations with open balance should be expected from the result.</param>
        /// <param name="hasOpenFolio">Indicates that only reservations with open folio should be expected from the result.</param>
        /// <param name="includeScheduledCheckOut">Criteria that indicates whether to scheduled checkouts or not.</param>
        /// <param name="linkedOnly">Indicates that only linked reservations should be expected from the result.</param>
        /// <param name="unlinkedOnly">Indicates that only unlinked reservations should be expected from the result.</param>
        /// <param name="actualArrivals">Indicates if reservations which have already arrived on the Search Date is required.</param>
        /// <param name="actualDepartures">Indicates if reservations which were expected to depart on the Search Date and have already checked, is required.</param>
        /// <param name="complimentaryReservations">Indicates if reservations where rate codes are marked as Complimentary Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="dayOfArrivalCancels">Indicates if reservations which have cancelled on the Search Date which is also the day of arrival is required.</param>
        /// <param name="dayUse">Indicates if reservations which are day use reservation on the Search Date, is required.</param>
        /// <param name="earlyDepartures">Indicates if reservations which checked out early on the Search Date, is required.</param>
        /// <param name="expectedArrivals">Indicates if reservations which are expected arrivals for the Search Date and who have not yet arrived, is required.</param>
        /// <param name="expectedDepartures">Indicates if reservations which are expected departures for the Search Date and who have not yet departed, is required.</param>
        /// <param name="extendedStays">Indicates if reservations which have extended their stays on the Search Date, is required.</param>
        /// <param name="houseUseReservations">Indicates if reservations where rate codes are marked as House Use Rates , is required. This flag should be used in conjunction with the Arrivals, Departures or StayOvers criteria.</param>
        /// <param name="stayovers">Indicates if reservations which are StayOvers on the Search Date, is required.</param>
        /// <param name="stayDate">Date for searching the reservations. This is the date for which the search types are applicable. If date is not available, the business date will be used by default.</param>
        /// <param name="roomRoutingId">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludePseudoRoomReservations">Indicates to exclude Pseudo room reservations.</param>
        /// <param name="excludeReservationIds">A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.</param>
        /// <param name="excludeVIPStatusCodes">VIP status of the customer.</param>
        /// <param name="excludeSpecials">Preference value for display purposes.</param>
        /// <param name="excludeFloorPreferences">Preference value for display purposes.</param>
        /// <param name="excludeAdvanceCheckedIn">Indicates to exclude Advance Checked In Reservations from search result.</param>
        /// <param name="playerId">Player ID associated to the reservation.</param>
        /// <param name="gamingBalanceFrom">Balance from.</param>
        /// <param name="gamingBalanceTo">Balance to.</param>
        /// <param name="compAccountingBalanceFrom">Comp Balance From</param>
        /// <param name="compAccountingBalanceTo">Comp Balance To</param>
        /// <param name="searchTypes">Represents Reservation search type Player Snapshot.</param>
        /// <param name="reservationStatuses">Reservation status type for reservations search.</param>
        /// <param name="transportationCodes">Codes to be searched.</param>
        /// <param name="roomReadyStatuses">Enum to denote the Status of Readiness messages sent to Guest Devices.</param>
        /// <param name="checkoutMessageReceived">Fetches the reservations for which Checkout Message is received.</param>
        /// <param name="optedForCommunication">Fetches the reservations for which reservation communication has been opted.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Response object to the Fetch Reservation Request operation. Based on the criteria, reservation information is returned.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ReservationsDetails>> ReservationsAsync(bool? recentlyAccessed, int? limit, int? offset, SearchType3? searchType, System.Collections.Generic.IEnumerable<string> hotelIds, string text, System.Collections.Generic.IEnumerable<string> reservationIdList, System.Collections.Generic.IEnumerable<string> confirmationNumberList, System.Collections.Generic.IEnumerable<string> cancellationNumberList, System.Collections.Generic.IEnumerable<string> externalReferenceIds, System.Collections.Generic.IEnumerable<string> externalSystemCodes, System.DateTimeOffset? arrivalEndDate, System.DateTimeOffset? arrivalStartDate, System.DateTimeOffset? departureEndDate, System.DateTimeOffset? departureStartDate, System.DateTimeOffset? expectedArrivalStartTime, System.DateTimeOffset? expectedArrivalEndTime, System.DateTimeOffset? expectedReturnEndTime, System.DateTimeOffset? expectedReturnStartTime, System.Collections.Generic.IEnumerable<string> companyNames, System.Collections.Generic.IEnumerable<string> travelAgentIds, System.Collections.Generic.IEnumerable<string> companyIds, System.Collections.Generic.IEnumerable<string> sourceIds, System.Collections.Generic.IEnumerable<string> contactIds, System.Collections.Generic.IEnumerable<string> groupIds, System.Collections.Generic.IEnumerable<string> billingContactIds, System.Collections.Generic.IEnumerable<string> profileIds, string membershipCardNumber, System.Collections.Generic.IEnumerable<string> membershipLevels, System.Collections.Generic.IEnumerable<string> membershipTypes, string surname, string givenName, bool? anyVIPStatus, System.Collections.Generic.IEnumerable<string> vipCodes, string guaranteeCode, string paymentMethod, bool? discountApplied, System.Collections.Generic.IEnumerable<string> user, string createdBy, System.Collections.Generic.IEnumerable<string> cancelledByList, System.DateTimeOffset? cancelledOn, System.Collections.Generic.IEnumerable<string> ratePlanCodes, System.Collections.Generic.IEnumerable<string> sourceCodes, System.Collections.Generic.IEnumerable<string> marketCodes, bool? excludeBlockReservations, string blockName, System.Collections.Generic.IEnumerable<string> blockIds, System.Collections.Generic.IEnumerable<string> blockCodes, string customReference, string recordLocator, System.Collections.Generic.IEnumerable<Anonymous18> orderBy, System.Collections.Generic.IEnumerable<Anonymous19> sortOrder, bool? roomAssignedOnly, bool? roomUnassignedOnly, string roomId, System.Collections.Generic.IEnumerable<string> roomType, System.Collections.Generic.IEnumerable<string> roomFeatures, System.Collections.Generic.IEnumerable<string> roomSpecials, string roomSmokingPreference, System.Collections.Generic.IEnumerable<string> roomFloorPreferences, System.Collections.Generic.IEnumerable<Anonymous20> housekeepingRoomStatuses, System.Collections.Generic.IEnumerable<string> roomClasses, string roomRangeFrom, string roomRangeTo, string communication, System.Collections.Generic.IEnumerable<Anonymous21> fetchInstructions, bool? allowPreRegistration, bool? hasDepositBalance, bool? hasOpenBalance, bool? hasOpenFolio, bool? includeScheduledCheckOut, bool? linkedOnly, bool? unlinkedOnly, bool? actualArrivals, bool? actualDepartures, bool? complimentaryReservations, bool? dayOfArrivalCancels, bool? dayUse, bool? earlyDepartures, bool? expectedArrivals, bool? expectedDepartures, bool? extendedStays, bool? houseUseReservations, bool? stayovers, System.DateTimeOffset? stayDate, string roomRoutingId, bool? excludePseudoRoomReservations, System.Collections.Generic.IEnumerable<string> excludeReservationIds, System.Collections.Generic.IEnumerable<string> excludeVIPStatusCodes, System.Collections.Generic.IEnumerable<string> excludeSpecials, System.Collections.Generic.IEnumerable<string> excludeFloorPreferences, bool? excludeAdvanceCheckedIn, string playerId, double? gamingBalanceFrom, double? gamingBalanceTo, double? compAccountingBalanceFrom, double? compAccountingBalanceTo, System.Collections.Generic.IEnumerable<Anonymous22> searchTypes, System.Collections.Generic.IEnumerable<Anonymous23> reservationStatuses, System.Collections.Generic.IEnumerable<string> transportationCodes, System.Collections.Generic.IEnumerable<Anonymous24> roomReadyStatuses, bool? checkoutMessageReceived, bool? optedForCommunication, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/reservations?");
            if (recentlyAccessed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recentlyAccessed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recentlyAccessed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("searchType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hotelIds != null)
            {
                foreach (var item_ in hotelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("hotelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (text != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("text") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reservationIdList != null)
            {
                foreach (var item_ in reservationIdList) { urlBuilder_.Append(System.Uri.EscapeDataString("reservationIdList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (confirmationNumberList != null)
            {
                foreach (var item_ in confirmationNumberList) { urlBuilder_.Append(System.Uri.EscapeDataString("confirmationNumberList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cancellationNumberList != null)
            {
                foreach (var item_ in cancellationNumberList) { urlBuilder_.Append(System.Uri.EscapeDataString("cancellationNumberList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalReferenceIds != null)
            {
                foreach (var item_ in externalReferenceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("externalReferenceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (externalSystemCodes != null)
            {
                foreach (var item_ in externalSystemCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("externalSystemCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (arrivalEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalEndDate") + "=").Append(System.Uri.EscapeDataString(arrivalEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (arrivalStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("arrivalStartDate") + "=").Append(System.Uri.EscapeDataString(arrivalStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (departureEndDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("departureEndDate") + "=").Append(System.Uri.EscapeDataString(departureEndDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (departureStartDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("departureStartDate") + "=").Append(System.Uri.EscapeDataString(departureStartDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivalStartTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivalStartTime") + "=").Append(System.Uri.EscapeDataString(expectedArrivalStartTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivalEndTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivalEndTime") + "=").Append(System.Uri.EscapeDataString(expectedArrivalEndTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedReturnEndTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedReturnEndTime") + "=").Append(System.Uri.EscapeDataString(expectedReturnEndTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedReturnStartTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedReturnStartTime") + "=").Append(System.Uri.EscapeDataString(expectedReturnStartTime.Value.ToString("yyyy-MM-dd HH:mm:ssZZZZ", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (companyNames != null)
            {
                foreach (var item_ in companyNames) { urlBuilder_.Append(System.Uri.EscapeDataString("companyNames") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (travelAgentIds != null)
            {
                foreach (var item_ in travelAgentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("travelAgentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (companyIds != null)
            {
                foreach (var item_ in companyIds) { urlBuilder_.Append(System.Uri.EscapeDataString("companyIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sourceIds != null)
            {
                foreach (var item_ in sourceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sourceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (contactIds != null)
            {
                foreach (var item_ in contactIds) { urlBuilder_.Append(System.Uri.EscapeDataString("contactIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (groupIds != null)
            {
                foreach (var item_ in groupIds) { urlBuilder_.Append(System.Uri.EscapeDataString("groupIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (billingContactIds != null)
            {
                foreach (var item_ in billingContactIds) { urlBuilder_.Append(System.Uri.EscapeDataString("billingContactIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (profileIds != null)
            {
                foreach (var item_ in profileIds) { urlBuilder_.Append(System.Uri.EscapeDataString("profileIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (membershipCardNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("membershipCardNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(membershipCardNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (membershipLevels != null)
            {
                foreach (var item_ in membershipLevels) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipLevels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (membershipTypes != null)
            {
                foreach (var item_ in membershipTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("membershipTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (surname != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("surname") + "=").Append(System.Uri.EscapeDataString(ConvertToString(surname, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (givenName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("givenName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(givenName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (anyVIPStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("anyVIPStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(anyVIPStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (vipCodes != null)
            {
                foreach (var item_ in vipCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("vipCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (guaranteeCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("guaranteeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(guaranteeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentMethod != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentMethod") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentMethod, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (discountApplied != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("discountApplied") + "=").Append(System.Uri.EscapeDataString(ConvertToString(discountApplied, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (user != null)
            {
                foreach (var item_ in user) { urlBuilder_.Append(System.Uri.EscapeDataString("user") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (createdBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cancelledByList != null)
            {
                foreach (var item_ in cancelledByList) { urlBuilder_.Append(System.Uri.EscapeDataString("cancelledByList") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (cancelledOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cancelledOn") + "=").Append(System.Uri.EscapeDataString(cancelledOn.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ratePlanCodes != null)
            {
                foreach (var item_ in ratePlanCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("ratePlanCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sourceCodes != null)
            {
                foreach (var item_ in sourceCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("sourceCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketCodes != null)
            {
                foreach (var item_ in marketCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("marketCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeBlockReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeBlockReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeBlockReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("blockName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(blockName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (blockIds != null)
            {
                foreach (var item_ in blockIds) { urlBuilder_.Append(System.Uri.EscapeDataString("blockIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (blockCodes != null)
            {
                foreach (var item_ in blockCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("blockCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (customReference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customReference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customReference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (recordLocator != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("recordLocator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(recordLocator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sortOrder != null)
            {
                foreach (var item_ in sortOrder) { urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomAssignedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomAssignedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomAssignedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomUnassignedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomUnassignedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomUnassignedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomType != null)
            {
                foreach (var item_ in roomType) { urlBuilder_.Append(System.Uri.EscapeDataString("roomType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomFeatures != null)
            {
                foreach (var item_ in roomFeatures) { urlBuilder_.Append(System.Uri.EscapeDataString("roomFeatures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomSpecials != null)
            {
                foreach (var item_ in roomSpecials) { urlBuilder_.Append(System.Uri.EscapeDataString("roomSpecials") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomSmokingPreference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomSmokingPreference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomSmokingPreference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomFloorPreferences != null)
            {
                foreach (var item_ in roomFloorPreferences) { urlBuilder_.Append(System.Uri.EscapeDataString("roomFloorPreferences") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (housekeepingRoomStatuses != null)
            {
                foreach (var item_ in housekeepingRoomStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("housekeepingRoomStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomClasses != null)
            {
                foreach (var item_ in roomClasses) { urlBuilder_.Append(System.Uri.EscapeDataString("roomClasses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomRangeFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRangeFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRangeFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomRangeTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRangeTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRangeTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (communication != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("communication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fetchInstructions != null)
            {
                foreach (var item_ in fetchInstructions) { urlBuilder_.Append(System.Uri.EscapeDataString("fetchInstructions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (allowPreRegistration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("allowPreRegistration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(allowPreRegistration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDepositBalance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasDepositBalance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasDepositBalance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasOpenBalance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasOpenBalance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasOpenBalance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasOpenFolio != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasOpenFolio") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasOpenFolio, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeScheduledCheckOut != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeScheduledCheckOut") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeScheduledCheckOut, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (linkedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("linkedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(linkedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unlinkedOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unlinkedOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unlinkedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (actualArrivals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("actualArrivals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(actualArrivals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (actualDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("actualDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(actualDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (complimentaryReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("complimentaryReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(complimentaryReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dayOfArrivalCancels != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dayOfArrivalCancels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dayOfArrivalCancels, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dayUse != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dayUse") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dayUse, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (earlyDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("earlyDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(earlyDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedArrivals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedArrivals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expectedArrivals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (expectedDepartures != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("expectedDepartures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(expectedDepartures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (extendedStays != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("extendedStays") + "=").Append(System.Uri.EscapeDataString(ConvertToString(extendedStays, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (houseUseReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("houseUseReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(houseUseReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stayovers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stayovers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stayovers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stayDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stayDate") + "=").Append(System.Uri.EscapeDataString(stayDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomRoutingId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roomRoutingId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roomRoutingId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludePseudoRoomReservations != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludePseudoRoomReservations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludePseudoRoomReservations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeReservationIds != null)
            {
                foreach (var item_ in excludeReservationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeReservationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeVIPStatusCodes != null)
            {
                foreach (var item_ in excludeVIPStatusCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeVIPStatusCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeSpecials != null)
            {
                foreach (var item_ in excludeSpecials) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeSpecials") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeFloorPreferences != null)
            {
                foreach (var item_ in excludeFloorPreferences) { urlBuilder_.Append(System.Uri.EscapeDataString("excludeFloorPreferences") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (excludeAdvanceCheckedIn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeAdvanceCheckedIn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeAdvanceCheckedIn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (playerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("playerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(playerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gamingBalanceFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gamingBalanceFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gamingBalanceFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gamingBalanceTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gamingBalanceTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gamingBalanceTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (compAccountingBalanceFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("compAccountingBalanceFrom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(compAccountingBalanceFrom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (compAccountingBalanceTo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("compAccountingBalanceTo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(compAccountingBalanceTo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (searchTypes != null)
            {
                foreach (var item_ in searchTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("searchTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (reservationStatuses != null)
            {
                foreach (var item_ in reservationStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("reservationStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (transportationCodes != null)
            {
                foreach (var item_ in transportationCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("transportationCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (roomReadyStatuses != null)
            {
                foreach (var item_ in roomReadyStatuses) { urlBuilder_.Append(System.Uri.EscapeDataString("roomReadyStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (checkoutMessageReceived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("checkoutMessageReceived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(checkoutMessageReceived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (optedForCommunication != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("optedForCommunication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(optedForCommunication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReservationsDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ReservationsDetails>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("Reservations not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Link Reservations By Chain
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="linkReservationsCriteria">Request to link a list of reservations with another existing reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<Status>> ReservationsLinkedReservationsAsync(string reservationId, LinkReservationsCriteria linkReservationsCriteria, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return ReservationsLinkedReservationsAsync(reservationId, linkReservationsCriteria, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Link Reservations By Chain
        /// </summary>
        /// <param name="reservationId">Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.</param>
        /// <param name="linkReservationsCriteria">Request to link a list of reservations with another existing reservation.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>HATEOAS links which help the consumer to navigate to resources</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<Status>> ReservationsLinkedReservationsAsync(string reservationId, LinkReservationsCriteria linkReservationsCriteria, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            if (reservationId == null)
                throw new System.ArgumentNullException("reservationId");

            if (linkReservationsCriteria == null)
                throw new System.ArgumentNullException("linkReservationsCriteria");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/reservations/linkedReservations/{reservationId}");
            urlBuilder_.Replace("{reservationId}", System.Uri.EscapeDataString(ConvertToString(reservationId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(linkReservationsCriteria, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<Status>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Reservation Statistics
        /// </summary>
        /// <param name="chainName">The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).</param>
        /// <param name="hotelCityCode">The IATA city code; for example DCA, ORD.</param>
        /// <param name="hotelId">The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.</param>
        /// <param name="hotelCodeContext">A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.</param>
        /// <param name="hotelName">A text field used to communicate the proper name of the hotel.</param>
        /// <param name="requestedReportsTypeEndDate">The ending value of the date range.</param>
        /// <param name="fiscalDate">Hotel fiscal date for statistics.</param>
        /// <param name="reportCode">Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.</param>
        /// <param name="requestedReportsTypeStartDate">The starting value of the date range.</param>
        /// <param name="requestedReportsTypeParameterName">Name of the parameter.</param>
        /// <param name="requestedReportsTypeParameterValue">Value of the parameter.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Collection of statistic data of a reservation.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SwaggerResponse<ReservationStatistics>> ReservationsStatisticsAsync(System.Collections.Generic.IEnumerable<string> chainName, System.Collections.Generic.IEnumerable<string> hotelCityCode, System.Collections.Generic.IEnumerable<string> hotelId, System.Collections.Generic.IEnumerable<string> hotelCodeContext, System.Collections.Generic.IEnumerable<string> hotelName, System.Collections.Generic.IEnumerable<System.DateTimeOffset> requestedReportsTypeEndDate, System.Collections.Generic.IEnumerable<System.DateTimeOffset> fiscalDate, System.Collections.Generic.IEnumerable<string> reportCode, System.Collections.Generic.IEnumerable<System.DateTimeOffset> requestedReportsTypeStartDate, System.Collections.Generic.IEnumerable<string> requestedReportsTypeParameterName, System.Collections.Generic.IEnumerable<string> requestedReportsTypeParameterValue, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language)
        {
            return ReservationsStatisticsAsync(chainName, hotelCityCode, hotelId, hotelCodeContext, hotelName, requestedReportsTypeEndDate, fiscalDate, reportCode, requestedReportsTypeStartDate, requestedReportsTypeParameterName, requestedReportsTypeParameterValue, authorization, x_app_key, x_hotelid, x_externalsystem, accept_Language, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Reservation Statistics
        /// </summary>
        /// <param name="chainName">The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).</param>
        /// <param name="hotelCityCode">The IATA city code; for example DCA, ORD.</param>
        /// <param name="hotelId">The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.</param>
        /// <param name="hotelCodeContext">A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.</param>
        /// <param name="hotelName">A text field used to communicate the proper name of the hotel.</param>
        /// <param name="requestedReportsTypeEndDate">The ending value of the date range.</param>
        /// <param name="fiscalDate">Hotel fiscal date for statistics.</param>
        /// <param name="reportCode">Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.</param>
        /// <param name="requestedReportsTypeStartDate">The starting value of the date range.</param>
        /// <param name="requestedReportsTypeParameterName">Name of the parameter.</param>
        /// <param name="requestedReportsTypeParameterValue">Value of the parameter.</param>
        /// <param name="authorization">Bearer token that needs to be passed which is generated post user authentication</param>
        /// <param name="x_app_key">Client or Partner’s Application Key</param>
        /// <param name="x_hotelid">Mandatory parameter to identify the hotel code where the end user is logged in</param>
        /// <param name="x_externalsystem">External system code.</param>
        /// <param name="accept_Language">Language code</param>
        /// <returns>Collection of statistic data of a reservation.</returns>
        /// <exception cref="ReservasExeption">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SwaggerResponse<ReservationStatistics>> ReservationsStatisticsAsync(System.Collections.Generic.IEnumerable<string> chainName, System.Collections.Generic.IEnumerable<string> hotelCityCode, System.Collections.Generic.IEnumerable<string> hotelId, System.Collections.Generic.IEnumerable<string> hotelCodeContext, System.Collections.Generic.IEnumerable<string> hotelName, System.Collections.Generic.IEnumerable<System.DateTimeOffset> requestedReportsTypeEndDate, System.Collections.Generic.IEnumerable<System.DateTimeOffset> fiscalDate, System.Collections.Generic.IEnumerable<string> reportCode, System.Collections.Generic.IEnumerable<System.DateTimeOffset> requestedReportsTypeStartDate, System.Collections.Generic.IEnumerable<string> requestedReportsTypeParameterName, System.Collections.Generic.IEnumerable<string> requestedReportsTypeParameterValue, string authorization, string x_app_key, string x_hotelid, string x_externalsystem, string accept_Language, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/reservations/statistics?");
            if (chainName != null)
            {
                foreach (var item_ in chainName) { urlBuilder_.Append(System.Uri.EscapeDataString("chainName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (hotelCityCode != null)
            {
                foreach (var item_ in hotelCityCode) { urlBuilder_.Append(System.Uri.EscapeDataString("hotelCityCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (hotelId != null)
            {
                foreach (var item_ in hotelId) { urlBuilder_.Append(System.Uri.EscapeDataString("hotelId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (hotelCodeContext != null)
            {
                foreach (var item_ in hotelCodeContext) { urlBuilder_.Append(System.Uri.EscapeDataString("hotelCodeContext") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (hotelName != null)
            {
                foreach (var item_ in hotelName) { urlBuilder_.Append(System.Uri.EscapeDataString("hotelName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (requestedReportsTypeEndDate != null)
            {
                foreach (var item_ in requestedReportsTypeEndDate) { urlBuilder_.Append(System.Uri.EscapeDataString("requestedReportsTypeEndDate") + "=").Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (fiscalDate != null)
            {
                foreach (var item_ in fiscalDate) { urlBuilder_.Append(System.Uri.EscapeDataString("fiscalDate") + "=").Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (reportCode != null)
            {
                foreach (var item_ in reportCode) { urlBuilder_.Append(System.Uri.EscapeDataString("reportCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (requestedReportsTypeStartDate != null)
            {
                foreach (var item_ in requestedReportsTypeStartDate) { urlBuilder_.Append(System.Uri.EscapeDataString("requestedReportsTypeStartDate") + "=").Append(System.Uri.EscapeDataString(item_.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (requestedReportsTypeParameterName != null)
            {
                foreach (var item_ in requestedReportsTypeParameterName) { urlBuilder_.Append(System.Uri.EscapeDataString("requestedReportsTypeParameterName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (requestedReportsTypeParameterValue != null)
            {
                foreach (var item_ in requestedReportsTypeParameterValue) { urlBuilder_.Append(System.Uri.EscapeDataString("requestedReportsTypeParameterValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            var disposeClient_ = true;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_app_key == null)
                        throw new System.ArgumentNullException("x_app_key");
                    request_.Headers.TryAddWithoutValidation("x-app-key", ConvertToString(x_app_key, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_hotelid == null)
                        throw new System.ArgumentNullException("x_hotelid");
                    request_.Headers.TryAddWithoutValidation("x-hotelid", ConvertToString(x_hotelid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_externalsystem != null)
                        request_.Headers.TryAddWithoutValidation("x-externalsystem", ConvertToString(x_externalsystem, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReservationStatistics>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ReservasExeption("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new SwaggerResponse<ReservationStatistics>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("ReservationStatistics not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ReservasExeption("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ReservasExeption(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ReservasExeption(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Request to register call. Either creates a new call or updates an existing call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterCall
    {
        /// <summary>
        /// Call information including caller info, reservation info and comments. Refer to the Generic common types document for information on CallType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("call", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CallType Call { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Holds call information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CallType
    {
        /// <summary>
        /// Call Time Span. Start Date and End Date is used for the Call duration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeSpanType DateTimeSpan { get; set; }

        /// <summary>
        /// Holds caller information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("caller", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CallerType Caller { get; set; }

        /// <summary>
        /// Holds Reservation Id and Hotel Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reservation2 Reservation { get; set; }

        /// <summary>
        /// Call turn away code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turnawayCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TurnawayCode { get; set; }

        /// <summary>
        /// Call comments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Comments { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateTimeSpanType
    {
        [Newtonsoft.Json.JsonProperty("startDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("endDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; }

    }

    /// <summary>
    /// Holds caller information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CallerType
    {
        /// <summary>
        /// Caller First Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(280)]
        public string GivenName { get; set; }

        /// <summary>
        /// Caller Last Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Surname { get; set; }

        /// <summary>
        /// Caller Phone Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Phone { get; set; }

        /// <summary>
        /// Caller Email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Email { get; set; }

        /// <summary>
        /// Caller Fax Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Fax { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UniqueID_Type
    {
        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links : System.Collections.ObjectModel.Collection<InstanceLink>
    {

    }

    /// <summary>
    /// Metadata describing link description objects that MAY appear in the JSON instance representation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstanceLink
    {
        /// <summary>
        /// URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the "templated" property must be set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Href { get; set; }

        /// <summary>
        /// Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Rel { get; set; }

        /// <summary>
        /// Boolean flag that specifies that "href" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Templated { get; set; } = false;

        /// <summary>
        /// HTTP method for requesting the target of the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InstanceLinkMethod Method { get; set; }

        /// <summary>
        /// Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetSchema { get; set; }

        /// <summary>
        /// The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationId { get; set; }

        /// <summary>
        /// Exact copy of the "summary" field on the linked operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

    }

    /// <summary>
    /// Used in conjunction with the Success element to define a business error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarningsType : System.Collections.ObjectModel.Collection<WarningType>
    {

    }

    /// <summary>
    /// Used when a message has been successfully processed to report any warnings or business errors that occurred.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarningType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// An abbreviated version of the error in textual format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ShortText { get; set; }

        /// <summary>
        /// If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// If present, this URL refers to an online description of the error that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DocURL { get; set; }

        /// <summary>
        /// If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Status { get; set; }

        /// <summary>
        /// If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Tag { get; set; }

        /// <summary>
        /// If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RecordId { get; set; }

        /// <summary>
        /// The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type ="Unknown".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Reference Place Holder used as an index for this warning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rph", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string Rph { get; set; }

    }

    /// <summary>
    /// Complex type that contains error details for a REST call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExceptionDetailType
    {
        /// <summary>
        /// Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status code for this occurrence of the problem, set by the origin server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Human-readable description specific to this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>
        /// Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Application error code, which is different from HTTP error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorCode { get; set; }

        /// <summary>
        /// Path to the problem at the resource or property level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorPath { get; set; }

        /// <summary>
        /// Details of the error message, consisting of a hierarchical tree structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorInstance> O_errorDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

    }

    /// <summary>
    /// Complex type that contains error instance details for a REST call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorInstance
    {
        /// <summary>
        /// Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// HTTP status code for this occurrence of the problem, set by the origin server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        /// <summary>
        /// Human-readable description specific to this occurrence of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        /// <summary>
        /// Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// Application error code, which is different from HTTP error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorCode { get; set; }

        /// <summary>
        /// Path to the problem at the resource or property level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("o:errorPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string O_errorPath { get; set; }

    }

    /// <summary>
    /// Response object to the Fetch Reservation Request operation. Based on the criteria, reservation information is returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationsDetails
    {
        /// <summary>
        /// Collection of Reservations and their information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reservations Reservations { get; set; }

        [Newtonsoft.Json.JsonProperty("masterInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MasterInfoType> MasterInfoList { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// The Reservation class contains the current reservation being created or altered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationInfoType
    {
        /// <summary>
        /// Unique identifiers for the reservation for both internal and external systems
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// External Reference information for Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ExternalReferencesType ExternalReferences { get; set; }

        /// <summary>
        /// Collection of room stays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayInfoType RoomStay { get; set; }

        /// <summary>
        /// Collection of guests associated with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationGuest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuestInfoType ReservationGuest { get; set; }

        /// <summary>
        /// Collection of guests who share this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResSharedGuestListType SharedGuests { get; set; }

        /// <summary>
        /// List of attached profiles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachedProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResAttachedProfileListType AttachedProfiles { get; set; }

        /// <summary>
        /// Payment method used for this reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationPaymentMethodType ReservationPaymentMethod { get; set; }

        /// <summary>
        /// Collection of reservation folio windows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationFolioWindows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationFolioWindowsType ReservationFolioWindows { get; set; }

        /// <summary>
        /// Set of reservation preferences which belongs to the Specials group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Specials { get; set; }

        /// <summary>
        /// Color setting of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisplayColor { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ReservationIndicators { get; set; }

        /// <summary>
        /// Current room status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HousekeepingRoomStatusType? RoomStatus { get; set; }

        /// <summary>
        /// Super Search matching terms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchMatches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public SearchMatchesType SearchMatches { get; set; }

        /// <summary>
        /// Point of Sale of reservation. Identifies the entity/channel who made the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOfSale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOfSaleType SourceOfSale { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was waitlisted. This could hold information as history even if reservation is not in Waitlist status anymore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("waitlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WaitlistResType Waitlist { get; set; }

        /// <summary>
        /// Information about the time and duration this reservation was on Queue for Checkin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationQueueInformationType Queue { get; set; }

        /// <summary>
        /// Information regarding housekeeping for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("housekeeping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResHousekeepingType Housekeeping { get; set; }

        /// <summary>
        /// Holds cashiering related information for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCashieringType Cashiering { get; set; }

        /// <summary>
        /// This stores the code for the type of tax calculation especially with tax exemption, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxTypeType TaxType { get; set; }

        /// <summary>
        /// Holds reservation deposit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationDepositType Deposit { get; set; }

        /// <summary>
        /// Collection of reservation allowed actions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(11)]
        public ReservationAllowedActionsType AllowedActions { get; set; }

        /// <summary>
        /// Revenues and Balances Amount summary for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenuesAndBalances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResRevenueBalanceType RevenuesAndBalances { get; set; }

        /// <summary>
        /// Denotes the status of Room Ready, Key Ready messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResMobileNotificationsType MobileNotifications { get; set; }

        /// <summary>
        /// Collection of reservation communication details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCommunicationType ReservationCommunication { get; set; }

        /// <summary>
        /// Information relating to Reservation's Advance Checked In state and Expected Time of Return
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advanceCheckIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvanceCheckInType AdvanceCheckIn { get; set; }

        /// <summary>
        /// This flag will determine wheather the reservation is eligible for Welcome Offer or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("welcomeOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WelcomeOffer { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationInfo CancellationInfo { get; set; }

        /// <summary>
        /// Number of keys created for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KeyCount { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelName { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedServiceTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExpectedServiceTime { get; set; }

        /// <summary>
        /// Boolean True if this reservation is reserving rooms. False if it is only reserving services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStayReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomStayReservation { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

        /// <summary>
        /// When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("walkInIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WalkInIndicator { get; set; }

        /// <summary>
        /// Indicates user restriction on the reservation based on the Access exclusion functionality such as Restriction on Changes, Cancellation or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResAccessRestrictionType? AccessRestriction { get; set; }

        /// <summary>
        /// If not null, reservation is considered to pay out commission to either Travel Agent, Source or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionPayoutTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommissionPayoutToType? CommissionPayoutTo { get; set; }

        /// <summary>
        /// Payment Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Defines if the reservation is pre-registered or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreRegistered { get; set; }

        /// <summary>
        /// Returns true when reservation has an open folio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OpenFolio { get; set; }

        /// <summary>
        /// Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileCheckout { get; set; }

        /// <summary>
        /// Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileViewFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileViewFolio { get; set; }

        /// <summary>
        /// Attribute OptedForCommunication is set to true when the guest has opted for receiving communicationsl related to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optedForCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptedForCommunication { get; set; }

    }

    /// <summary>
    /// This type contains unique information of external reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalReferencesType : System.Collections.ObjectModel.Collection<ExternalReferenceType>
    {

    }

    /// <summary>
    /// This type contains unique information of external reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalReferenceType
    {
        /// <summary>
        /// Unique ID of external reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// ID extension for external reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

        /// <summary>
        /// ID context for external reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

    }

    /// <summary>
    /// Details on the Room Stay including Guest Counts, Time Span of this Room Stay, pointers to Res Guests, guest Memberships, Comments and Special Requests pertaining to this particular Room Stay and finally financial information related to the Room Stay, including Guarantee, Deposit and Payment and Cancellation Penalties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StayInfoType
    {
        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ArrivalDate { get; set; }

        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DepartureDate { get; set; }

        /// <summary>
        /// The Original Time Span covers the Room Stay dates of the original reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType OriginalTimeSpan { get; set; }

        /// <summary>
        /// The expected arrival, return and departure times of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResExpectedTimesType ExpectedTimes { get; set; }

        /// <summary>
        /// A collection of Guest Counts associated with Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adultCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdultCount { get; set; }

        /// <summary>
        /// A collection of Child Counts associated with Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChildCount { get; set; }

        /// <summary>
        /// Room class code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomClass { get; set; }

        /// <summary>
        /// Room type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        /// <summary>
        /// Room Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfRooms { get; set; }

        /// <summary>
        /// Room Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// Rate plan code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Rate amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType RateAmount { get; set; }

        /// <summary>
        /// The Points contains the number of points used to book a particular room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType Points { get; set; }

        /// <summary>
        /// Whether this rate should be suppressed from view
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateSuppressed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateSuppressed { get; set; }

        /// <summary>
        /// Key information about the block for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationBlockType ReservationBlock { get; set; }

        /// <summary>
        /// Booking channel code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingChannelCode { get; set; }

        /// <summary>
        /// Party code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LinkCode { get; set; }

        /// <summary>
        /// True if the rate is a fixed rate, otherwise false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FixedRate { get; set; }

        /// <summary>
        /// The total amount charged for the Room Stay including additional occupant amounts and fees. If TaxInclusive is set to True, then taxes are included in the total amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalAmount { get; set; }

        /// <summary>
        /// The guarantee information associated to the Room Stay. A maximum of 5 occurances are available for use depending on the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        /// <summary>
        /// Promotion Codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PromotionType Promotion { get; set; }

        /// <summary>
        /// Market code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MarketCode { get; set; }

        /// <summary>
        /// Source of business
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Description of the source of business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string SourceCodeDescription { get; set; }

        /// <summary>
        /// Balance amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        /// <summary>
        /// Comp Balance amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType CompBalance { get; set; }

        /// <summary>
        /// Room type code that was charged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypeCharged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomTypeCharged { get; set; }

        /// <summary>
        /// A collection of deposit and/or payments for the Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType DepositPayments { get; set; }

        /// <summary>
        /// Service Status of In House guest like DND or MUP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestServiceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GuestHousekeepingServiceRequestType? GuestServiceStatus { get; set; }

        /// <summary>
        /// Indicates that this reservation is scheduled for automated check out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledCheckoutTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ScheduledCheckoutTime { get; set; }

        /// <summary>
        /// When true, indicates a room number cannot be changed. When false, indicates a room number may be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomNumberLocked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomNumberLocked { get; set; }

        /// <summary>
        /// True indicates as pseudo room type. This is usually used for a posting master reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pseudoRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PseudoRoom { get; set; }

        /// <summary>
        /// Represents the room was assigned by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AssignedByAI { get; set; }

        /// <summary>
        /// Represents the room was assigned by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpgradedByAI { get; set; }

    }

    /// <summary>
    /// Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeSpanType
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }

    }

    /// <summary>
    /// Holds the Arrival and Departure Time Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResExpectedTimesType
    {
        /// <summary>
        /// Arrival Time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationExpectedArrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReservationExpectedArrivalTime { get; set; }

        /// <summary>
        /// Departure Time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationExpectedDepartureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReservationExpectedDepartureTime { get; set; }

    }

    /// <summary>
    /// A monetary value expressed with a currency code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyAmountType
    {
        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// The Redeem Points contains the number of points required to book a room type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PointsType
    {
        /// <summary>
        /// Awards type for the award type rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AwardsType { get; set; }

        /// <summary>
        /// No of points required to book this Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points { get; set; }

    }

    /// <summary>
    /// Key information about the block for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationBlockType
    {
        /// <summary>
        /// Collection of unique block identifiers for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BlockIdList BlockIdList { get; set; }

        /// <summary>
        /// The Name of the block that is attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string BlockName { get; set; }

        /// <summary>
        /// This is the HotelCode of the Block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlockIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// Validations type record returned after Validations are done.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResGuaranteeType
    {
        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GuaranteeCode { get; set; }

        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onHold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnHold { get; set; }

    }

    /// <summary>
    /// Type to specify a rate promotion. Usually attached to a reservation to indicate a specific promotion is applied to the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromotionType
    {
        /// <summary>
        /// Promotion code associated with the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Promotion code Name associated with the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionName { get; set; }

        /// <summary>
        /// Promotion Coupon Code when promotion is setup to have a valid coupon code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("couponCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CouponCode { get; set; }

    }

    /// <summary>
    /// Possible values for the Guest Service Status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GuestHousekeepingServiceRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DoNotDisturb")]
        DoNotDisturb = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MakeUpRoom")]
        MakeUpRoom = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoStatusSelected")]
        NoStatusSelected = 2,

    }

    /// <summary>
    /// Specifies Company or Travel Agent profile using IATA or Corp. No.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResGuestInfoType
    {
        /// <summary>
        /// The Membership object identifying the frequent customer reward program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipInfoType Membership { get; set; }

        /// <summary>
        /// Salutation of honorific. (e.g., Mr. Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// Alternate given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateGivenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AlternateGivenName { get; set; }

        /// <summary>
        /// The middle name of the person name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        /// <summary>
        /// Alternate family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateSurname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AlternateSurname { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Full display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FullName { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Email { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Affiliation or ethnicity to a particular country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType Nationality { get; set; }

        /// <summary>
        /// The supplier's ranking of the customer (e.g., VIP, numerical ranking).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VIPType Vip { get; set; }

        /// <summary>
        /// Address information that is attached to the reservation guest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressSearchType Address { get; set; }

        /// <summary>
        /// Provides information about the guest's anonymization status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnonymizationType Anonymization { get; set; }

        /// <summary>
        /// List of guest names that are accompanying the reservation guest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accompanyGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResAccompanyGuestListType AccompanyGuests { get; set; }

        /// <summary>
        /// Contains information regarding the last stay of this guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestLastStayInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestLastStayInfoType GuestLastStayInformation { get; set; }

        /// <summary>
        /// Guest profile restricted reason code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestRestrictedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string GuestRestrictedCode { get; set; }

        /// <summary>
        /// Guest profile restricted reason description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestRestrictedReasonDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string GuestRestrictedReasonDesc { get; set; }

        /// <summary>
        /// True indicates there are restrictions associated with the current profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestRestricted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GuestRestricted { get; set; }

        /// <summary>
        /// Unique identifier of the police registration card number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registrationCardNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RegistrationCardNo { get; set; }

        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NameTypeType? NameType { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// The Membership object identifies the frequent customer reward program.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MembershipInfoType
    {
        /// <summary>
        /// Membership ID (Unique ID from the memberships table).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MembershipId { get; set; }

        /// <summary>
        /// The code or name of the membership program ('Hertz', 'AAdvantage', etc.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("programCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ProgramCode { get; set; }

        /// <summary>
        /// The code or name of the bonus program. BonusCode can be used to indicate the level of membership (Gold Club, Platinum member, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bonusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BonusCode { get; set; }

        /// <summary>
        /// The description of the ProgramCode.(Delta Previlige for code DP)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipTypeDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipTypeDesc { get; set; }

        /// <summary>
        /// The description of the Bonus Code.(Platinum for code P)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevelDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipLevelDesc { get; set; }

        /// <summary>
        /// The account identification number for this particular member in this particular program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string AccountId { get; set; }

        /// <summary>
        /// The code or name of the membership level and indicates the level of membership (Gold Club, Platinum member, etc.). This is same as the BonusCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipLevel { get; set; }

        /// <summary>
        /// Ranking assigned to the Player Profile by the Gaming system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerRanking { get; set; }

    }

    /// <summary>
    /// Code for a country or a nationality.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CountryNameType
    {
        /// <summary>
        /// Used for Character Strings, length 0 to 200.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Value { get; set; }

        /// <summary>
        /// Code for a country or a nationality.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    /// <summary>
    /// The supplier's ranking of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VIPType
    {
        /// <summary>
        /// VIP Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipCode { get; set; }

        /// <summary>
        /// VIP Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string VipDescription { get; set; }

    }

    /// <summary>
    /// Address Details such as city, state, country, postal code etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressSearchType
    {
        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CityName { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType Country { get; set; }

        /// <summary>
        /// When true indicates that only profiles with city will be fetched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeNoCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeNoCity { get; set; }

    }

    /// <summary>
    /// Provides information about guest's anonymization status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnonymizationType
    {
        /// <summary>
        /// Status of anonymization such as Requested or Anonymized.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymizationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnonymizationStatusType? AnonymizationStatus { get; set; }

    }

    /// <summary>
    /// Guest has been anonymized.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnonymizationStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Anonymized")]
        Anonymized = 1,

    }

    /// <summary>
    /// Collection of accompany guests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResAccompanyGuestListType : System.Collections.ObjectModel.Collection<ResAccompanyGuestInfoType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResAccompanyGuestInfoType
    {
        /// <summary>
        /// Given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FirstName { get; set; }

        /// <summary>
        /// Family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LastName { get; set; }

        /// <summary>
        /// String representation of the full name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FullName { get; set; }

        /// <summary>
        /// Unique identifier of the police registration card number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registrationCardNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RegistrationCardNo { get; set; }

        /// <summary>
        /// Unique identifiers for the Profile for both internal and external systems. In case of Travel Agent the IATA code and in case of Company can be any form of identifier as id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileIdList : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    /// <summary>
    /// Contains last stay related details of the guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuestLastStayInfoType
    {
        /// <summary>
        /// Guest's last stay date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastStayDate { get; set; }

        /// <summary>
        /// Room Number where the guest stayed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LastStayRoom { get; set; }

        /// <summary>
        /// The Rate amount of the guest's last stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType LastStayRate { get; set; }

        /// <summary>
        /// The total number of previous stay of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalStay { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NameTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
        Employee = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Purge")]
        Purge = 8,

    }

    /// <summary>
    /// Collection of shared guest reservations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResSharedGuestListType : System.Collections.ObjectModel.Collection<ResSharedGuestInfoType>
    {

    }

    /// <summary>
    /// Contains information regarding the share reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResSharedGuestInfoType
    {
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Given name, first name or names
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FirstName { get; set; }

        /// <summary>
        /// Family name, last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LastName { get; set; }

        /// <summary>
        /// String representation of the full name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FullName { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileId
    {
        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResAttachedProfileListType : System.Collections.ObjectModel.Collection<ResAttachedProfileType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResAttachedProfileType
    {
        /// <summary>
        /// Attached profile name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Name { get; set; }

        /// <summary>
        /// Collection of unique profile identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResProfileTypeType? ReservationProfileType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResProfileTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TravelAgent")]
        TravelAgent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationContact")]
        ReservationContact = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingContact")]
        BillingContact = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Addressee")]
        Addressee = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationPaymentMethodType
    {
        [Newtonsoft.Json.JsonProperty("paymentCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResPaymentCardType PaymentCard { get; set; }

        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        [Newtonsoft.Json.JsonProperty("authorizationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationRuleType AuthorizationRule { get; set; }

        /// <summary>
        /// Information on an email for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailFolioInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailFolioInfo EmailFolioInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("folioView", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolioView { get; set; }

    }

    /// <summary>
    /// Information on a credit card for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResPaymentCardType
    {
        /// <summary>
        /// credit card id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type CardId { get; set; }

        [Newtonsoft.Json.JsonProperty("currentAuthorizedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType CurrentAuthorizedAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("approvalAmountNeeded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType ApprovalAmountNeeded { get; set; }

        /// <summary>
        /// Approval code sent by the credit card company on a successful authorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ApprovalCode { get; set; }

        /// <summary>
        /// Indicates the type of credit card from a defined list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardTypeType? CardType { get; set; }

        /// <summary>
        /// Indicates the user defined credit card type if credit card type from a defined list is not provided
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedCardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string UserDefinedCardType { get; set; }

        [Newtonsoft.Json.JsonProperty("cardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CardNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("cardNumberMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CardNumberMasked { get; set; }

        [Newtonsoft.Json.JsonProperty("cardNumberLast4Digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CardNumberLast4Digits { get; set; }

        /// <summary>
        /// Expiration date of the credit card
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        /// <summary>
        /// Masked Expiration date of the credit card
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDateMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExpirationDateMasked { get; set; }

        [Newtonsoft.Json.JsonProperty("expirationDateExpired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpirationDateExpired { get; set; }

        [Newtonsoft.Json.JsonProperty("cardHolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// This contains information on whether EFT is enabled. A value of 'C' indicates EFT is enabled and 'M' indicates manual authorization is available for this payment card type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardProcessingType? Processing { get; set; }

        [Newtonsoft.Json.JsonProperty("swiped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Swiped { get; set; }

        /// <summary>
        /// Flag to determine if the credit card was swiped/manually entered , This element is only used when PAYMENT SERVICE DIRECTIVE(PSD) Opera Control is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardPresent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CardPresent { get; set; }

        /// <summary>
        /// This contains information on whether credit card is tokenized (token enabled). A value of 'Token' indicates credit card is token enabled and 'CardNumber' indicates non token environment for this payment card type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardOrToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardNumberTypeType? CardOrToken { get; set; }

        /// <summary>
        /// Customer Initiated Transaction(CIT) Id for Credit Cards. This is only used when PAYMENT SERVICES DIRECTIVE (PSD2) Opera Control is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CitId { get; set; }

    }

    /// <summary>
    /// This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CardTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ab")]
        Ab = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Am")]
        Am = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ax")]
        Ax = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cb")]
        Cb = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Dc")]
        Dc = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Ds")]
        Ds = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Dt")]
        Dt = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Ec")]
        Ec = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Er")]
        Er = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Jc")]
        Jc = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Jl")]
        Jl = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Mc")]
        Mc = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Nb")]
        Nb = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"So")]
        So = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"St")]
        St = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Sw")]
        Sw = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Va")]
        Va = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Xy")]
        Xy = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Zz")]
        Zz = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Cp")]
        Cp = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Cu")]
        Cu = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CardProcessingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Eft")]
        Eft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,

    }

    /// <summary>
    /// Simple type for indicating if credit card number is tokenized.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CardNumberTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CardNumber")]
        CardNumber = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Token")]
        Token = 1,

    }

    /// <summary>
    /// Configured rule for computing the amount to authorize.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationRuleType
    {
        /// <summary>
        /// The authorization rule code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>
        /// The amount applicable to the authorization rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Amount { get; set; }

        /// <summary>
        /// A percentage value if the authorization rule is percentage based.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

    }

    /// <summary>
    /// Information on an email for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailType
    {
        /// <summary>
        /// Defines the e-mail address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Defines the purpose of the e-mail address (e.g. personal, business, listserve).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the Type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// Supported Email format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmailTypeEmailFormat? EmailFormat { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Collection of reservation folio windows.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationFolioWindowsType : System.Collections.ObjectModel.Collection<ReservationFolioWindowType>
    {

    }

    /// <summary>
    /// Folio window view which holds the set of folios for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationFolioWindowType
    {
        /// <summary>
        /// The window's configured payee information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayeeInfoType PayeeInfo { get; set; }

        /// <summary>
        /// Running balance of the window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        /// <summary>
        /// Payment Method Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("folioWindowNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolioWindowNo { get; set; }

    }

    /// <summary>
    /// Payee information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeInfoType
    {
        /// <summary>
        /// Opera name id of the payee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type PayeeId { get; set; }

        /// <summary>
        /// Name of the payee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("payeeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string PayeeName { get; set; }

    }

    /// <summary>
    /// Collection of lamp indicators.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndicatorsType : System.Collections.ObjectModel.Collection<IndicatorType>
    {

    }

    /// <summary>
    /// Lamp indicator Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndicatorType
    {
        /// <summary>
        /// Name of the indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("indicatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IndicatorName { get; set; }

        /// <summary>
        /// Indicates number of occurrences of the indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HousekeepingRoomStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Clean")]
        Clean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Dirty")]
        Dirty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Pickup")]
        Pickup = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inspected")]
        Inspected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfOrder")]
        OutOfOrder = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfService")]
        OutOfService = 5,

    }

    /// <summary>
    /// List of Generic Name-Value-Pair Parameters used for super search matches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchMatchesType : System.Collections.ObjectModel.Collection<SearchMatchType>
    {

    }

    /// <summary>
    /// Search match indicating attribute and the matching value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchMatchType
    {
        /// <summary>
        /// Search match attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Attribute { get; set; }

        /// <summary>
        /// Search match value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Point of Sale of reservation. Identifies the entity/channel who made the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SourceOfSaleType
    {
        /// <summary>
        /// Type of entity/channel who made the reservation..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string SourceType { get; set; }

        /// <summary>
        /// The entity/channel who made the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceCode { get; set; }

    }

    /// <summary>
    /// Information regarding why reservation is being /has been waitlisted.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WaitlistResType
    {
        /// <summary>
        /// Waitlist Reason Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ReasonDescription { get; set; }

        /// <summary>
        /// Waitlist priority Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priorityDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PriorityDescription { get; set; }

        /// <summary>
        /// Description why the reservation is being /has been waitlisted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Waitlist Reason Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Waitlist Priority Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priorityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PriorityCode { get; set; }

        /// <summary>
        /// Guest telephone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Telephone { get; set; }

    }

    /// <summary>
    /// Information regarding the Date, Duration and Priority of the reservation on Queue for Check in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationQueueInformationType
    {
        /// <summary>
        /// Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpan TimeSpan { get; set; }

        /// <summary>
        /// Information for the message sent to the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestTextInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueueTextInfoType GuestTextInfo { get; set; }

        /// <summary>
        /// The Queue Priority given to this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        /// <summary>
        /// The average time, in seconds, a reservation was on queue prior to Check-In.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageQueueTimeToCheckIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AverageQueueTimeToCheckIn { get; set; }

        /// <summary>
        /// The average time, in seconds, of the reservations currently in queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageQueueTimeCurrentReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AverageQueueTimeCurrentReservations { get; set; }

        /// <summary>
        /// The Business date on which the reservation was due to arrive and is currently placed on Queue for Check In.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? QueueDate { get; set; }

    }

    /// <summary>
    /// Information regarding the message sent to guest.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QueueTextInfoType
    {
        /// <summary>
        /// Time the text was last sent to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sentTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SentTime { get; set; }

        /// <summary>
        /// User name of the user who sent message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sentBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string SentBy { get; set; }

    }

    /// <summary>
    /// Holds housekeeping turndown service information for the room.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResHousekeepingType
    {
        /// <summary>
        /// Turndown instructions for the room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Instructions { get; set; }

        /// <summary>
        /// Indicates whether guest wants turndown facility or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turndownRequested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TurndownRequested { get; set; }

        /// <summary>
        /// Expected Start Time for housekeeping task(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedServiceTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedServiceTime { get; set; }

        /// <summary>
        /// Current room status. Current room status is populated only if room is assigned to the reservation and reservation is due in or in house.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HousekeepingRoomStatusType? RoomStatus { get; set; }

    }

    /// <summary>
    /// Cashiering Information for the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResCashieringType
    {
        /// <summary>
        /// Revenues and Balances Amount summary for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenuesAndBalances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResRevenueBalanceType RevenuesAndBalances { get; set; }

        /// <summary>
        /// Billing privileges set on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingPrivileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingPrivilegesType BillingPrivileges { get; set; }

        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationTaxTypeInfo TaxType { get; set; }

        /// <summary>
        /// This stores the information for Bed Tax Reporting. Mainly used in Maldives.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bedTaxReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BedTaxReportingType BedTaxReporting { get; set; }

        /// <summary>
        /// Information regarding comp accounting on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compAccounting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCompAccountingType CompAccounting { get; set; }

        /// <summary>
        /// Information regarding the selected preconfigured routing instruction on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPreConfiguredRoutingInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResPreConfiguredRoutingInstrType ReservationPreConfiguredRoutingInstruction { get; set; }

        /// <summary>
        /// Date of the last Room And Tax posting. Used primarily to know the date in case of Advance Billing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastRoomAndTaxPostedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastRoomAndTaxPostedDate { get; set; }

        /// <summary>
        /// This attribute is to verify if reverse check-in is allowed for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reverseCheckInAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseCheckInAllowed { get; set; }

        /// <summary>
        /// This attribute is to verify if reverse advance check-in is allowed for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reverseAdvanceCheckInAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseAdvanceCheckInAllowed { get; set; }

        /// <summary>
        /// Specifies whether reservation has a financial transaction associated with it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionsPosted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransactionsPosted { get; set; }

    }

    /// <summary>
    /// Revenue and Balance Amount summary for the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResRevenueBalanceType
    {
        /// <summary>
        /// Total Fixed Charges on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalFixedCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalFixedCharge { get; set; }

        /// <summary>
        /// Total payment received for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalPayment { get; set; }

        /// <summary>
        /// Room Revenue generated by the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType RoomRevenue { get; set; }

        /// <summary>
        /// Food and Beverage Revenue generated by the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foodAndBevRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType FoodAndBevRevenue { get; set; }

        /// <summary>
        /// Total Revenue generated by the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalRevenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalRevenue { get; set; }

        /// <summary>
        /// Balance amount on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        /// <summary>
        /// Comp Balance amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType CompBalance { get; set; }

    }

    /// <summary>
    /// This stores the information for Bed Tax Reporting. Mainly used in Maldives.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingPrivilegesType
    {
        /// <summary>
        /// Flag used by interface program during check in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postingRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostingRestriction { get; set; }

        /// <summary>
        /// Indicates if the reservation has charging privileges before arrival.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preStayCharging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreStayCharging { get; set; }

        /// <summary>
        /// Indicates if the reservation has charging privileges after checkout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postStayCharging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostStayCharging { get; set; }

        /// <summary>
        /// Indicates if the guest can do video checkout
        /// </summary>
        [Newtonsoft.Json.JsonProperty("videoCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VideoCheckout { get; set; }

        /// <summary>
        /// Indicated if a new reservation should be created and automatically checked in whenever the room is checked out. Available for pseudo room types only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowAutoCheckin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowAutoCheckin { get; set; }

        /// <summary>
        /// Indicates if the is a candidate for auto folio settlement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSettlement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoSettlement { get; set; }

        /// <summary>
        /// The folio settlement type for auto folio settlement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSettlementType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AutoSettlementType { get; set; }

        /// <summary>
        /// The interval of days between each auto folio settlement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoSettlementFreq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AutoSettlementFreq { get; set; }

        /// <summary>
        /// Indicates if the reservation will be included in the Automatic Credit Limit Overages process and also be listed in the Credit Limit Overages screen results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditLimitAutoPay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreditLimitAutoPay { get; set; }

    }

    /// <summary>
    /// Provides information about the Tax Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationTaxTypeInfo
    {
        /// <summary>
        /// Code of the Tax Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Description of the Tax Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Tax exempt number on the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxExemptNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TaxExemptNo { get; set; }

    }

    /// <summary>
    /// This stores the information for Bed Tax Reporting. Mainly used in Maldives.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BedTaxReportingType
    {
        /// <summary>
        /// Tax Registration Number for Maldives Bed Tax Reporting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxRegistrationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TaxRegistrationNo { get; set; }

    }

    /// <summary>
    /// Information regarding comp accounting on the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResCompAccountingType
    {
        /// <summary>
        /// Code used to identify the casino comp type and ranking of a guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CompType { get; set; }

        /// <summary>
        /// ID of the employee who will act as the host for this guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Authorizer { get; set; }

        /// <summary>
        /// Indicates if the Comp Billing/posting Exist
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compPostings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CompPostings { get; set; }

    }

    /// <summary>
    /// Instruction to attach Pre-Configured Routing Instructions to a Reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResPreConfiguredRoutingInstrType
    {
        /// <summary>
        /// The authorizer information for Promotion Code with attached Complimentary Routing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizerInfoType AuthorizerInfo { get; set; }

        /// <summary>
        /// Rate Code with attached Routing Instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Profile Type with attached Routing Instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResProfileTypeType? ProfileType { get; set; }

        /// <summary>
        /// Promotion Code with attached Complimentary Routing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

    }

    /// <summary>
    /// Authorizer Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizerInfoType
    {
        [Newtonsoft.Json.JsonProperty("authorizerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type AuthorizerId { get; set; }

        /// <summary>
        /// Application user name of the authorizer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AuthorizerUserName { get; set; }

        /// <summary>
        /// Full name of the authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AuthorizerName { get; set; }

        /// <summary>
        /// Rate code of the authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerRateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AuthorizerRateCode { get; set; }

        /// <summary>
        /// Indicates whether user has the choice to have reservation inherit rate code from the authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inheritAuthorizerRateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InheritAuthorizerRateCode { get; set; }

    }

    /// <summary>
    /// Provides information about the Tax Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxTypeType
    {
        /// <summary>
        /// Code of the Tax Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Description of the Tax Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Reservation Deposit Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationDepositType
    {
        /// <summary>
        /// Deposit Amount Paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountPaid { get; set; }

        /// <summary>
        /// Deposit Due Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>
        /// Deposit Posting Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PostingDate { get; set; }

        /// <summary>
        /// Resolves whether reservation has paid deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPaid { get; set; }

        /// <summary>
        /// Resolves whether reservation has outstanding deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasOutstanding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasOutstanding { get; set; }

    }

    /// <summary>
    /// Allowed action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationAllowedActionsType : System.Collections.ObjectModel.Collection<ReservationAllowedActionType>
    {

    }

    /// <summary>
    /// Flag indicating whether the Enrollment is in progress or not for the Profile associated with this Reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReservationAllowedActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Move")]
        Move = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PreCharge")]
        PreCharge = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PostCharge")]
        PostCharge = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FacilitySchedule")]
        FacilitySchedule = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Upsell")]
        Upsell = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PreCheckIn")]
        PreCheckIn = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToNoShowCancel")]
        PostToNoShowCancel = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NameChange")]
        NameChange = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollToPrimaryMembership")]
        EnrollToPrimaryMembership = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollInProgress")]
        EnrollInProgress = 12,

    }

    /// <summary>
    /// Contains the status of Room Ready and Key Ready messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResMobileNotificationsType
    {
        /// <summary>
        /// Denotes the status of Room Ready message. It can have one of the values:PENDING, COMPLETED or FAILED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomReady", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommunicationStatusType? RoomReady { get; set; }

        /// <summary>
        /// Denotes the status of Key Ready message. It can have one of the values:PENDING, COMPLETED or FAILED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyReady", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommunicationStatusType? KeyReady { get; set; }

        /// <summary>
        /// Indicates if the Mobile checkout message is received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("checkoutMessageReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckoutMessageReceived { get; set; }

        /// <summary>
        /// Indicates if user action is required. The action could be for sending Room Ready or Key Ready Notification. It could also be for initiating Checkout
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiresAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequiresAction { get; set; }

        /// <summary>
        /// Error message when Mobile Notification has failed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ErrorMessage { get; set; }

    }

    /// <summary>
    /// Enum to denote the Status of Readiness messages sent to Guest Devices.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommunicationStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingAvailability")]
        PendingAvailability = 6,

    }

    /// <summary>
    /// Communication details for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResCommunicationType
    {
        /// <summary>
        /// List of Telephone Number Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Telephones Telephones { get; set; }

        /// <summary>
        /// List of email address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Emails Emails { get; set; }

    }

    /// <summary>
    /// Information on a telephone number for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TelephoneInfoType
    {
        /// <summary>
        /// Phone details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneType Telephone { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Information on a telephone number for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TelephoneType
    {
        /// <summary>
        /// Indicates type of technology associated with this telephone number, such as Voice, Data, Fax, Pager, Mobile, TTY, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneTechType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PhoneTechType { get; set; }

        /// <summary>
        /// Describes the type of telephone number, in the context of its general use (e.g. Home, Business, Emergency Contact, Travel Arranger, Day, Evening).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneUseType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PhoneUseType { get; set; }

        /// <summary>
        /// Description of the PhoneUseType code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneUseTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PhoneUseTypeDescription { get; set; }

        /// <summary>
        /// Telephone number assigned to a single location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Extension to reach a specific party at the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Extension { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Information on an email for the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailInfoType
    {
        /// <summary>
        /// eMail deatils for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailType Email { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Information relating to Reservation's Advance Checked In state and Expected Time of Return
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvanceCheckInType
    {
        /// <summary>
        /// Indicates if the reservation is marked as Advance Checked In
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advanceCheckedIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdvanceCheckedIn { get; set; }

        /// <summary>
        /// Expected Return Time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedReturnTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedReturnTime { get; set; }

        /// <summary>
        /// ETR Comments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eTRComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ETRComments { get; set; }

    }

    /// <summary>
    /// This reservation is in checked in status and the business date is past departure date. This could occur when ORS and PMS are in same environment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PMS_ResStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Waitlisted")]
        Waitlisted = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DueIn")]
        DueIn = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DueOut")]
        DueOut = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Walkin")]
        Walkin = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingCheckout")]
        PendingCheckout = 10,

    }

    /// <summary>
    /// Indicates any Updates/Changes on the reservation as well as Reservation Cancellation are not allowed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResAccessRestrictionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Change")]
        Change = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeOrCancel")]
        ChangeOrCancel = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommissionPayoutToType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TravelAgent")]
        TravelAgent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TravelAgentSource")]
        TravelAgentSource = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MasterInfoType
    {
        [Newtonsoft.Json.JsonProperty("codeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CodeInfoType> CodeInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("codeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MasterType? CodeType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CodeInfoType
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MasterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Country")]
        Country = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"State")]
        State = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AddressType")]
        AddressType = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PhoneType")]
        PhoneType = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RateCategory")]
        RateCategory = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CalculationRule")]
        CalculationRule = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PostingRythym")]
        PostingRythym = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingInstruction")]
        BillingInstruction = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TransactionCode")]
        TransactionCode = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DisplaySet")]
        DisplaySet = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MailingActions")]
        MailingActions = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DistanceType")]
        DistanceType = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"District")]
        District = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Territory")]
        Territory = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FiscalRegion")]
        FiscalRegion = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"InventoryItem")]
        InventoryItem = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Package")]
        Package = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomFeaturePreference")]
        RoomFeaturePreference = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SpecialPreference")]
        SpecialPreference = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Promotion")]
        Promotion = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Department")]
        Department = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationPreference")]
        ReservationPreference = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"FacilityTask")]
        FacilityTask = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomType")]
        RoomType = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"RateCode")]
        RateCode = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfOrderReason")]
        OutOfOrderReason = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Block")]
        Block = 26,

    }

    /// <summary>
    /// Request object to create reservations. Includes instructions for information which needs to be returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateReservation
    {
        /// <summary>
        /// Collection of Reservations which have to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationsType Reservations { get; set; }

        /// <summary>
        /// Instruction on what has to be fetched. Refer to Generic common types document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fetchInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ReservationInstructionType> FetchInstructions { get; set; }

        /// <summary>
        /// Collection of Reservations which have to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationsInstructionsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationsInstructionsType ReservationsInstructionsType { get; set; }

        /// <summary>
        /// Channel specific information to be received in case the reservation is being created through a channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelResvRQInfoType ChannelInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// A collection of Reservation objects and Unique IDs of Reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotelReservationsType
    {
        /// <summary>
        /// A collection of Reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<HotelReservationType> Reservation { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// The Reservation class contains the current reservation being created or altered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotelReservationType
    {
        /// <summary>
        /// Used to provide PMS and/or CRS identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// External Reference information for Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ExternalReferencesType ExternalReferences { get; set; }

        /// <summary>
        /// Point of Sale of reservation. Identifies the entity/channel who made the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOfSale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOfSaleType SourceOfSale { get; set; }

        /// <summary>
        /// Room stays information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoomStayType RoomStay { get; set; }

        /// <summary>
        /// Reservation Comp Authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compAuthorizer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompAuthorizerInfoType CompAuthorizer { get; set; }

        /// <summary>
        /// Collection of guests associated with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ResGuestType> ReservationGuests { get; set; }

        /// <summary>
        /// Collection of guests who share this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResSharedGuestListType SharedGuests { get; set; }

        /// <summary>
        /// Entry Date into the country. (Croatian Requirements).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalGuestInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuestAdditionalInfoType AdditionalGuestInfo { get; set; }

        /// <summary>
        /// Collection of guests associated with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationProfiles ReservationProfiles { get; set; }

        /// <summary>
        /// Collection of reservation communication details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCommunicationType ReservationCommunication { get; set; }

        /// <summary>
        /// Collection of TrackIt Items available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackItItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TrackItItemsType TrackItItems { get; set; }

        /// <summary>
        /// Collection of share reservation available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationsType Shares { get; set; }

        /// <summary>
        /// Collection of Locators available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationLocatorsType Locators { get; set; }

        /// <summary>
        /// Collection of attachments available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AttachmentsType Attachments { get; set; }

        /// <summary>
        /// Collection of Web Registration Cards available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webRegistrationCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AttachmentsType WebRegistrationCards { get; set; }

        /// <summary>
        /// Collection of Service Requests available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceRequests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ServiceRequests ServiceRequests { get; set; }

        /// <summary>
        /// Collection of Reservation Activities available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ActivityLookUpList ReservationActivities { get; set; }

        /// <summary>
        /// Collection of Scheduled Activities available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ActivityLookUpList ScheduledActivities { get; set; }

        /// <summary>
        /// Collection of Prepaid Cards available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prepaidCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PrepaidCardsType PrepaidCards { get; set; }

        /// <summary>
        /// Collection of profile awards available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileAwards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AwardsType ProfileAwards { get; set; }

        /// <summary>
        /// A Service object represents a non-room product provided to guests. Service products may have associated inventory and charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPackages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationPackageType> ReservationPackages { get; set; }

        /// <summary>
        /// A collection of inventory items attached to a reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResInventoryItemsType InventoryItems { get; set; }

        /// <summary>
        /// List of Notes for the Guest related to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> Comments { get; set; }

        /// <summary>
        /// List of Notes for the Guest related to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> GuestComments { get; set; }

        /// <summary>
        /// List of Memberships for the Guest related to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<MembershipType> GuestMemberships { get; set; }

        /// <summary>
        /// Collection of reservation preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceTypeType> PreferenceCollection { get; set; }

        /// <summary>
        /// List of reservation memberships.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationMembershipType> ReservationMemberships { get; set; }

        /// <summary>
        /// A collection of Payment Method objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationPaymentMethodsType ReservationPaymentMethods { get; set; }

        /// <summary>
        /// Set of Routing Instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routingInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public RoutingInfoListType RoutingInstructions { get; set; }

        /// <summary>
        /// A collection of Cancellation Penalties objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationPoliciesType ReservationPolicies { get; set; }

        /// <summary>
        /// Holds cashiering related information for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCashieringType Cashiering { get; set; }

        /// <summary>
        /// Holds rooms housekeeping information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("housekeeping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResHousekeepingType Housekeeping { get; set; }

        /// <summary>
        /// Reservations related to the current Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LinkedReservationsInfoType LinkedReservation { get; set; }

        [Newtonsoft.Json.JsonProperty("extSystemSync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExtSystemSync { get; set; }

        /// <summary>
        /// Collections of user defined fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDefinedFieldsType UserDefinedFields { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ReservationIndicators { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was waitlisted. This could hold information as history even if reservation is no more in Waitlist status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("waitlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WaitlistResType Waitlist { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was cancelled. This could hold information as history even if reservation is no more in in Cancelled status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Cancellation Cancellation { get; set; }

        /// <summary>
        /// Catering event information if reservation is associated with the catering event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("catering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CateringResInfoType Catering { get; set; }

        /// <summary>
        /// List of reservation alerts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AlertsType Alerts { get; set; }

        /// <summary>
        /// List of reservation Traces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelReservationTracesType Traces { get; set; }

        /// <summary>
        /// List of reservation confirmation letters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmationLetters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ConfirmationsType ConfirmationLetters { get; set; }

        /// <summary>
        /// List of reservation calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("callHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CallHistoryType CallHistory { get; set; }

        /// <summary>
        /// List of reservation fixed charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public FixedChargesType FixedCharges { get; set; }

        /// <summary>
        /// List of Messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public GuestMessagesType GuestMessages { get; set; }

        /// <summary>
        /// An id representing the record lock for this reservation. When passed, update operation will verify that this lock is still valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lockHandle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LockHandle { get; set; }

        /// <summary>
        /// List of overrides done for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public OverrideInstructionsType OverrideInstructions { get; set; }

        /// <summary>
        /// Information about the time and duration this reservation was on Queue for Checkin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationQueueInformationType Queue { get; set; }

        /// <summary>
        /// Collection of allowed actions for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(11)]
        public ReservationAllowedActionsType AllowedActions { get; set; }

        /// <summary>
        /// List of eCoupons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCoupons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ECouponsType ECoupons { get; set; }

        /// <summary>
        /// List of transaction diversions attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDiversions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionDiversions TransactionDiversions { get; set; }

        /// <summary>
        /// Information relating to Reservation's Advance Checked In state and Expected Time of Return
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advanceCheckIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvanceCheckInType AdvanceCheckIn { get; set; }

        /// <summary>
        /// List of Reservation Tickets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TicketsType Tickets { get; set; }

        /// <summary>
        /// Configurable Access Restriction Message for Excluded Block or Rate Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessRestrictionMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string AccessRestrictionMessage { get; set; }

        /// <summary>
        /// List of ECertificates attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationECertificatesType ECertificates { get; set; }

        /// <summary>
        /// List of Custom Name Value Information attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customNameValueDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameValueDetailType CustomNameValueDetail { get; set; }

        /// <summary>
        /// List of Custom Charge Exemptions attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customChargeExemptionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CustomChargeExemptionsType CustomChargeExemptionDetails { get; set; }

        /// <summary>
        /// This flag will force to borrow from house if borrow required for number of rooms requested, this will only applicable when reservation is attached to a Block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoBorrowFromHouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoBorrowFromHouse { get; set; }

        /// <summary>
        /// Forcefully override the create/update action on the Reservation. For real-time CRS interfaces, this element is used as force selling indicator in case of Create or Update Reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideExternalChecks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideExternalChecks { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Boolean True if this reservation is reserving rooms. False if it is only reserving services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStayReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomStayReservation { get; set; }

        /// <summary>
        /// Indicates the Actual status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        /// <summary>
        /// Indicates the Computed status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

        /// <summary>
        /// When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("walkIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WalkIn { get; set; }

        /// <summary>
        /// Indicates whether to show the rate or not on a printed document which includes the rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintRate { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateTimeFormatConverter))]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateTimeFormatConverter))]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// Business Date when the reservation was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createBusinessDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreateBusinessDate { get; set; }

        /// <summary>
        /// Business Date when the reservation was last reinstated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reinstateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReinstateDate { get; set; }

        /// <summary>
        /// Party/PartyCode when reservation is part of a party(a small group).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("party", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Party { get; set; }

        /// <summary>
        /// Name Of the Resort/Hotel for the primary enrollment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryEnrollmentResort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string PrimaryEnrollmentResort { get; set; }

        /// <summary>
        /// Name of the Chain for the primary enrollment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryEnrollmentChain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string PrimaryEnrollmentChain { get; set; }

        /// <summary>
        /// Custom Reference to identify reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CustomReference { get; set; }

        /// <summary>
        /// The color to display this reservation on room grid displays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisplayColor { get; set; }

        /// <summary>
        /// Mark this reservation as recently accessed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markAsRecentlyAccessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkAsRecentlyAccessed { get; set; }

        /// <summary>
        /// Indicates to Override the Room Inventory Check if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInventoryCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideInventoryCheck { get; set; }

        /// <summary>
        /// Indicates user restriction on the reservation based on the Access exclusion functionality such as Restriction on Changes, Cancellation or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResAccessRestrictionType? AccessRestriction { get; set; }

        /// <summary>
        /// Is the reservation pre-registered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreRegistered { get; set; }

        /// <summary>
        /// Indicates whether the reservation is eligible for upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeEligible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpgradeEligible { get; set; }

        [Newtonsoft.Json.JsonProperty("overrideBlockRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideBlockRestriction { get; set; }

        /// <summary>
        /// Flag to allow auto checkin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowAutoCheckin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowAutoCheckin { get; set; }

        [Newtonsoft.Json.JsonProperty("hasOpenFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasOpenFolio { get; set; }

        /// <summary>
        /// Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileCheckout { get; set; }

        /// <summary>
        /// Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileViewFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileViewFolio { get; set; }

        /// <summary>
        /// Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowPreRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowPreRegistration { get; set; }

        /// <summary>
        /// Flag containing true or false value to determine if the guest has opted for communications pertaining to this reservation.Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is marked for communication. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optedForCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptedForCommunication { get; set; }

        /// <summary>
        /// This attribute represents Hotel charge card number. This number is generated automatically in OPERA when a reservation is created in OPERA. It is part of a functionality that provide the guest with the convenience of placing all their charges directly on their reservation folio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargeCardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ChargeCardNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomStayType
    {
        /// <summary>
        /// Registration Number of the reservation for the current day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type RegistrationNumber { get; set; }

        /// <summary>
        /// Room information of the reservation for the current day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentRoomInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrentRoomInfoType CurrentRoomInfo { get; set; }

        /// <summary>
        /// A collection of Room Rates associated with a particular Room Stay. Each Room Rate combination can have multiple rates. Example King room, Rack rate plan, Monday through Thursday, weekday amount, Friday and Saturday, weekend amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoomRateType> RoomRates { get; set; }

        [Newtonsoft.Json.JsonProperty("guestCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCountsType GuestCounts { get; set; }

        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ArrivalDate { get; set; }

        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DepartureDate { get; set; }

        /// <summary>
        /// The Expected Arrival and Departure Times.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expectedTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResExpectedTimesType ExpectedTimes { get; set; }

        /// <summary>
        /// The Original Time Span(Arrival, Departure) which covers the Room Stay. In case of Rolling No Show TimeSpan's StratDate moves forward but OriginalTimeSpan's StratDate remains the same.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType OriginalTimeSpan { get; set; }

        /// <summary>
        /// The guarantee information associated to the Room Stay. A maximum of 5 occurances are available for use depending on the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        /// <summary>
        /// Promotions applied to the reservation to get the promotional rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PromotionType Promotion { get; set; }

        /// <summary>
        /// Connecting Rooms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suiteWith", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string SuiteWith { get; set; }

        /// <summary>
        /// The total amount charged for the Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Total { get; set; }

        /// <summary>
        /// The total number of Points charged for the Room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType TotalPoints { get; set; }

        /// <summary>
        /// Informative indicators indicating different values of an attribute exists over the stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("multiValueAttrs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> MultiValueAttrs { get; set; }

        /// <summary>
        /// Indicates Upsell Information to be applied on Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpsellInfoType UpsellInfo { get; set; }

        /// <summary>
        /// Denotes the status of Room Ready and Key Ready messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResMobileNotificationsType MobileNotifications { get; set; }

        /// <summary>
        /// When true, indicates a room number cannot be changed. When false, indicates a room number may be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomNumberLocked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomNumberLocked { get; set; }

        /// <summary>
        /// This control whether rate info will be printed in confirmation letter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintRate { get; set; }

        /// <summary>
        /// This is populated in case of primary share scenario. This indicates whether this reservation is primary or non primary. Changes or postings to the 'non-primary' share reservation is not allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryShareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrimaryShareTypeType? PrimaryShareType { get; set; }

        /// <summary>
        /// Indicates whether the reservation is pre-registered for internet check-in or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remoteCheckInAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemoteCheckInAllowed { get; set; }

        /// <summary>
        /// Classifies the medium(Channel field on reservation screen) through which the reservation is made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingMedium", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingMedium { get; set; }

        /// <summary>
        /// Description of the booking medium.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingMediumDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BookingMediumDescription { get; set; }

        /// <summary>
        /// Number of Upsell Offers Available for this stay. This will only be populated if the Upsell Instruction is included in the Allowed Instruction request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableUpsellOfferCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableUpsellOfferCount { get; set; }

    }

    /// <summary>
    /// Room information of the reservation for the current day.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentRoomInfoType
    {
        /// <summary>
        /// Current room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        /// <summary>
        /// Current room number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// Suggested room numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suggestedRoomNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CodeListType SuggestedRoomNumbers { get; set; }

        /// <summary>
        /// Current room description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomDescription { get; set; }

        /// <summary>
        /// Represents the room view code like City view, River view, Ocean view etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomViewCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RoomViewCode { get; set; }

        /// <summary>
        /// Represents the room was assigned by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AssignedByAI { get; set; }

        /// <summary>
        /// Represents the room was upgraded by AI Room Assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradedByAI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpgradedByAI { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CodeListType : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomRateType
    {
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Total { get; set; }

        [Newtonsoft.Json.JsonProperty("totalPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType TotalPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("rates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RatesType Rates { get; set; }

        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PackageElementType> Packages { get; set; }

        /// <summary>
        /// Profile associated with the room Stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stayProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationProfileType> StayProfiles { get; set; }

        /// <summary>
        /// A collection of Guest Counts associated with the room rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCountsType GuestCounts { get; set; }

        /// <summary>
        /// A collection of Tax Free Guest Counts associated with the room rate. This list does not add to the guest count but just indicates number of tax free guests out of guest counts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxFreeGuestCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCountsType TaxFreeGuestCounts { get; set; }

        /// <summary>
        /// Membership Awards code applied on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResAwardsType Awards { get; set; }

        /// <summary>
        /// Key information about the block for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationBlockType ReservationBlock { get; set; }

        /// <summary>
        /// Information about the Room Rate Combination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomRateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomRateInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

        [Newtonsoft.Json.JsonProperty("suppressRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuppressRate { get; set; }

        /// <summary>
        /// The code that relates to the market being sold to (e.g., the corporate market, packages).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MarketCode { get; set; }

        /// <summary>
        /// Description of the market code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string MarketCodeDescription { get; set; }

        /// <summary>
        /// To specify where the business came from e.g. radio, newspaper ad, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Description of the source of business.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceCodeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string SourceCodeDescription { get; set; }

        /// <summary>
        /// The number of rooms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfUnits { get; set; }

        /// <summary>
        /// A string value representing the unique identification of a room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// True indicates as pseudo room type. This is usually used for a posting master reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pseudoRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PseudoRoom { get; set; }

        /// <summary>
        /// Room Type used for the Rate calculation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypeCharged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomTypeCharged { get; set; }

        /// <summary>
        /// Commission Code applicable for commission calculation for Travel Agent/Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// Indicates Commission is applicable for commission calculation for Travel Agent/Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Commissionable { get; set; }

        /// <summary>
        /// Indicates this reservation is for House use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("houseUseOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HouseUseOnly { get; set; }

        /// <summary>
        /// Indicates this reservation rate is complimentary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complimentary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Complimentary { get; set; }

        /// <summary>
        /// Indicates whether the room type inventory was taken from the allotment or House availability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryLender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string InventoryLender { get; set; }

        /// <summary>
        /// Fixed Rate Indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FixedRate { get; set; }

        /// <summary>
        /// Best Available rates ranking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BarRanking { get; set; }

        /// <summary>
        /// For RatePlanSet equals BESTAVAILABLERATE, in case Rate Groups are enabled the element provides the rate group for the rate plan code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateGroup { get; set; }

        /// <summary>
        /// Indicates if the Rate Code is discountable i.e discounts are allowed on the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DiscountAllowed { get; set; }

        /// <summary>
        /// Indicates if the Rate Code has BOGO(Bye one Get one) indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bogoDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BogoDiscount { get; set; }

        /// <summary>
        /// Rate plan type like Corporate,Regular,Military,Weekend etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateLevel { get; set; }

        /// <summary>
        /// Indicates commission percentage used by the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommissionPercentage { get; set; }

        /// <summary>
        /// Indicates commission amount used by the rate plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CommissionAmount { get; set; }

        /// <summary>
        /// If true, indicates if tax is included in the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TaxIncluded { get; set; }

    }

    /// <summary>
    /// The total amount charged for the service including additional amounts and fees.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalType
    {
        /// <summary>
        /// A collection of taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxesType Taxes { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// The total amount not including any associated tax (e.g., sales tax, VAT, GST or any associated tax).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountBeforeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountBeforeTax { get; set; }

        /// <summary>
        /// The total amount including all associated taxes (e.g., sales tax, VAT, GST or any associated tax).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountAfterTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountAfterTax { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Type of charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// When true indicates that the rate amount has been overridden.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateOverride { get; set; }

    }

    /// <summary>
    /// A collection of taxes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxesType
    {
        /// <summary>
        /// An individual tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<TaxType> Tax { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// Applicable tax element. This element allows for both percentages and flat amounts. If one field is used, the other should be zero since logically, taxes should be calculated in only one of the two ways.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxType
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Used to indicate if the amount is inclusive or exclusive of other charges, such as taxes, or is cumulative (amounts have been added to each other).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AmountDeterminationType? Type { get; set; }

        /// <summary>
        /// Code identifying the fee (e.g.,agency fee, municipality fee).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// Used to indicate if an amount is inclusive or exclusive of other charges, such as taxes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AmountDeterminationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inclusive")]
        Inclusive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Exclusive")]
        Exclusive = 1,

    }

    /// <summary>
    /// Individual rate amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RatesType
    {
        /// <summary>
        /// The Rate contains a collection of elements that define the amount of the rate, associated fees, additional occupant amounts. Taxes can be broken out or included within the various amounts. A currency can be associated to each amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<AmountType> Rate { get; set; }

    }

    /// <summary>
    /// Base charge and additional charges related to a room that includes such things as additional guest amounts, cancel fees, etc. Also includes Discount percentages, total amount, and the rate description.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmountType
    {
        /// <summary>
        /// The base amount charged for the accommodation or service per unit of time (ex: Nightly, Weekly, etc). If TaxInclusive is set to True, then taxes are included in the base amount. Note that any additional charges should itemized in the other elements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Base { get; set; }

        /// <summary>
        /// Discount percentage and/or Amount, code and textual reason for discount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiscountType Discount { get; set; }

        /// <summary>
        /// Indicates the share rate percentage for the reservation if set to CUSTOMSPLIT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareRatePercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? ShareRatePercentage { get; set; }

        /// <summary>
        /// Last rate share distribution instruction applied on share reservation daily rate segment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareDistributionInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareDistributionInstructionType? ShareDistributionInstruction { get; set; }

        /// <summary>
        /// The total amount charged for this rate including additional occupant amounts and fees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Total { get; set; }

        /// <summary>
        /// The Points contains the number of points required to book a particular room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PointsType RequiredPoints { get; set; }

        /// <summary>
        /// The reservation effective amount charged for the accommodation or service (i.e. base amount + amount for Add to Rate Combine Line packages) per unit of time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType EffectiveRate { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    /// <summary>
    /// Identifies and provides details about the discount. This allows for both percentages and flat amounts. If one field is used, the other should be zero/not specified since logically.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscountType
    {
        [Newtonsoft.Json.JsonProperty("discountReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DiscountReason { get; set; }

        /// <summary>
        /// Percentage discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percent { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Specifies the type of discount (e.g., No condition, LOS, Deposit or Total amount spent).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discountCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DiscountCode { get; set; }

    }

    /// <summary>
    /// The type of Rate Amount Change to be done on the Sharer reservation. This can be FULL -&gt; Full Rate for each Sharer. SPLIT-&gt; Split the Rate amount between Sharer Reservations. ENTIRE -&gt; This Sharer will get the total amount of the rate code for all the Sharer Reservations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShareDistributionInstructionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Entire")]
        Entire = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Split")]
        Split = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomSplit")]
        CustomSplit = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageElementType
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("allowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Allowance { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Description { get; set; }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("packageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PackageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("calculationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string CalculationRule { get; set; }

        [Newtonsoft.Json.JsonProperty("postingRhythm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PostingRhythm { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("includedInRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludedInRate { get; set; }

        [Newtonsoft.Json.JsonProperty("addRateSeprateLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddRateSeprateLine { get; set; }

        [Newtonsoft.Json.JsonProperty("addRateCombinedLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddRateCombinedLine { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("sellSeparate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SellSeparate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationProfileType
    {
        /// <summary>
        /// Unique identifiers for the Profile for both internal and external systems. In case of Travel Agent the IATA code and in case of Company can be any form of identifier as id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

        /// <summary>
        /// Provides detailed information regarding either a company or a customer profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileType Profile { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationProfileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResProfileTypeType? ReservationProfileType1 { get; set; }

    }

    /// <summary>
    /// Type provides the detailed information about the profile and its children.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileType
    {
        /// <summary>
        /// Detailed customer information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerType Customer { get; set; }

        /// <summary>
        /// Detailed company information for this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyType Company { get; set; }

        /// <summary>
        /// The profile image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageSetType ProfileImage { get; set; }

        /// <summary>
        /// List of customer addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Addresses Addresses { get; set; }

        /// <summary>
        /// Trace Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TraceCode { get; set; }

        /// <summary>
        /// Owner Code associated to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// List of Telephone Number Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Telephones2 Telephones { get; set; }

        /// <summary>
        /// List of email address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Emails2 Emails { get; set; }

        /// <summary>
        /// List of Information on a URL for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLs URLs { get; set; }

        /// <summary>
        /// List of Notes for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comments Comments { get; set; }

        /// <summary>
        /// List of Delivery methods configured against a Property for this Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileDeliveryMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileDeliveryMethods ProfileDeliveryMethods { get; set; }

        /// <summary>
        /// List of loyalty program(s) the profile is subscribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileMemberships ProfileMemberships { get; set; }

        /// <summary>
        /// List of customer preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreferenceCollection PreferenceCollection { get; set; }

        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationships Relationships { get; set; }

        /// <summary>
        /// Contains a collection of profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipsSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipsSummary RelationshipsSummary { get; set; }

        /// <summary>
        /// Collection of Detailed information on history and future reservations associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationHistoryFutureInfoType ReservationInfoList { get; set; }

        /// <summary>
        /// Collection of Detailed information on history and future reservations associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stayReservationInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationStayHistoryFutureInfoType StayReservationInfoList { get; set; }

        /// <summary>
        /// Information on last stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LastStayInfoType LastStayInfo { get; set; }

        /// <summary>
        /// Detailed information on restrictions associated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileRestrictions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileRestrictions ProfileRestrictions { get; set; }

        /// <summary>
        /// Contains cashiering related details for the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCashieringType Cashiering { get; set; }

        /// <summary>
        /// Contains commission related details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileCommissionType> CommissionInfoList { get; set; }

        /// <summary>
        /// Collections of user defined fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDefinedFieldsType UserDefinedFields { get; set; }

        /// <summary>
        /// E-Certificate assosiated with the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ECertificatesType ECertificates { get; set; }

        /// <summary>
        /// Eligible for Fiscal Folio/Payload generation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eligibleForFiscalFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EligibleForFiscalFolio { get; set; }

        /// <summary>
        /// Room Ownership records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomOwnershipsList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoomOwnershipsList RoomOwnershipsList { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType1 { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// Hotel which this profile is registered with. This attribute is not used for configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

        /// <summary>
        /// Hotel which this profile is to be registered. This attribute is only used during creation of profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestForHotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RequestForHotel { get; set; }

        /// <summary>
        /// What level this profile is protected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProtectedBy { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateTimeFormatConverter))]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Mark this profile as recently accessed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markAsRecentlyAccessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkAsRecentlyAccessed { get; set; }

        /// <summary>
        /// "true" setting marks the profile to be kept from being purged, once the profile is marked inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markForHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkForHistory { get; set; }

        /// <summary>
        /// Populates true if the profile has commission configured false otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCommission { get; set; }

        /// <summary>
        /// Flag to show inactive Room Owners.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showInactiveRoomOwners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowInactiveRoomOwners { get; set; }

    }

    /// <summary>
    /// Contains basic data on the customer's identity, location, relationships, finances, memberships, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerType
    {
        /// <summary>
        /// Detailed name information for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<PersonNameType> PersonName { get; set; }

        /// <summary>
        /// Provides information about the guest's anonymization status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("anonymization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnonymizationType Anonymization { get; set; }

        /// <summary>
        /// List of identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifications Identifications { get; set; }

        /// <summary>
        /// Identifies the gender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomerTypeGender? Gender { get; set; }

        /// <summary>
        /// Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// Indicates the date of birth as masked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDateMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BirthDateMasked { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Nationality code identification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nationality { get; set; }

        /// <summary>
        /// Nationality code description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationalityDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NationalityDescription { get; set; }

        /// <summary>
        /// The supplier's ranking of the customer (e.g., VIP, numerical ranking).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CustomerValue { get; set; }

        /// <summary>
        /// Credit Rating of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreditRating { get; set; }

        /// <summary>
        /// VIP status of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipStatus { get; set; }

        /// <summary>
        /// Description of the VIP status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string VipDescription { get; set; }

        /// <summary>
        /// Place of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string BirthPlace { get; set; }

        /// <summary>
        /// This element tells profile is property exclusive or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrivateProfile { get; set; }

        /// <summary>
        /// This element tells if profile is blacklisted or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Blacklist { get; set; }

    }

    /// <summary>
    /// This provides name information for a person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonNameType
    {
        /// <summary>
        /// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// The middle name of the person name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Family name, last name. May also be used for full name if the sending system does not have the ability to separate a full name into its parts, e.g. the surname element may be used to pass the full name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Salutation of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salutation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Salutation { get; set; }

        /// <summary>
        /// Type of name of the individual, such as former, nickname, alternate or alias name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonNameTypeType? NameType { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

    }

    /// <summary>
    /// Person's name in an external system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PersonNameTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alternate")]
        Alternate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Incognito")]
        Incognito = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Phonetic")]
        Phonetic = 4,

    }

    /// <summary>
    /// Information on the identification of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentificationInfoType
    {
        /// <summary>
        /// Detailed information on the identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentificationType Identification { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Identification information of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentificationType
    {
        /// <summary>
        /// Identification Type. Eg Passport, Driving License etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string IdType { get; set; }

        /// <summary>
        /// Identification Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Masked Identification Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idNumberMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdNumberMasked { get; set; }

        /// <summary>
        /// The country where Identification was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string IssuedCountry { get; set; }

        /// <summary>
        /// Issued date of Identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssuedDate { get; set; }

        /// <summary>
        /// The place where Identification was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IssuedPlace { get; set; }

        /// <summary>
        /// Expiration date of Identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        /// <summary>
        /// Property where the identification belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registeredProperty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RegisteredProperty { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyType
    {
        /// <summary>
        /// Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Alternate Name of the Company. Mainly, it's the name of the company written in the Alternate Language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AlternateName { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Nationality code identification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nationality { get; set; }

        /// <summary>
        /// Nationality code description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationalityDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NationalityDescription { get; set; }

        /// <summary>
        /// Commission code of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// Credit Rating of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CreditRating { get; set; }

        /// <summary>
        /// The type of corporate ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("corporateIdType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CorporateIdType { get; set; }

        /// <summary>
        /// VIP status of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipStatus { get; set; }

        /// <summary>
        /// Description of the VIP status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string VipDescription { get; set; }

        /// <summary>
        /// This element tells if profile is blacklisted or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blacklist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Blacklist { get; set; }

    }

    /// <summary>
    /// Represents on image set record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageSetType
    {
        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// The image set name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(800)]
        public string ImageSet { get; set; }

        /// <summary>
        /// The image set enumerated style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageStyleType? ImageStyle { get; set; }

        /// <summary>
        /// The image set hotel code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The image set URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ImageURL { get; set; }

        /// <summary>
        /// The image set description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// An enumeration of image styles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ImageStyleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Thumbnail")]
        Thumbnail = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Icon")]
        Icon = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Square")]
        Square = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Banner")]
        Banner = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Button")]
        Button = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Lowres")]
        Lowres = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Highres")]
        Highres = 7,

    }

    /// <summary>
    /// Provides address information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressInfoType
    {
        /// <summary>
        /// Address details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType Address { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Provides address information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressType
    {
        /// <summary>
        /// Indicator to define if the Address is validated by the Address Validation System.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValidated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsValidated { get; set; }

        /// <summary>
        /// When the address is unformatted (FormattedInd="false") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CityName { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Post Office City Extension Code number. City Extension mainly used for UK addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CityExtension { get; set; }

        /// <summary>
        /// County or District Name (e.g., Fairfax). This is read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string County { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryNameType Country { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

        /// <summary>
        /// Defines the type of address (e.g. home, business, other).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// The postal barcode for the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string BarCode { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Web site address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class URLInfoType
    {
        /// <summary>
        /// Provides URL information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLType Url { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Web site address, in IETF(The Internet Engineering Task Force) specified format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class URLType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Defines the purpose of the URL address, such as personal, business, public, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Describes the Type code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    /// <summary>
    /// Comment related to the profile/reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentInfoType
    {
        /// <summary>
        /// Comment details for the comment. It will be empty in case of delete comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentType Comment { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    /// <summary>
    /// An indication of a new paragraph for a sub-section of a formatted text message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentType
    {
        /// <summary>
        /// Formatted text content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormattedTextTextType Text { get; set; }

        /// <summary>
        /// Specifies Comment's Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string CommentTitle { get; set; }

        /// <summary>
        /// Notification Location associated with the Note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NotificationLocation { get; set; }

        /// <summary>
        /// Specifies type of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Comment type Description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// When true, the comment may not be shown to the consumer. When false, the comment may be shown to the consumer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Internal { get; set; }

        /// <summary>
        /// When true, the comment may be confidential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confidential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Confidential { get; set; }

        /// <summary>
        /// When true, the note internal could be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInternal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideInternal { get; set; }

        /// <summary>
        /// If specified comment belongs to the Hotel, otherwise it is a global comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Provides text and indicates whether it is formatted or not.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FormattedTextTextType
    {
        /// <summary>
        /// Property Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

    }

    /// <summary>
    /// Delivery Information type to the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileDeliveryMethod
    {
        /// <summary>
        /// Delivery ID. It will be empty in case of new delivery method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type DeliveryId { get; set; }

        /// <summary>
        /// Delivery type can have a value EMAIL, ELECTRONIC etc and it depends on the parameter set in OPERA Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DeliveryType { get; set; }

        /// <summary>
        /// Delivery value holds the corresponding value of the delivery type..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DeliveryValue { get; set; }

        /// <summary>
        /// Property that has delivery methods configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Module where this delivery type will be used. Example : EFolio Export, EInvoice , Fiscal, etc..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryModule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileDeliveryModuleType? DeliveryModule { get; set; }

        /// <summary>
        /// When true, indicates a primary information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryInd { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

    }

    /// <summary>
    /// Module where this delivery type will be used. Example : EFolio Export, EInvoice , Fiscal, etc..
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProfileDeliveryModuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EfolioExport")]
        EfolioExport = 0,

    }

    /// <summary>
    /// Detailed information of the memberships.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileMembershipType
    {
        /// <summary>
        /// Additional comments regarding to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParagraphType Comment { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newMembershipNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NewMembershipNumber { get; set; }

        /// <summary>
        /// Name to be displayed on the membership card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameOnCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// Description of the membership program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("programDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ProgramDescription { get; set; }

        /// <summary>
        /// Indicates the membership level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipLevel { get; set; }

        /// <summary>
        /// Indicates the membership level description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevelDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string MembershipLevelDescription { get; set; }

        /// <summary>
        /// Indicates the membership class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipClass { get; set; }

        /// <summary>
        /// Earning preference to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earningPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MembershipEarningPreferenceType? EarningPreference { get; set; }

        /// <summary>
        /// Indicates whether membership is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// benefits for the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BenefitsType Benefits { get; set; }

        /// <summary>
        /// Defines the degree of participation for this membership in the tier management portion of the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tierAdministration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierAdministrationType? TierAdministration { get; set; }

        /// <summary>
        /// Defines how downgrading will be handled for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DowngradeType? Downgrade { get; set; }

        /// <summary>
        /// The status of issuing new membership card to the member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reIssueNewCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardReIssueType? ReIssueNewCard { get; set; }

        /// <summary>
        /// True if you want to exclude the member from the Membership Fulfillment extract,the member's actions will not be included in the fulfillment extract until this value set to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeFromBatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeFromBatch { get; set; }

        /// <summary>
        /// Indicates Upgrade information which includes member's next tier level, requirements for the next upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string UpgradeDescription { get; set; }

        /// <summary>
        /// Indicates information regarding the member's possible downgrades.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string DowngradeDescription { get; set; }

        /// <summary>
        /// Value Rating Type Description for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Rating { get; set; }

        /// <summary>
        /// Indicates how the guest enrolled in the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipEnrollmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipEnrollmentCode { get; set; }

        /// <summary>
        /// Indicates where the guest is in the membership enrollment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MemberStatus { get; set; }

        /// <summary>
        /// Profile MemberShip Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentPoints { get; set; }

        /// <summary>
        /// Label used to refer to points for this membership type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pointsLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PointsLabel { get; set; }

        /// <summary>
        /// Source from where the enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentSource { get; set; }

        /// <summary>
        /// Resort/CRO where enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentResort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentResort { get; set; }

        /// <summary>
        /// Preferred Card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreferredCard { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipId { get; set; }

        /// <summary>
        /// Type of membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipType { get; set; }

        /// <summary>
        /// Indicator if Membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembershipYn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string PrimaryMembershipYn { get; set; }

        /// <summary>
        /// Boolean indicator set to True implies membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryMembership { get; set; }

        /// <summary>
        /// Membership ID Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipIdNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MembershipIdNo { get; set; }

        /// <summary>
        /// Ranking assigned to the Player Profile by the Gaming system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerRanking { get; set; }

        /// <summary>
        /// Indicates how the award points for this membership type will be managed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("centralSetup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CentralSetup { get; set; }

        /// <summary>
        /// Indicates when the member signed up for the loyalty program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SignupDate { get; set; }

        /// <summary>
        /// Indicates the starting date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }

        /// <summary>
        /// Indicates the ending date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpireDate { get; set; }

        /// <summary>
        /// When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDateExclusiveIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpireDateExclusiveIndicator { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// An indication of a new paragraph for a sub-section of a formatted text message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParagraphType
    {
        /// <summary>
        /// Formatted text content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormattedTextTextType Text { get; set; }

    }

    /// <summary>
    /// The earning preference of a membership, it depends on the type of property. eg. when the property is a airline it should be Miles, other than Points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MembershipEarningPreferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Points")]
        Points = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Miles")]
        Miles = 1,

    }

    /// <summary>
    /// Basic information about membership benefit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BenefitsType : System.Collections.ObjectModel.Collection<BenefitType>
    {

    }

    /// <summary>
    /// Basic information about membership benefit.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BenefitType
    {
        /// <summary>
        /// Benefit code associated with a membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Processing message for membership benefit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Message { get; set; }

        /// <summary>
        /// Indicates whether membership benefit is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

    }

    /// <summary>
    /// Do not upgrade membership. The membership may be downgraded.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierAdministrationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NoUpgrade")]
        NoUpgrade = 1,

    }

    /// <summary>
    /// Do not downgrade membership when the next downgrade process runs. When the downgrade process runs, the membership will be automatically set to Grace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DowngradeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Grace")]
        Grace = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Never")]
        Never = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Period")]
        Period = 2,

    }

    /// <summary>
    /// Request to re issue a new card.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CardReIssueType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotApplicable")]
        NotApplicable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 2,

    }

    /// <summary>
    /// Preference details for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreferenceTypeType
    {
        /// <summary>
        /// Collection of Preferences for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceType> Preference { get; set; }

        /// <summary>
        /// Preference group code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferenceType { get; set; }

        /// <summary>
        /// Preference group description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PreferenceTypeDescription { get; set; }

        /// <summary>
        /// Preference Sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Sequence { get; set; }

        /// <summary>
        /// Maximum quantity of preferences allowed per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxQuantity { get; set; }

        /// <summary>
        /// Available quantity of preferences (maximum quantity - Existing preferences)per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AvailableQuantity { get; set; }

        /// <summary>
        /// Maximum quantity of preferences used by any resort per preference group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResortUsedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxResortUsedQuantity { get; set; }

        /// <summary>
        /// Whether this preference is reservation preference or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReservationPreference { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Guest Preference details for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreferenceType
    {
        /// <summary>
        /// Preference value for display purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string PreferenceValue { get; set; }

        /// <summary>
        /// Preference Description for display purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Whether this preference is property specific or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Global { get; set; }

        /// <summary>
        /// Source of the preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Source { get; set; }

        /// <summary>
        /// If specified preference belongs to the Hotels listed, otherwise it is a global preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Hotels { get; set; }

        [Newtonsoft.Json.JsonProperty("preferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferenceId { get; set; }

        /// <summary>
        /// Specifies the count of preferences excluded for the attached reservation preference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludedPreferencesCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExcludedPreferencesCount { get; set; }

        /// <summary>
        /// Specifies whether to copy the reservation preference to the profile or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copyToProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CopyToProfile { get; set; }

    }

    /// <summary>
    /// Relationship Type contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationshipInfoType
    {
        /// <summary>
        /// Refer to Relationship Profile type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipProfileType RelationshipProfile { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Relation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string RelationDescription { get; set; }

        /// <summary>
        /// Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of the target relation(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationshipProfileType
    {
        /// <summary>
        /// Detailed information of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerType Customer { get; set; }

        /// <summary>
        /// Detailed information of the Company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyType Company { get; set; }

        /// <summary>
        /// Information on telephone details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType Telephone { get; set; }

        /// <summary>
        /// Information on address details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInfoType Address { get; set; }

        /// <summary>
        /// Information on email address for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType Email { get; set; }

        /// <summary>
        /// Information on web url/address for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLInfoType URLs { get; set; }

        /// <summary>
        /// Primary Owner of the profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OwnerType PrimaryOwner { get; set; }

        /// <summary>
        /// Original profile details for which the relationships was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ProfileIdList { get; set; }

        /// <summary>
        /// Indicates if this relationship is the primary relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Primary { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? StatusCode { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

    }

    /// <summary>
    /// Generic type for information about an owner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnerType
    {
        /// <summary>
        /// Hotel to which the owner belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Hotel { get; set; }

        /// <summary>
        /// Unique application user ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type UserId { get; set; }

        /// <summary>
        /// Unique application user name of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string UserName { get; set; }

        /// <summary>
        /// Unique Code to identify the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Unique owner profile information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Provides name information of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonNameType Name { get; set; }

        /// <summary>
        /// Department to which the owner belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Department { get; set; }

        /// <summary>
        /// Email information of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType Email { get; set; }

        /// <summary>
        /// Information on the telephone number of the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType Phone { get; set; }

        /// <summary>
        /// Relationship of the owner within the profile or block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Relationship { get; set; }

        /// <summary>
        /// When true, this is a primary owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

    }

    /// <summary>
    /// This contains a generic code and description information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CodeDescriptionType
    {
        /// <summary>
        /// Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Unique Id that references an object uniquely in the system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UniqueIDListType : System.Collections.ObjectModel.Collection<UniqueID_Type>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProfileStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 1,

    }

    /// <summary>
    /// The types of Profile handled by the web service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProfileTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Guest")]
        Guest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Source")]
        Source = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
        Employee = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Vendor")]
        Vendor = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Contact")]
        Contact = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Purge")]
        Purge = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessHeader")]
        BusinessHeader = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingAccount")]
        BillingAccount = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Activity")]
        Activity = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Potential")]
        Potential = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Account")]
        Account = 14,

    }

    /// <summary>
    /// RelationshipInfoSummaryType contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationshipInfoSummaryType
    {
        /// <summary>
        /// Refer to Relationship Profile Summary type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipProfileSummaryType RelationshipProfile { get; set; }

        /// <summary>
        /// Refer to Master Profile type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterAccountDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterAccountInfoType MasterAccountDetails { get; set; }

        /// <summary>
        /// Relationship identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationshipID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string RelationshipID { get; set; }

        /// <summary>
        /// Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SourceRelation { get; set; }

        /// <summary>
        /// Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string SourceRelationDescription { get; set; }

        /// <summary>
        /// Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRelation { get; set; }

        /// <summary>
        /// Displays the description of the target relation(Target Profile).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRelationDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TargetRelationDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationshipProfileSummaryType
    {
        /// <summary>
        /// Name of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Name of the company.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Telephone number assigned to a single location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Information on address details for the customer/company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RelationshipAddressType Address { get; set; }

        /// <summary>
        /// Defines the e-mail address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Unique Code to identify the owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OwnerCode { get; set; }

        /// <summary>
        /// Original profile details for which the relationships was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ProfileIdList { get; set; }

        /// <summary>
        /// Indicates if this relationship is the primary relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Status of the profile. Active/Inactive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileStatusType? ProfileStatus { get; set; }

        /// <summary>
        /// When true, this is a primary owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryOwnerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryOwnerCode { get; set; }

        /// <summary>
        /// Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? ProfileType { get; set; }

    }

    /// <summary>
    /// Provides address information for a Relationship.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationshipAddressType
    {
        /// <summary>
        /// When the address is unformatted (FormattedInd="false") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<string> AddressLine { get; set; }

        /// <summary>
        /// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string City { get; set; }

        /// <summary>
        /// Post Office Code number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string PostalCode { get; set; }

        /// <summary>
        /// State or Province name (e.g., Texas).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string State { get; set; }

        /// <summary>
        /// Country name (e.g., Ireland).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Country { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MasterAccountInfoType
    {

    }

    /// <summary>
    /// Information of History and Future Reservation details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationHistoryFutureInfoType
    {
        /// <summary>
        /// Refer to History list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryListType HistoryList { get; set; }

        /// <summary>
        /// Refer to Future list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("futureList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FutureListType FutureList { get; set; }

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoryListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : History reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FutureListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : Future reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Information of History and Future Reservation details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationStayHistoryFutureInfoType
    {
        /// <summary>
        /// Refer to History list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayHistoryListType HistoryList { get; set; }

        /// <summary>
        /// Refer to Future list type document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("futureList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayFutureListType FutureList { get; set; }

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StayHistoryListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : History reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StayReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// The Reservation class contains the current reservation being created or altered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StayReservationInfoType
    {
        /// <summary>
        /// Unique identifiers for the reservation for both internal and external systems
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// Collection of room stays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayInfoType RoomStay { get; set; }

        /// <summary>
        /// List of attached profiles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachedProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResAttachedProfileListType AttachedProfiles { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

    }

    /// <summary>
    /// A collection of reservation history details attached to Profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StayFutureListType
    {
        /// <summary>
        /// Additional reservation information attached to the profile . Eg : Future reservation details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StayReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    /// <summary>
    /// Contains last stay related details for the profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LastStayInfoType
    {
        /// <summary>
        /// Used to hold last room information for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LastRoom { get; set; }

        /// <summary>
        /// The total number of previous stay of the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalStay { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileRestrictions
    {
        /// <summary>
        /// Restriction reason associated with the current profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Reason { get; set; }

        /// <summary>
        /// Description of restriction reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ReasonDescription { get; set; }

        /// <summary>
        /// True indicates there are restrictions associated with the current profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restricted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restricted { get; set; }

    }

    /// <summary>
    /// Contains cashiering related details for the profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileCashieringType
    {
        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

    }

    /// <summary>
    /// This is the preconfigured routing instruction type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileCommissionType
    {
        /// <summary>
        /// Hotel Code for the commission being used for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// commission Code for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CommissionCode { get; set; }

        /// <summary>
        /// Bank account used for the commission for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BankAccount { get; set; }

        /// <summary>
        /// Type of payment associated with the bank account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommissionPaymentMethods? PaymentMethod { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

    }

    /// <summary>
    /// Check
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommissionPaymentMethods
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cent")]
        Cent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Eft")]
        Eft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Chk")]
        Chk = 2,

    }

    /// <summary>
    /// A common type used to hold user defined fields(UDFs). This type should be used to handle UDFs on RReservation, Profiles, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDefinedFieldsType
    {
        /// <summary>
        /// Collection of user defined fields of Character/String Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("characterUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CharacterUDFsType CharacterUDFs { get; set; }

        /// <summary>
        /// Collection of user defined fields of Numeric Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numericUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public NumericUDFsType NumericUDFs { get; set; }

        /// <summary>
        /// Collection of user defined fields of Date Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateUDFs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DateUDFsType DateUDFs { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Character/String Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CharacterUDFsType : System.Collections.ObjectModel.Collection<CharacterUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Character/String Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CharacterUDFType
    {
        /// <summary>
        /// Used to hold user defined field of Character Type. It is highly recommended to use UDFC01, UDFC02,...UDFC40 (Total 40) as Character/String UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Numeric Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericUDFsType : System.Collections.ObjectModel.Collection<NumericUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Numeric Type. It is highly recommended to use UDFN01, UDFN02,...UDFN40 (Total 40) as Numeric UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericUDFType
    {
        /// <summary>
        /// Name of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// Used to hold collection of user defined fields of Date Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateUDFsType : System.Collections.ObjectModel.Collection<DateUDFType>
    {

    }

    /// <summary>
    /// Used to hold user defined field of Date Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateUDFType
    {
        /// <summary>
        /// Used to hold user defined field of Date Type. It is highly recommended to use UDFD01, UDFD02,...UDFN20 (Total 20) as Date UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// Value of user defined field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Value { get; set; }

        /// <summary>
        /// Label of user defined field used by vendors or customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string AlternateName { get; set; }

    }

    /// <summary>
    /// List of e-certificates for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ECertificatesType : System.Collections.ObjectModel.Collection<ECertificateType>
    {

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ECertificateType
    {
        /// <summary>
        /// System generated unique voucher number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voucherNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VoucherNo { get; set; }

        /// <summary>
        /// Printed certificate no. This has to be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string CertificateNo { get; set; }

        [Newtonsoft.Json.JsonProperty("eCertificateInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateInfoType ECertificateInfo { get; set; }

        /// <summary>
        /// Date of expiry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }

        /// <summary>
        /// NameId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        [Newtonsoft.Json.JsonProperty("consumptionDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ECertificateConsumptionType ConsumptionDetail { get; set; }

        /// <summary>
        /// Status of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateStatusType? Status { get; set; }

        /// <summary>
        /// Print status of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Printed { get; set; }

        /// <summary>
        /// Source of e-certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateIssueSourceType? Source { get; set; }

        /// <summary>
        /// Date when certificate was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ECertificateInfoType
    {
        /// <summary>
        /// User defined certificate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CertificateType { get; set; }

        /// <summary>
        /// Membership type to which the certificate is linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipType { get; set; }

        /// <summary>
        /// Award type to which the certificate is linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AwardCode { get; set; }

        /// <summary>
        /// Promotion code to which certificate is attached to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Voucher benefit code attached to the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voucherBenefitCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VoucherBenefitCode { get; set; }

        /// <summary>
        /// Hotel to which certificate is attached to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hotels Hotels { get; set; }

        /// <summary>
        /// Description about the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Detail description about the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Label for the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Label { get; set; }

        /// <summary>
        /// Value of the certificate for the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Value { get; set; }

        /// <summary>
        /// Cost of certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Cost { get; set; }

        /// <summary>
        /// Summary of Benefits attached to this ECertificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefitSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string BenefitSummary { get; set; }

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is available for a specific list of hotels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ECertificateScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MultiHotel")]
        MultiHotel = 2,

    }

    /// <summary>
    /// E-Certificates details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ECertificateConsumptionType
    {
        /// <summary>
        /// Property where certificate was consumed for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Source of consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateConsumeSourceType? Source { get; set; }

        /// <summary>
        /// Last name of the person who consumed the certificate..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        /// <summary>
        /// First name of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string FirstName { get; set; }

        /// <summary>
        /// Middle name of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Email of the person who consumed the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Email { get; set; }

        /// <summary>
        /// Date the certificate was consumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Application user who created the consumption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string UserName { get; set; }

        /// <summary>
        /// Any reference like reservation no etc against which the certificate was consumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ReferenceId { get; set; }

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is consumed by hotelPMS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ECertificateConsumeSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Central")]
        Central = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hotel")]
        Hotel = 2,

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is reserved.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ECertificateStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumed")]
        Consumed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Expired")]
        Expired = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Issued")]
        Issued = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Reserved")]
        Reserved = 5,

    }

    /// <summary>
    /// Indicates that OPERA E-Certificate is issued by external system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ECertificateIssueSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Opera")]
        Opera = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Interface")]
        Interface = 2,

    }

    /// <summary>
    /// Define the search criteria for retrieving room ownership records
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomOwnershipType
    {
        /// <summary>
        /// Contract ID of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractId { get; set; }

        /// <summary>
        /// Contract number for room owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Unit for room owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Unit { get; set; }

        /// <summary>
        /// Room Category of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomCategory { get; set; }

        /// <summary>
        /// Room Type of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomType { get; set; }

        /// <summary>
        /// Start Date of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// End Date of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Profile ID of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ProfileId { get; set; }

        /// <summary>
        /// Status of the room ownership record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Status { get; set; }

    }

    /// <summary>
    /// A collection of GuestCount by age group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuestCountsType
    {
        /// <summary>
        /// Defines Children's Ages. Number of children ages mentioned may mot match with children counts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childAges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ChildAgesType ChildAges { get; set; }

        /// <summary>
        /// Defines children counts with Age Qualifying Group(Child Bucket#1) classification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childBuckets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChildBucketsType ChildBuckets { get; set; }

        /// <summary>
        /// Defines the number of Adults.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Adults { get; set; }

        /// <summary>
        /// Defines the number of Children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Children { get; set; }

    }

    /// <summary>
    /// Age of a child in years.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildAgesType : System.Collections.ObjectModel.Collection<ChildAgeType>
    {

    }

    /// <summary>
    /// Defines Child's Age.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildAgeType
    {
        /// <summary>
        /// Age of a child in years.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Age { get; set; }

    }

    /// <summary>
    /// Defines children counts with Age Qualifying Group(Child Bucket) classification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildBucketsType
    {
        /// <summary>
        /// Number of children classified under the first Age Qualifying Group(Child Bucket#1).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket1Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket1Count { get; set; }

        /// <summary>
        /// Number of children classified under the second Age Qualifying Group(Child Bucket#2).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket2Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket2Count { get; set; }

        /// <summary>
        /// Number of children classified under the third Age Qualifying Group(Child Bucket#3).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket3Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket3Count { get; set; }

        /// <summary>
        /// Number of children classified under the fourth Age Qualifying Group(Child Bucket#4).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket4Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket4Count { get; set; }

        /// <summary>
        /// Number of children classified under the fifth Age Qualifying Group(Child Bucket#5).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucket5Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bucket5Count { get; set; }

    }

    /// <summary>
    /// Membership Awards code applied on the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResAwardsType
    {
        /// <summary>
        /// Membership program under which the award is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type MembershipNo { get; set; }

        /// <summary>
        /// Room Type before the Upgrade Award.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalRoomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OriginalRoomType { get; set; }

        /// <summary>
        /// Room Type after the Upgrade Award.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeRoomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string UpgradeRoomType { get; set; }

    }

    /// <summary>
    /// Information regarding upsell for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpsellInfoType
    {
        /// <summary>
        /// Original Values of the reservation prior to upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OriginalInfo OriginalInfo { get; set; }

        /// <summary>
        /// Information of a reservation during the process of upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpsellInfo UpsellInfo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrimaryShareTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NonPrimary")]
        NonPrimary = 1,

    }

    /// <summary>
    /// Authorizer Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompAuthorizerInfoType
    {
        [Newtonsoft.Json.JsonProperty("authorizerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type AuthorizerId { get; set; }

        /// <summary>
        /// Application user name of the authorizer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AuthorizerUserName { get; set; }

        /// <summary>
        /// Full name of the authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AuthorizerName { get; set; }

    }

    /// <summary>
    /// A collection of ResGuest objects, identifying the guests associated with this reservation. Which guests are in which room is determined by each RoomStays ResGuestRPHs collection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResGuestType
    {
        /// <summary>
        /// A collection of Profiles or Unique IDs of Profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileInfo ProfileInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("arrivalTransport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportInfoType ArrivalTransport { get; set; }

        [Newtonsoft.Json.JsonProperty("departureTransport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportInfoType DepartureTransport { get; set; }

        [Newtonsoft.Json.JsonProperty("visaInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VisaInfoType VisaInfo { get; set; }

        /// <summary>
        /// This is a reference placeholder, used as an index for this guest in this reservation. In the ResGuest object it is used like all other RPH attributes to send the delta of a reservation. It is used by the RoomStay and Service objects to indicate which guests are associated with that room stay or service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationGuestRPH", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string ReservationGuestRPH { get; set; }

        /// <summary>
        /// When true indicates this is the primary guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

    }

    /// <summary>
    /// The type contains routing instructions for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileCashieringDetailType
    {
        /// <summary>
        /// Payment Method Details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType PaymentMethod { get; set; }

        /// <summary>
        /// Set of preconfigured transaction codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routingInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileRoutingInstructionsType RoutingInstructions { get; set; }

        /// <summary>
        /// Tax type code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TaxType { get; set; }

        /// <summary>
        /// Guest type code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fiscalGuestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string FiscalGuestType { get; set; }

        /// <summary>
        /// Hotel Code for which the routing instructions are provided for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// The type contains routing instructions for the profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileRoutingInstructionsType
    {
        /// <summary>
        /// Set of preconfigured transaction codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TrxCodesInfoType TransactionCodes { get; set; }

        /// <summary>
        /// Set of preconfigured Billing Instruction results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BillingInstructionsType BillingInstructions { get; set; }

        /// <summary>
        /// A flag which determines whether the instructions has to be automatically populated for this profile or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoPopulateRouting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoPopulateRouting { get; set; }

    }

    /// <summary>
    /// List of Transaction codes info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrxCodesInfoType : System.Collections.ObjectModel.Collection<TrxInfoType>
    {

    }

    /// <summary>
    /// Transaction codes info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrxInfoType
    {
        /// <summary>
        /// Transaction codes info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Contains service type for transaction code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trxServiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TrxServiceType { get; set; }

        /// <summary>
        /// Unique identifier for the Transaction code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TransactionCode { get; set; }

        /// <summary>
        /// Hotel context of the Transaction code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Print receipt flag that tells whether the transaction receipt is to be printed or not. This is based on the transaction code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printTrxReceipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintTrxReceipt { get; set; }

    }

    /// <summary>
    /// Set of Billing Instruction codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingInstructionsType : System.Collections.ObjectModel.Collection<BillingInstructionType>
    {

    }

    /// <summary>
    /// Configured Billing Instruction which represents a set of Transaction Codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingInstructionType
    {
        /// <summary>
        /// Billing Instruction code description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Desc { get; set; }

        /// <summary>
        /// Unique identifier for the Billing Instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BillingCode { get; set; }

        /// <summary>
        /// Hotel context of the Billing Instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportInfoType
    {
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("transportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TransportCode { get; set; }

        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CarrierCode { get; set; }

        [Newtonsoft.Json.JsonProperty("stationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string StationCode { get; set; }

        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("transportationReqd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransportationReqd { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VisaInfoType
    {
        [Newtonsoft.Json.JsonProperty("visaIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? VisaIssueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("visaExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? VisaExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("visaNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string VisaNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResGuestAdditionalInfoType
    {
        /// <summary>
        /// Entry point into the country. (Croatian Requirements).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("portOfEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PortOfEntry { get; set; }

        /// <summary>
        /// Entry Date into the country. (Croatian Requirements).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateOfEntry { get; set; }

        /// <summary>
        /// Entry Date into the country. (Croatian Requirements).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextDestination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NextDestination { get; set; }

        /// <summary>
        /// Preferred Room Type of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredRoomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PreferredRoomType { get; set; }

        /// <summary>
        /// Last Stay information of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestLastStayInfoType LastStay { get; set; }

        /// <summary>
        /// Purpose of stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purposeOfStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PurposeOfStay { get; set; }

        /// <summary>
        /// Guest Classification for the data export.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestClassification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GuestClassification { get; set; }

        /// <summary>
        /// Guest Status for the data export.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GuestStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackItItemsType : System.Collections.ObjectModel.Collection<TrackItItemType>
    {

    }

    /// <summary>
    /// Detailed information of a Track It item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackItItemType
    {
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("trackItId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackItId TrackItId { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TrackItGroup? Group { get; set; }

        [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string TicketNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackItType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackItActionType Action { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Location { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("followUpDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? FollowUpDate { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationUserType AssignedTo { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackItReservationInfoType ReservationInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("trackItLogList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TrackItLogListType TrackItLogList { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackItId
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Group to which the Track It items belong.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrackItGroup
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Parcel")]
        Parcel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Valet")]
        Valet = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Baggage")]
        Baggage = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Lost")]
        Lost = 3,

    }

    /// <summary>
    /// Identifies the kind of Parcel, Baggage, or Lost items or Valet-managed vehicles or services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackItType
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public URLType Url { get; set; }

    }

    /// <summary>
    /// Identifies the response expected from staff or other parties relative to a Track It ticket.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackItActionType
    {
        [Newtonsoft.Json.JsonProperty("trackItAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType TrackItAction { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ActionStatusType? Status { get; set; }

    }

    /// <summary>
    /// Action status of the Track It item(Open, Closed).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ActionStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationUserType
    {
        /// <summary>
        /// Hotel where user belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Hotel { get; set; }

        [Newtonsoft.Json.JsonProperty("appUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string AppUser { get; set; }

        [Newtonsoft.Json.JsonProperty("lDAPUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string LDAPUser { get; set; }

        [Newtonsoft.Json.JsonProperty("actAs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ActAs { get; set; }

        [Newtonsoft.Json.JsonProperty("actAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ActAt { get; set; }

        [Newtonsoft.Json.JsonProperty("userDefaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string UserDefaultLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("appUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type AppUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("cashierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CashierId { get; set; }

        /// <summary>
        /// Cashier title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashierTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string CashierTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Department { get; set; }

        [Newtonsoft.Json.JsonProperty("departmentLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string DepartmentLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("salesRepCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SalesRepCode { get; set; }

        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }

        [Newtonsoft.Json.JsonProperty("disabledUntil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DisabledUntil { get; set; }

        [Newtonsoft.Json.JsonProperty("passwordChangeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PasswordChangeDate { get; set; }

        [Newtonsoft.Json.JsonProperty("userInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmployeeInfoType UserInfo { get; set; }

        /// <summary>
        /// This is only used during log-in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userSessionInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserSessionInfoType UserSessionInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("attendantInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AttendantType AttendantInfo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmployeeInfoType
    {
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonNameType PersonName { get; set; }

        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ProfileId { get; set; }

        [Newtonsoft.Json.JsonProperty("addressInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInfoType AddressInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType EmailInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType PhoneInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Department { get; set; }

        /// <summary>
        /// Identifies the gender.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmployeeInfoTypeGender? Gender { get; set; }

        /// <summary>
        /// Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// Indicates the date of birth as masked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDateMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BirthDateMasked { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSessionInfoType
    {
        [Newtonsoft.Json.JsonProperty("businessDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BusinessDate { get; set; }

        [Newtonsoft.Json.JsonProperty("systemDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SystemDate { get; set; }

        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Terminal { get; set; }

        [Newtonsoft.Json.JsonProperty("runningApp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RunningApp { get; set; }

        [Newtonsoft.Json.JsonProperty("shareProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShareProfiles { get; set; }

        [Newtonsoft.Json.JsonProperty("hotel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Hotel { get; set; }

        [Newtonsoft.Json.JsonProperty("cro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Cro { get; set; }

        [Newtonsoft.Json.JsonProperty("chain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Chain { get; set; }

        [Newtonsoft.Json.JsonProperty("cROCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CROCountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("sessionDefaults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserSessionDefaultsType SessionDefaults { get; set; }

        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ParametersType Parameters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSessionDefaultsType
    {
        [Newtonsoft.Json.JsonProperty("dbDateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DbDateFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("oracleDateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string OracleDateFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("oracleTimeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string OracleTimeFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("javaDateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string JavaDateFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("javaTimeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string JavaTimeFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("currencyFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string CurrencyFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string DefaultLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("baseLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BaseLanguage { get; set; }

    }

    /// <summary>
    /// Collection of generic Name-Value-Pair parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParametersType : System.Collections.ObjectModel.Collection<ParameterType>
    {

    }

    /// <summary>
    /// Name value pair type that will hold generic parameter information. Only use this type when the parameters being passed are too dynamic to be defined.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterType
    {
        /// <summary>
        /// Name of the parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ParameterName { get; set; }

        /// <summary>
        /// Value of the parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameterValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ParameterValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttendantType
    {
        [Newtonsoft.Json.JsonProperty("attendantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AttendantId { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// Reservation info associated with a Track It item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackItReservationInfoType
    {
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType TimeSpan { get; set; }

        [Newtonsoft.Json.JsonProperty("guestInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuestInfoType GuestInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        [Newtonsoft.Json.JsonProperty("roomStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HousekeepingRoomStatusType? RoomStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackItLogListType : System.Collections.ObjectModel.Collection<TrackItLogType>
    {

    }

    /// <summary>
    /// Individual activity log related to the Track It ticket.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrackItLogType
    {
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("trackItLogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type TrackItLogId { get; set; }

        [Newtonsoft.Json.JsonProperty("trackItId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrackItId TrackItId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("businessDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BusinessDate { get; set; }

        [Newtonsoft.Json.JsonProperty("logUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("logUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LogUserName { get; set; }

        [Newtonsoft.Json.JsonProperty("logDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogDate { get; set; }

    }

    /// <summary>
    /// Holds the Locator Information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationLocatorsType : System.Collections.ObjectModel.Collection<ReservationLocatorType>
    {

    }

    /// <summary>
    /// Holds the information for a Reservation Guest Locator
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationLocatorType
    {
        /// <summary>
        /// Begin and End date range of the Guest Locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRangeType DateSpan { get; set; }

        /// <summary>
        /// Time span for the Guest Locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeSpanType TimeSpan { get; set; }

        /// <summary>
        /// The Locator Text for the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locatorText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LocatorText { get; set; }

        /// <summary>
        /// Date and time of the Guest Locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locatorOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LocatorOn { get; set; }

        /// <summary>
        /// User that entered this Guest Locator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locatorBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LocatorBy { get; set; }

        /// <summary>
        /// Unique Id of the Guest Locator ( Locator Id )
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type LocatorId { get; set; }

    }

    /// <summary>
    /// Date Range with Start and End dates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateRangeType
    {
        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    /// <summary>
    /// Attachment List.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentsType : System.Collections.ObjectModel.Collection<AttachmentType>
    {

    }

    /// <summary>
    /// Attached files.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentType
    {
        /// <summary>
        /// Name of the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FileName { get; set; }

        /// <summary>
        /// Size of the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileSize { get; set; }

        /// <summary>
        /// Description for the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Description { get; set; }

        /// <summary>
        /// Flag to say if attachment is available across properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Global { get; set; }

        /// <summary>
        /// Hotel Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// History data associated with Attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeStampGroupType History { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateTimeStampGroupType
    {
        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// Service request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceRequests : System.Collections.ObjectModel.Collection<ServiceRequest>
    {

    }

    /// <summary>
    /// Service request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceRequest
    {
        /// <summary>
        /// Hotel Code of the service request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Service request code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// The status of the service request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceRequestStatusType? Status { get; set; }

        /// <summary>
        /// The priority level of the service request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Priority { get; set; }

        /// <summary>
        /// The department that is associated with the service request code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Department { get; set; }

        /// <summary>
        /// Unique identifier of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// Unique identifier of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// The guest name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string GuestName { get; set; }

        /// <summary>
        /// The room number in which the service request was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Room { get; set; }

        /// <summary>
        /// Description of the service request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comment { get; set; }

        /// <summary>
        /// Description of the action taken to complete the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Action { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceRequestStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingFollowUp")]
        PendingFollowUp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DoNotDisturb")]
        DoNotDisturb = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MakeUpRoom")]
        MakeUpRoom = 4,

    }

    /// <summary>
    /// Criteria for fetching Activity Bookings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityLookUpList : System.Collections.ObjectModel.Collection<FetchActivityBookingsType>
    {

    }

    /// <summary>
    /// Used in the request message to describe the "filtering Criteria" when executing an activity lookup.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FetchActivityBookingsType
    {
        /// <summary>
        /// ProfileID associated with the Activity under lookup.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ProfileId { get; set; }

        /// <summary>
        /// Detailed name information for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonNameType PersonName { get; set; }

        /// <summary>
        /// Detailed Address information for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType Address { get; set; }

        /// <summary>
        /// The specific acitvity information to be used for filtering the Look-up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ActivityList Activities { get; set; }

        /// <summary>
        /// Hotel Code, It is used to filter hotel specific children to this specific hotel code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    /// <summary>
    /// A collection of Activity objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityList : System.Collections.ObjectModel.Collection<Anonymous25>
    {

    }

    /// <summary>
    /// Holds fixed charge detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrepaidCardsType : System.Collections.ObjectModel.Collection<PrepaidCardType>
    {

    }

    /// <summary>
    /// Holds fixed charge information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrepaidCardType
    {
        /// <summary>
        /// Hotel context for the Reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The unique ID of the reservation to which this record applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationId ReservationId { get; set; }

        /// <summary>
        /// Family name, last name or Company Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Name { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string FirstName { get; set; }

        /// <summary>
        /// Card / Account holder name ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Prepaid card / account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CardNo { get; set; }

        /// <summary>
        /// Masked Prepaid card / account number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardNumberMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CardNumberMasked { get; set; }

        /// <summary>
        /// Prepaid Card Amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Amount { get; set; }

        /// <summary>
        /// The unique ID for the Interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type InterfaceId { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// Indicates a gift card type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("giftCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GiftCard { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationId
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

    }

    /// <summary>
    /// List of awards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardsType : System.Collections.ObjectModel.Collection<AwardType>
    {

    }

    /// <summary>
    /// Detailed information of the awards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AwardType
    {
        /// <summary>
        /// Award category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AwardCode { get; set; }

        /// <summary>
        /// Can be P (Paper) or E (E-Certificate).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AwardKindType? AwardType1 { get; set; }

        /// <summary>
        /// Description of the award/certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Certificate No.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CertificateNo { get; set; }

        /// <summary>
        /// Membership No.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipNo { get; set; }

        /// <summary>
        /// Hotel Code for which the routing instructions are provided for a profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Indicates the lowest hotel category for which the certificate is valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelCategory { get; set; }

        /// <summary>
        /// Hotel Code of the CRS application that this certificate belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalHotelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExternalHotelCode { get; set; }

        /// <summary>
        /// Confirmation Number given by a CRS application for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalConfirmationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExternalConfirmationNo { get; set; }

        /// <summary>
        /// Indicates whether the category of certificate is valid or not for this resort.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryValid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CategoryValid { get; set; }

        /// <summary>
        /// [R]=Reward, [I]=Incentive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationCertificateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReservationCertificateType? ReservationCertificateType { get; set; }

        /// <summary>
        /// [RE]=Regular Certificate, [SA]=Stay Anytime Certificate, [PS]=Point Saver Certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rewardCertificateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RewardCertificateType? RewardCertificateType { get; set; }

        /// <summary>
        /// Status of the award aka available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AwardStatusType? Status { get; set; }

        /// <summary>
        /// Expiration Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpirationDate { get; set; }

        /// <summary>
        /// Signifies whether award is gift or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gift", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gift { get; set; }

        /// <summary>
        /// Signifies whether upgrade award or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Upgrade { get; set; }

        /// <summary>
        /// Signifies whether upgrade is package or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("package", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Package { get; set; }

        /// <summary>
        /// Indicates if the award is an Instant Redemption award.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instantlyRedeemable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InstantlyRedeemable { get; set; }

        /// <summary>
        /// Indicates if this certificate was ordered using the "Paid Upgrade" option in the E-Certs screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paidUpgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PaidUpgrade { get; set; }

        /// <summary>
        /// Indicates if this certificate is detailed or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detailedCertificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DetailedCertificate { get; set; }

        /// <summary>
        /// Award Nights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nights { get; set; }

        /// <summary>
        /// MRW : From MRW MAN:Entered manually.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string SourceType { get; set; }

        /// <summary>
        /// No. of points used to order this award.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Points { get; set; }

        /// <summary>
        /// Reservation IDs will be empty if award is not attached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationId ReservationId { get; set; }

        /// <summary>
        /// Unique profile identifier requested to be fetched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Quantity of such awards needed to be ordered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Indicates the order in which the certificates received from MRW.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displaySequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DisplaySequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// Indicates that this is electronic certificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AwardKindType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Paper")]
        Paper = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ECertificate")]
        ECertificate = 1,

    }

    /// <summary>
    /// Certificate is incentive.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReservationCertificateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reward")]
        Reward = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Incentive")]
        Incentive = 1,

    }

    /// <summary>
    /// Point Saver reward.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RewardCertificateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Regular")]
        Regular = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"StayAnytime")]
        StayAnytime = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PointSaver")]
        PointSaver = 2,

    }

    /// <summary>
    /// Indicates that certificate is in use.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AwardStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAvailable")]
        NotAvailable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InUse")]
        InUse = 2,

    }

    /// <summary>
    /// A ReservationPackageType class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationPackageType
    {
        /// <summary>
        /// Package information from configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageHeaderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageCodeHeaderType PackageHeaderType { get; set; }

        /// <summary>
        /// A HotelPackageSchedule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduleList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationPackageScheduleType> ScheduleList { get; set; }

        /// <summary>
        /// The changed dates(Start and End dates) for this product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType NewTimeSpan { get; set; }

        /// <summary>
        /// Package consumption details. Includes information for quantity , allowance etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consumptionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageConsumptionType ConsumptionDetails { get; set; }

        /// <summary>
        /// Package code. This is the unique code used for the package and is a required element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PackageCode { get; set; }

        /// <summary>
        /// Reservation Package Opera Internal Unique Id. This is the unique Id used for this reservation package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InternalId { get; set; }

        /// <summary>
        /// The rate code which contains this package. If the package is not part of a rate code, this will be empty. Required element and part of the key to fetch the correct package record on the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Required value when changing a reservation package. If the original start date was null, then null is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// Required value when changing a reservation package. If the original end date was null, then null is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Package group code. If this package is part of a package group, the group code is indicated here. This is a required element and is part of the key to fetch the correct package record .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PackageGroup { get; set; }

        /// <summary>
        /// Indicates if the source of the product is Rate header, Rate Detail or Reservation. For new development this field is to be used for passing the product scource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductSourceType? Source { get; set; }

        /// <summary>
        /// This is the Award code used to redeem the package if the package is a redemption package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AwardCode { get; set; }

        /// <summary>
        /// Indicates the points used to redeem the redemption package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageCodeHeaderType
    {
        /// <summary>
        /// Package code header primary details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigPackagePrimaryDetailsType PrimaryDetails { get; set; }

        /// <summary>
        /// Package code header transaction information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigPackageTransactionType TransactionDetails { get; set; }

        /// <summary>
        /// Package code posting attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postingAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigPostingAttributesType PostingAttributes { get; set; }

    }

    /// <summary>
    /// A Config Package Info type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigPackagePrimaryDetailsType
    {
        /// <summary>
        /// The description of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// The short description of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// The Forecast group package belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forecastGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ForecastGroup { get; set; }

        /// <summary>
        /// Arrangement Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arrangementCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ArrangementCode { get; set; }

        /// <summary>
        /// Indicates the begin sell date of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beginSellDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BeginSellDate { get; set; }

        /// <summary>
        /// Indicates the end sell date of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endSellDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndSellDate { get; set; }

    }

    /// <summary>
    /// A HotelPackageTransaction type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigPackageTransactionType
    {
        /// <summary>
        /// Package is marked as an allowance, in case charge is expected back to the guest account from external interface eg. POS. which need to be offset against a consumption allowance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allowance { get; set; }

        /// <summary>
        /// The currency code for this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Currency { get; set; }

        /// <summary>
        /// The posting frequency for this package, e.g., daily, arrival, departure, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PostingType { get; set; }

        /// <summary>
        /// The price calculation rule for this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string CalculationRule { get; set; }

    }

    /// <summary>
    /// A config Package posting attributes type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigPostingAttributesType
    {
        /// <summary>
        /// The package price is added to the room rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addToRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AddToRate { get; set; }

        /// <summary>
        /// The package price is printed on separate line of the folio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printSeparateLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintSeparateLine { get; set; }

        /// <summary>
        /// Can the package be sold separate from rate plan code?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellSeparate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SellSeparate { get; set; }

        /// <summary>
        /// package charges will be posted next business day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postNextDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PostNextDay { get; set; }

        /// <summary>
        /// Package will be forecasted for consumption the next business day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forecastNextDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForecastNextDay { get; set; }

        /// <summary>
        /// The custom formula used for this package, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Formula { get; set; }

        /// <summary>
        /// Start time the package is valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        /// <summary>
        /// End time the package is valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

        /// <summary>
        /// Is package used for catering?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("catering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Catering { get; set; }

        /// <summary>
        /// The posting rhythm for this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postingRhythm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackagePostingRhythmType PostingRhythm { get; set; }

        /// <summary>
        /// The price calculation rule for this package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceCalculationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackageCalculationRuleType? PriceCalculationRule { get; set; }

        /// <summary>
        /// Indicates whether a package is configured as a ticket or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ticket", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ticket { get; set; }

        /// <summary>
        /// Package Code Inventory Items type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PkgInventoryItemType> InventoryItems { get; set; }

        /// <summary>
        /// Calculated Package Price based from Number of Adults, Children and Calculation Rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculatedPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CalculatedPrice { get; set; }

    }

    /// <summary>
    /// Package Posting rhythm type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackagePostingRhythmType
    {
        /// <summary>
        /// Post the package every X nights Staring from Night Y.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("everyXNightsStartingNightY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EveryXNightsStartingNightY EveryXNightsStartingNightY { get; set; }

        /// <summary>
        /// Post the package on certain nights of the week.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certainNightsOfTheWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertainNightsOfTheWeek CertainNightsOfTheWeek { get; set; }

        /// <summary>
        /// This user defined schedule lets you enter a posting rhythm over a 14-day period, starting with the arrival date, by assigning the day (number) within a guest stay for posting this package price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customStaySchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomStaySchedule CustomStaySchedule { get; set; }

        /// <summary>
        /// The start and end of the posting period is determined as follows: If the package is attached to a rate code: The period starts with the date when the rate code to which the package is attached becomes effective for the stay. The period ends with the date of the last night for that rate code (or the last night of the stay if the rate code remains in effect until the departure date). If the package is attached separately to the reservation: The Begin Date specified on the reservation when the package was attached is the start date for the period. The End Date specified on the reservation when the package was attached is the end date for the period. If no Begin Date and/or End Date are specified when the package is attached to the reservation, the Begin Date is assumed to be the arrival date and the End Date is assumed to be the departure date of the reservation, irrespective of when the package is attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customNightSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomNightSchedule CustomNightSchedule { get; set; }

        /// <summary>
        /// Posting Rhythm for the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PostingRhythmType? Type { get; set; }

    }

    /// <summary>
    /// Simple type for posting Rhythm types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PostingRhythmType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EveryNight")]
        EveryNight = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ArrivalNight")]
        ArrivalNight = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EveryXNightsStartingNightY")]
        EveryXNightsStartingNightY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CertainNightsOfTheWeek")]
        CertainNightsOfTheWeek = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LastNight")]
        LastNight = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EveryNightExceptArrivalNight")]
        EveryNightExceptArrivalNight = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EveryNightExceptLast")]
        EveryNightExceptLast = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EveryNightExceptFirstAndLast")]
        EveryNightExceptFirstAndLast = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomStaySchedule")]
        CustomStaySchedule = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNightSchedule")]
        CustomNightSchedule = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FloatingAllowancePerStay")]
        FloatingAllowancePerStay = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TicketPosting")]
        TicketPosting = 11,

    }

    /// <summary>
    /// Simple type for package caluculation rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PackageCalculationRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FlatRate")]
        FlatRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PerPerson")]
        PerPerson = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PerAdult")]
        PerAdult = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PerChild")]
        PerChild = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerRoom")]
        PerRoom = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PkgInventoryItemType
    {
        /// <summary>
        /// Article Number of the inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("articleNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ArticleNumber { get; set; }

        /// <summary>
        /// Description of the inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Quantity of the inventory item allocated to the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Identifier for the inventory item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ItemId { get; set; }

    }

    /// <summary>
    /// A HotelPackageSchedule type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationPackageScheduleType
    {
        /// <summary>
        /// The date the package was used or can be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consumptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ConsumptionDate { get; set; }

        /// <summary>
        /// The price per unit of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// The total quantity of the package for this date, calculated based on the calculation rule as defined in the PackageHeaderType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalQuantity { get; set; }

        /// <summary>
        /// Computed Reservation Price of the package. Calculation Will Be Performed Based On Other Parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedResvPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ComputedResvPrice { get; set; }

        /// <summary>
        /// The allowance per unit of the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitAllowance { get; set; }

        /// <summary>
        /// The date of the Reservation when this package is applicable. This can be different from the date the package will be consumed. Example are next day packages. Reservation date is when the package is applied to the guest and Consumption date is when the guest can consume the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReservationDate { get; set; }

        /// <summary>
        /// The original price per unit of the package if it has been changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalUnitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginalUnitPrice { get; set; }

        /// <summary>
        /// The original allowance per unit of the package if it has been changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalUnitAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OriginalUnitAllowance { get; set; }

    }

    /// <summary>
    /// Package Consumption Information. Includes information on quantity of the package used, allowance consumption etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PackageConsumptionType
    {
        /// <summary>
        /// The default quantity attached in the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultQuantity { get; set; }

        /// <summary>
        /// The quantity which has been excluded in the package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExcludedQuantity { get; set; }

        /// <summary>
        /// The total quantity of the package, calculated based on the calculation rule as defined in the PackageHeaderType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalQuantity { get; set; }

        /// <summary>
        /// Indicates if Allowance(for POS packages) has been consumed/posted for today.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowanceConsumed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowanceConsumed { get; set; }

    }

    /// <summary>
    /// Sources of Products
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RateHeader")]
        RateHeader = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RateDetail")]
        RateDetail = 2,

    }

    /// <summary>
    /// Defines a collection of inventory items attached to a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResInventoryItemsType
    {
        /// <summary>
        /// Inventory item attached to a reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ResInventoryItemType> Item { get; set; }

        /// <summary>
        /// The Item Class ID which the item belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemClassCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ItemClassCode { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResInventoryItemType
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

        /// <summary>
        /// Specifies Items and its attributes. When used for data manipulation for Items setup on reservation, etc only code is considered. Other Attributes are for used to provide information during fetch operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemInfoType Item { get; set; }

        /// <summary>
        /// Number of items booked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Begin and end date and time of the items applicability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRangeType TimeSpan { get; set; }

        /// <summary>
        /// If exists specifies whether the item is setup due to a Rate Plan, Package or a Block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResInventoryItemSourceType Source { get; set; }

    }

    /// <summary>
    /// Basic information regarding an Item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemInfoType
    {
        /// <summary>
        /// Detail description of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Defines a Time period when the item is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availabilityPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeWindowType AvailabilityPeriod { get; set; }

        /// <summary>
        /// Date Range to get the inventories of the items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType TimeSpan { get; set; }

        /// <summary>
        /// Quantity of hold Item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// ID reference for the hold Item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemHoldId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ItemHoldId { get; set; }

        /// <summary>
        /// Item Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Name of an item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if it is an item pool. Not applicable for Item within the Item Pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ItemPool { get; set; }

        /// <summary>
        /// If true indicates that item is allowed to sell separately.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellSeparate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SellSeparate { get; set; }

        /// <summary>
        /// If true indicates that item can be sold in reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellInReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SellInReservation { get; set; }

        /// <summary>
        /// If true indicates that item can be sold in event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellInEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SellInEvent { get; set; }

        /// <summary>
        /// If true indicates that item is required for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredForBooking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequiredForBooking { get; set; }

        /// <summary>
        /// If true indicates that item has fixed charge when it is attached to a reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FixedCharge { get; set; }

        /// <summary>
        /// If true indicates that item could be held outside of the reservation stay days.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outsideStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutsideStay { get; set; }

        /// <summary>
        /// Define the default duration in days when booking the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultDuration { get; set; }

    }

    /// <summary>
    /// Defines a Time period with start time and an end time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeWindowType
    {
        /// <summary>
        /// Start Time of the Time window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }

        /// <summary>
        /// End Time of the Time window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }

    }

    /// <summary>
    /// Defines whether the item is setup due to a Rate Plan, Package or a Block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResInventoryItemSourceType
    {
        /// <summary>
        /// Rate Plan Code, If populated specifies that the item is setup due to a Rate Plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Package Code, If populated specifies that the item is setup due to a Package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PackageCode { get; set; }

        /// <summary>
        /// Block Unique ID, If populated specifies that the item is setup due to a Block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BlockId BlockId { get; set; }

        /// <summary>
        /// If true, it implies that the item has been attached to the reservation as part of a Welcome Offer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("welcomeOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WelcomeOffer { get; set; }

        /// <summary>
        /// Source Reservation Package Opera Internal Unique Id. This is the unique Id used for the reservation package associated with this item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageInternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PackageInternalId { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlockId
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Detailed information of the memberships.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MembershipType
    {
        /// <summary>
        /// Additional comments regarding to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParagraphType Comment { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newMembershipNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NewMembershipNumber { get; set; }

        /// <summary>
        /// Name to be displayed on the membership card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameOnCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// Description of the membership program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("programDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ProgramDescription { get; set; }

        /// <summary>
        /// Indicates the membership level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipLevel { get; set; }

        /// <summary>
        /// Indicates the membership level description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevelDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string MembershipLevelDescription { get; set; }

        /// <summary>
        /// Indicates the membership class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipClass { get; set; }

        /// <summary>
        /// Earning preference to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earningPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MembershipEarningPreferenceType? EarningPreference { get; set; }

        /// <summary>
        /// Indicates whether membership is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// benefits for the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BenefitsType Benefits { get; set; }

        /// <summary>
        /// Defines the degree of participation for this membership in the tier management portion of the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tierAdministration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierAdministrationType? TierAdministration { get; set; }

        /// <summary>
        /// Defines how downgrading will be handled for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DowngradeType? Downgrade { get; set; }

        /// <summary>
        /// The status of issuing new membership card to the member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reIssueNewCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardReIssueType? ReIssueNewCard { get; set; }

        /// <summary>
        /// True if you want to exclude the member from the Membership Fulfillment extract,the member's actions will not be included in the fulfillment extract until this value set to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeFromBatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeFromBatch { get; set; }

        /// <summary>
        /// Indicates Upgrade information which includes member's next tier level, requirements for the next upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string UpgradeDescription { get; set; }

        /// <summary>
        /// Indicates information regarding the member's possible downgrades.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string DowngradeDescription { get; set; }

        /// <summary>
        /// Value Rating Type Description for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Rating { get; set; }

        /// <summary>
        /// Indicates how the guest enrolled in the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipEnrollmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipEnrollmentCode { get; set; }

        /// <summary>
        /// Indicates where the guest is in the membership enrollment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MemberStatus { get; set; }

        /// <summary>
        /// Profile MemberShip Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentPoints { get; set; }

        /// <summary>
        /// Label used to refer to points for this membership type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pointsLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PointsLabel { get; set; }

        /// <summary>
        /// Source from where the enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentSource { get; set; }

        /// <summary>
        /// Resort/CRO where enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentResort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentResort { get; set; }

        /// <summary>
        /// Preferred Card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreferredCard { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipId { get; set; }

        /// <summary>
        /// Type of membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipType1 { get; set; }

        /// <summary>
        /// Indicator if Membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembershipYn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string PrimaryMembershipYn { get; set; }

        /// <summary>
        /// Boolean indicator set to True implies membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryMembership { get; set; }

        /// <summary>
        /// Membership ID Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipIdNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MembershipIdNo { get; set; }

        /// <summary>
        /// Ranking assigned to the Player Profile by the Gaming system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerRanking { get; set; }

        /// <summary>
        /// Indicates how the award points for this membership type will be managed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("centralSetup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CentralSetup { get; set; }

        /// <summary>
        /// Indicates when the member signed up for the loyalty program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SignupDate { get; set; }

        /// <summary>
        /// Indicates the starting date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }

        /// <summary>
        /// Indicates the ending date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpireDate { get; set; }

        /// <summary>
        /// When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDateExclusiveIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpireDateExclusiveIndicator { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    /// <summary>
    /// Detailed information of the memberships.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationMembershipType
    {
        /// <summary>
        /// Additional comments regarding to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParagraphType Comment { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newMembershipNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NewMembershipNumber { get; set; }

        /// <summary>
        /// Name to be displayed on the membership card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameOnCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string NameOnCard { get; set; }

        /// <summary>
        /// Description of the membership program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("programDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ProgramDescription { get; set; }

        /// <summary>
        /// Indicates the membership level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipLevel { get; set; }

        /// <summary>
        /// Indicates the membership level description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipLevelDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string MembershipLevelDescription { get; set; }

        /// <summary>
        /// Indicates the membership class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipClass { get; set; }

        /// <summary>
        /// Earning preference to the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earningPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MembershipEarningPreferenceType? EarningPreference { get; set; }

        /// <summary>
        /// Indicates whether membership is active or inactive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// benefits for the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("benefits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BenefitsType Benefits { get; set; }

        /// <summary>
        /// Defines the degree of participation for this membership in the tier management portion of the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tierAdministration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierAdministrationType? TierAdministration { get; set; }

        /// <summary>
        /// Defines how downgrading will be handled for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DowngradeType? Downgrade { get; set; }

        /// <summary>
        /// The status of issuing new membership card to the member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reIssueNewCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CardReIssueType? ReIssueNewCard { get; set; }

        /// <summary>
        /// True if you want to exclude the member from the Membership Fulfillment extract,the member's actions will not be included in the fulfillment extract until this value set to false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeFromBatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeFromBatch { get; set; }

        /// <summary>
        /// Indicates Upgrade information which includes member's next tier level, requirements for the next upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string UpgradeDescription { get; set; }

        /// <summary>
        /// Indicates information regarding the member's possible downgrades.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downgradeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32000)]
        public string DowngradeDescription { get; set; }

        /// <summary>
        /// Value Rating Type Description for this membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Rating { get; set; }

        /// <summary>
        /// Indicates how the guest enrolled in the program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipEnrollmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MembershipEnrollmentCode { get; set; }

        /// <summary>
        /// Indicates where the guest is in the membership enrollment process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string MemberStatus { get; set; }

        /// <summary>
        /// Profile MemberShip Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurrentPoints { get; set; }

        /// <summary>
        /// Label used to refer to points for this membership type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pointsLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PointsLabel { get; set; }

        /// <summary>
        /// Source from where the enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentSource { get; set; }

        /// <summary>
        /// Resort/CRO where enrollment is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollmentResort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string EnrollmentResort { get; set; }

        /// <summary>
        /// Preferred Card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreferredCard { get; set; }

        /// <summary>
        /// Card Number of the membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipId { get; set; }

        /// <summary>
        /// Type of membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MembershipType { get; set; }

        /// <summary>
        /// Indicator if Membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembershipYn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string PrimaryMembershipYn { get; set; }

        /// <summary>
        /// Boolean indicator set to True implies membership is a Primary Membership.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrimaryMembership { get; set; }

        /// <summary>
        /// Membership ID Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipIdNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MembershipIdNo { get; set; }

        /// <summary>
        /// Ranking assigned to the Player Profile by the Gaming system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerRanking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PlayerRanking { get; set; }

        /// <summary>
        /// Indicates how the award points for this membership type will be managed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("centralSetup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CentralSetup { get; set; }

        /// <summary>
        /// Indicates when the member signed up for the loyalty program.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SignupDate { get; set; }

        /// <summary>
        /// Indicates the starting date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EffectiveDate { get; set; }

        /// <summary>
        /// Indicates the ending date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpireDate { get; set; }

        /// <summary>
        /// When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expireDateExclusiveIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpireDateExclusiveIndicator { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        [Newtonsoft.Json.JsonProperty("linkMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LinkMembership { get; set; }

        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

    }

    /// <summary>
    /// Defines reservation payment methods.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationPaymentMethodsType : System.Collections.ObjectModel.Collection<ReservationPaymentMethodType>
    {

    }

    /// <summary>
    /// A routing info object can either be of type Folio OR of type Room with its corresponding instructions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoutingInfoListType : System.Collections.ObjectModel.Collection<RoutingInfoType>
    {

    }

    /// <summary>
    /// A routing info object can either be of type Folio OR of type Room with its corresponding object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoutingInfoType
    {
        /// <summary>
        /// Folio routing type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Folio Folio { get; set; }

        /// <summary>
        /// Room routing type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Room Room { get; set; }

        /// <summary>
        /// Comp Accounting Routing Info
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comp Comp { get; set; }

        /// <summary>
        /// Comp Accounting Request routing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Request Request { get; set; }

        /// <summary>
        /// On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refreshFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RefreshFolio { get; set; }

    }

    /// <summary>
    /// Routing limit can be one of the three: Credit Limit, Percetage Limit, Covers Limit
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoutingInstructionType
    {
        /// <summary>
        /// Duration of this instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration Duration { get; set; }

        /// <summary>
        /// Set of Transaction Codes configured in this time span.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TrxCodesInfoType TransactionCodes { get; set; }

        /// <summary>
        /// Set of Billing Instructions configured in this time span.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billingInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public BillingInstructionsType BillingInstructions { get; set; }

        /// <summary>
        /// Allowable credit amount for this routing instruction. Null value means no limit, 0 equals zero.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditLimit { get; set; }

        /// <summary>
        /// The routing limit percentage allowed for this routing instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentageLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PercentageLimit { get; set; }

        /// <summary>
        /// Number of covers for this routing instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("covers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Covers { get; set; }

        /// <summary>
        /// Amount of Credit used for this routing instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limitUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LimitUsed { get; set; }

        /// <summary>
        /// Internal Routing Link Id identifier to which limit group the instruction belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routingLinkId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type RoutingLinkId { get; set; }

    }

    /// <summary>
    /// Authorizer Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompAccountingType
    {
        [Newtonsoft.Json.JsonProperty("authorizerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type AuthorizerId { get; set; }

        /// <summary>
        /// Application user name of the authorizer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string AuthorizerUserName { get; set; }

        /// <summary>
        /// Full name of the authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AuthorizerName { get; set; }

        /// <summary>
        /// Rate code of the authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizerRateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string AuthorizerRateCode { get; set; }

        /// <summary>
        /// Indicates whether user has the choice to have reservation inherit rate code from the authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inheritAuthorizerRateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InheritAuthorizerRateCode { get; set; }

        /// <summary>
        /// AR Account Number of the authorizer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aRNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ARNumber { get; set; }

        /// <summary>
        /// The Comp Type for this Account. Used when using the Comp types functionality
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CompTypeCode { get; set; }

        /// <summary>
        /// The coupon or voucher number used by the external gaming system to track postings made to this routing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compVoucherNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CompVoucherNo { get; set; }

        /// <summary>
        /// Arrival date range for comp routing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRangeType DateRange { get; set; }

        /// <summary>
        /// Membership number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string MembershipId { get; set; }

        /// <summary>
        /// Unique Id of membership
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipIdNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MembershipIdNo { get; set; }

        /// <summary>
        /// Name displayed on the membership card
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membershipNameOnCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string MembershipNameOnCard { get; set; }

    }

    /// <summary>
    /// Type for the details of a Comp Routing Request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompRoutingRequestType
    {
        /// <summary>
        /// User who requested the Comp Routing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoType RequestedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        /// <summary>
        /// User information of user who declined comp routing request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("declinedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserInfoType DeclinedBy { get; set; }

        /// <summary>
        /// Comp routing status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompRoutingStatusType? Status { get; set; }

    }

    /// <summary>
    /// Opera User Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInfoType
    {
        /// <summary>
        /// User Id of the Opera User
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        /// <summary>
        /// Name of the Opera User
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string UserName { get; set; }

    }

    /// <summary>
    /// Status which indicates that the Request of Comp Routing was declined
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompRoutingStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Request")]
        Request = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Comp")]
        Comp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Declined")]
        Declined = 2,

    }

    /// <summary>
    /// A collection of reservation deposit and cancellation policies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationPoliciesType
    {
        /// <summary>
        /// A collection of reservation cancellation policies..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellationPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResCancellationPoliciesType CancellationPolicies { get; set; }

        /// <summary>
        /// A collection of reservation deposit policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResDepositPoliciesType DepositPolicies { get; set; }

        /// <summary>
        /// A list of Ids for reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ReservationIdList { get; set; }

        /// <summary>
        /// Name identifier for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Name { get; set; }

    }

    /// <summary>
    /// A list of reservation cancellation policies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResCancellationPoliciesType : System.Collections.ObjectModel.Collection<ResCancellationPolicyType>
    {

    }

    /// <summary>
    /// A cancellation policy attached with the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResCancellationPolicyType
    {
        /// <summary>
        /// Type of reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DepositCancelRevenueType? RevenueType { get; set; }

        /// <summary>
        /// Cancellation policy details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCancelPenaltyType Policy { get; set; }

        /// <summary>
        /// The percentage amount due for reservation cancellation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentageDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? PercentageDue { get; set; }

        /// <summary>
        /// Comments attached with the reservation cancellation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        /// <summary>
        /// Unique ID of the Reservation Policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type PolicyId { get; set; }

    }

    /// <summary>
    /// The type to indicate what revenue is to be used for calculating deposit/cancellation amounts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DepositCancelRevenueType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Rooms")]
        Rooms = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Catering")]
        Catering = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 2,

    }

    /// <summary>
    /// The CancelPenalty class defines the cancellation policy of the hotel facility.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResCancelPenaltyType
    {
        /// <summary>
        /// Cancellation deadline, absolute or relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyDeadlineType Deadline { get; set; }

        /// <summary>
        /// Cancellation fee expressed as a fixed amount, or percentage of/or room nights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyAmountPercentType AmountPercent { get; set; }

        /// <summary>
        /// Text description of the Penalty in a given language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("penaltyDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PenaltyDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OffsetUnitType? OffsetUnit { get; set; }

        /// <summary>
        /// Formatted Text Rule of the Cancellation Penalty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FormattedRule { get; set; }

        /// <summary>
        /// Policy Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PolicyCode { get; set; }

        /// <summary>
        /// Flag to indicate if the cancellation policy is manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Manual { get; set; }

        /// <summary>
        /// Indicates if the amount is refundable if booking is canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonRefundable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonRefundable { get; set; }

        /// <summary>
        /// Indicator if Cancellation Penalty is currently applicable or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Effective { get; set; }

    }

    /// <summary>
    /// Cancellation deadline, absolute or relative.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyDeadlineType
    {
        /// <summary>
        /// Defines the absolute deadline. Either this or the offset attributes may be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("absoluteDeadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AbsoluteDeadline { get; set; }

        /// <summary>
        /// The number of days before arrival that allows cancellation without penalties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offsetFromArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OffsetFromArrival { get; set; }

        /// <summary>
        /// Time on offset day the cancellation penalties applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offsetDropTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OffsetDropTime { get; set; }

        /// <summary>
        /// The number of days after booking deposit must be paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offsetFromBookingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OffsetFromBookingDate { get; set; }

    }

    /// <summary>
    /// Defines the percentage basis for calculating the fee amount or the amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyAmountPercentType
    {
        /// <summary>
        /// Provides the basis for how the amount of the guarantee is calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PolicyBasisTypeType? BasisType { get; set; }

        /// <summary>
        /// The number of nights of the hotel stay that are used to calculate the fee amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nights { get; set; }

        /// <summary>
        /// The percentage used to calculate the amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? Percent { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// Full Amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PolicyBasisTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FlatAmount")]
        FlatAmount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Percentage")]
        Percentage = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Nights")]
        Nights = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NightPercentage")]
        NightPercentage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FullAmount")]
        FullAmount = 4,

    }

    /// <summary>
    /// Indicates deadline offset unit type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OffsetUnitType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 3,

    }

    /// <summary>
    /// A list of deposit policies attached with the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResDepositPoliciesType : System.Collections.ObjectModel.Collection<ResDepositPolicyType>
    {

    }

    /// <summary>
    /// A deposit policy attached with the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResDepositPolicyType
    {
        /// <summary>
        /// Type of reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DepositCancelRevenueType? RevenueType { get; set; }

        /// <summary>
        /// Reservation deposit policy details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepositPolicyType Policy { get; set; }

        /// <summary>
        /// Comments attached with a deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        /// <summary>
        /// Total amount paid against the reservation deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType AmountPaid { get; set; }

        /// <summary>
        /// Total amount due against the reservation deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType AmountDue { get; set; }

        /// <summary>
        /// Unique ID of the Reservation Policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type PolicyId { get; set; }

    }

    /// <summary>
    /// Used to define the deposit policy, guarantees policy, and/or accepted forms of payment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DepositPolicyType
    {
        /// <summary>
        /// Payment expressed as a fixed amount, or a percentage of/or room nights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyAmountPercentType AmountPercent { get; set; }

        /// <summary>
        /// Payment deadline, absolute or relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyDeadlineType Deadline { get; set; }

        /// <summary>
        /// Text description of the Payment in a given language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Receipt number associated with the deposit policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositReceiptNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DepositReceiptNo { get; set; }

        /// <summary>
        /// Transaction Date associated with the deposit policy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? TransactionDate { get; set; }

        /// <summary>
        /// Flag to indicate if deposit policy is reversed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositReqReversed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DepositReqReversed { get; set; }

        /// <summary>
        /// Formatted Text Rule of the deposit policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FormattedRule { get; set; }

        /// <summary>
        /// Defines if the deposit amount is calculated based on Room Charges, Catering Charges or both
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeOfCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DepositCancelRevenueType? TypeOfCharges { get; set; }

        /// <summary>
        /// Deposit Policy Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PolicyCode { get; set; }

        /// <summary>
        /// Flag to indicate if the cancellation policy is manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Manual { get; set; }

    }

    /// <summary>
    /// Linked Reservations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkedReservationsInfoType
    {
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<LinkedReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkedReservationInfoType
    {
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType TimeSpan { get; set; }

        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        [Newtonsoft.Json.JsonProperty("room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Room { get; set; }

        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Balance { get; set; }

        /// <summary>
        /// Key information about the block for the linked reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationBlockType ReservationBlock { get; set; }

        [Newtonsoft.Json.JsonProperty("displayColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisplayColor { get; set; }

        /// <summary>
        /// Collection of allowed actions for the linked reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(11)]
        public ReservationAllowedActionsType AllowedActions { get; set; }

        /// <summary>
        /// Indicates the Actual status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("linkReservationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LinkedReservationType? LinkReservationType { get; set; }

        /// <summary>
        /// This attribute is to verify if reverse check-in is allowed for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reverseCheckInAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseCheckInAllowed { get; set; }

        /// <summary>
        /// This attribute is to verify if room number is locked for the reservation. When true the room number cannot be changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomNumberLocked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomNumberLocked { get; set; }

        /// <summary>
        /// This attribute checks if rate is suppressed or not in order to properly show strike through.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suppressRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuppressRate { get; set; }

    }

    /// <summary>
    /// Enumeration of the different Linked Reservation Types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LinkedReservationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Linked")]
        Linked = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Shared")]
        Shared = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 2,

    }

    /// <summary>
    /// Information regarding catering event and catering revenue type associated to the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CateringResInfoType
    {
        /// <summary>
        /// Unique ID on a catering event associated to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventId EventId { get; set; }

        /// <summary>
        /// Catering revenue type associated to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RevenueType { get; set; }

    }

    /// <summary>
    /// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventId
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// List of alerts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertsType : System.Collections.ObjectModel.Collection<AlertType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertType
    {
        /// <summary>
        /// Code identifying the type of alert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Indicate whether the alert is a global that is automatically and dynamically attached to all reservations that meet the alert criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Global { get; set; }

        /// <summary>
        /// The Area where the alert will be attached and shown.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("area", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertAreaType? Area { get; set; }

        /// <summary>
        /// The alert message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Notify by showing the alert on the screen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screenNotification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ScreenNotification { get; set; }

        /// <summary>
        /// Notify by sending the message to the printer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printerNotification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrinterNotification { get; set; }

        /// <summary>
        /// Printer used to print the alert notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PrinterName { get; set; }

        /// <summary>
        /// The module id of the report. This is used to printer the alert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ReportId { get; set; }

        /// <summary>
        /// Report name of the report type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ReportName { get; set; }

        /// <summary>
        /// Report description. Mainly used for as a parameter for printing the alerts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000)]
        public string ReportDescription { get; set; }

        /// <summary>
        /// Contains information regarding the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlertGuestInfoType GuestInfo { get; set; }

        /// <summary>
        /// Collections of user defined fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDefinedFieldsType UserDefinedFields { get; set; }

        /// <summary>
        /// Contains information regarding welcome offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("welcomeOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WelcomeOfferType WelcomeOffer { get; set; }

        /// <summary>
        /// Indicates the Reservation Stop Check In/Check Out Global Alert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stopCheckInCheckOut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StopCheckInCheckOut { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertAreaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CheckIn")]
        CheckIn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckOut")]
        CheckOut = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Billing")]
        Billing = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertGuestInfoType
    {
        /// <summary>
        /// Guest Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string GuestName { get; set; }

        /// <summary>
        /// Membership information of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipType Membership { get; set; }

        /// <summary>
        /// VIP status of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VIPStatusType VipStatus { get; set; }

        /// <summary>
        /// Hotel code of the last stay location of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastHotelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string LastHotelCode { get; set; }

        /// <summary>
        /// Last stay date at the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStayDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastStayDate { get; set; }

        /// <summary>
        /// Holds total number of days that the guest have stayed in the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalStay { get; set; }

        /// <summary>
        /// Additional alert information regarding the membership of the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        /// <summary>
        /// Additional alert information regarding the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Preference { get; set; }

        /// <summary>
        /// Additional mandatory alert information regarding the guest preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Preference2 { get; set; }

        /// <summary>
        /// Holds the language preferred by the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestPreferredLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GuestPreferredLanguage { get; set; }

        /// <summary>
        /// Holds total number of days that the guest have stayed in the properties for the same brand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalBrandStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalBrandStay { get; set; }

        /// <summary>
        /// Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// Indicates the date of birth as masked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDateMasked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string BirthDateMasked { get; set; }

    }

    /// <summary>
    /// VIP status of the customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VIPStatusType
    {
        /// <summary>
        /// Used for Character Strings, length 0 to 2000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

        /// <summary>
        /// VIP status of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WelcomeOfferType
    {
        /// <summary>
        /// Determines the status of the welcome offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Status { get; set; }

        /// <summary>
        /// Determines the welcome offer option selected while availing the welcome offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WelcomeOfferOptionsType? Type { get; set; }

    }

    /// <summary>
    /// None of the Welcome Offer option is selected.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WelcomeOfferOptionsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BonusPoints")]
        BonusPoints = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ecoupons")]
        Ecoupons = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Items")]
        Items = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PostIt")]
        PostIt = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NotSelected")]
        NotSelected = 4,

    }

    /// <summary>
    /// List of Reservation Traces.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotelReservationTracesType : System.Collections.ObjectModel.Collection<HotelReservationTraceType>
    {

    }

    /// <summary>
    /// Extended Trace object to hold information for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotelReservationTraceType
    {
        /// <summary>
        /// Date of the trace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TraceTimeInfoType TimeInfo { get; set; }

        /// <summary>
        /// Reservation ID of the reservation for which the traces are to be retrieved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationId ReservationId { get; set; }

        /// <summary>
        /// Indicates the Department code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("departmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DepartmentId { get; set; }

        /// <summary>
        /// The information this trace contains.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TraceText { get; set; }

        /// <summary>
        /// Information regarding the status of the trace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolveInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TraceResolveType ResolveInfo { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TraceTimeInfoType
    {
        /// <summary>
        /// Time span for the trace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTimeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeSpanType DateTimeSpan { get; set; }

        /// <summary>
        /// Date of the trace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TraceOn { get; set; }

        /// <summary>
        /// Time of the trace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traceTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TraceTime { get; set; }

        /// <summary>
        /// User that entered this trace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enteredBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string EnteredBy { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TraceResolveType
    {
        /// <summary>
        /// Date the trace was resolved
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolvedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ResolvedOn { get; set; }

        /// <summary>
        /// User that resolved the trace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolvedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ResolvedBy { get; set; }

    }

    /// <summary>
    /// List of confirmation letters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfirmationsType : System.Collections.ObjectModel.Collection<ConfirmationType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfirmationType
    {
        /// <summary>
        /// Receipient's information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipientInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfRecipientInfoType RecipientInfo { get; set; }

        /// <summary>
        /// The status of the confirmation letter sent via the specified CommunicationType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public ConfDeliveryInfoTypes DeliveryInfo { get; set; }

        /// <summary>
        /// Confirmation style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmationStyleInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfirmationStyle ConfirmationStyleInfo { get; set; }

        /// <summary>
        /// Senders Email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string FromEmail { get; set; }

        /// <summary>
        /// Flag to indicate sending confirmation letter as text message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sendTextMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SendTextMessage { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfRecipientInfoType
    {
        /// <summary>
        /// name id of the recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileId ProfileId { get; set; }

        /// <summary>
        /// Last Name of recipient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileNameType FormerName { get; set; }

        /// <summary>
        /// id of the address where to send confirmation letter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressInfoType AddressInfo { get; set; }

        /// <summary>
        /// id of the Email where to send confirmation letter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailInfoType EmailInfo { get; set; }

        /// <summary>
        /// id of the Fax where to send confirmation letter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType FaxInfo { get; set; }

        /// <summary>
        /// id of the Mobile where to send confirmation letter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TelephoneInfoType TelephoneInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("recipientType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProfileTypeType? RecipientType { get; set; }

    }

    /// <summary>
    /// This provides name information for a person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileNameType
    {
        /// <summary>
        /// Family name, last name or Company Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// Full display Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string FullName { get; set; }

        /// <summary>
        /// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NamePrefix { get; set; }

        /// <summary>
        /// Given name, first name or names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givenName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GivenName { get; set; }

        /// <summary>
        /// The middle name of the person name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Degree or honors (e.g., Ph.D., M.D.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string NameTitle { get; set; }

        /// <summary>
        /// Type of name of the individual, such as former, nickname, alternate or alias name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PersonNameTypeType? NameType { get; set; }

    }

    /// <summary>
    /// List of confirmation letter delivery methods and their status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfDeliveryInfoTypes : System.Collections.ObjectModel.Collection<ConfDeliveryInfoType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfDeliveryInfoType
    {
        /// <summary>
        /// CommunicationType through which the confirmation letter was sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("communicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfDeliveryMethod? CommunicationType { get; set; }

        /// <summary>
        /// Status of last sent confirmation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SentConfirmationStatus? LastStatus { get; set; }

        /// <summary>
        /// Date of last attempt to send confirmation letter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastAttempted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAttempted { get; set; }

        /// <summary>
        /// Number of success letter sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successfulTries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SuccessfulTries { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConfDeliveryMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Print")]
        Print = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NotConfigured")]
        NotConfigured = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SentConfirmationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfirmationStyle
    {
        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

        /// <summary>
        /// Name of the confirmation letter style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Style { get; set; }

    }

    /// <summary>
    /// Holds call information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CallHistoryType : System.Collections.ObjectModel.Collection<CallType>
    {

    }

    /// <summary>
    /// Holds fixed charge detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FixedChargesType : System.Collections.ObjectModel.Collection<FixedChargeType>
    {

    }

    /// <summary>
    /// Holds fixed charge information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FixedChargeType
    {
        /// <summary>
        /// Holds schedule of fixed charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixedChargeScheduleType Schedule { get; set; }

        /// <summary>
        /// Holds specific details of fixed charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixedChargeDetailType Charge { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

    }

    /// <summary>
    /// Holds schedule of fixed charge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FixedChargeScheduleType
    {
        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

        /// <summary>
        /// Frequency of a fixed charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FixedChargeFrequencyType? Frequency { get; set; }

        /// <summary>
        /// Day of when to execute fixed charge. Applicable when frequency is Daily or Weekly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dayToExecute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string DayToExecute { get; set; }

        /// <summary>
        /// Date of when to execute yearly fixed charge. Applicable when frequency is Yearly.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateToExecute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DateToExecute { get; set; }

    }

    /// <summary>
    /// Yearly.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FixedChargeFrequencyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"O")]
        O = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"W")]
        W = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Q")]
        Q = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Y")]
        Y = 5,

    }

    /// <summary>
    /// Fixed charge amount could be specified by flat fee or be a percentage of the rate amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FixedChargeDetailType
    {
        /// <summary>
        /// Transaction code and description of a fixed charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Transaction { get; set; }

        /// <summary>
        /// Quantity of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Price of the product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType ChargeAmount { get; set; }

        /// <summary>
        /// Percentage of the rate amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? Percent { get; set; }

        /// <summary>
        /// Additional information regarding the fixed charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supplement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Supplement { get; set; }

        /// <summary>
        /// Holds related article code and description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("article", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType Article { get; set; }

        /// <summary>
        /// Holds number of comp or cash room night to allocate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomNights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoomNights { get; set; }

    }

    /// <summary>
    /// Holds the Message Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuestMessagesType : System.Collections.ObjectModel.Collection<GuestMessageType>
    {

    }

    /// <summary>
    /// Holds the Message information for a Reservation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuestMessageType
    {
        /// <summary>
        /// Holds the Message Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageType Message { get; set; }

        /// <summary>
        /// Holds the Delivery Method Information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageDeliveryType Delivery { get; set; }

        /// <summary>
        /// URL that identifies the location associated with the record identified by the UniqueID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Url { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Instance { get; set; }

        /// <summary>
        /// Used to identify the source of the identifier (e.g., IATA, ABTA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string IdContext { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// Additional identifying value assigned by the creating system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdExtension { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

    }

    /// <summary>
    /// Holds the Message Information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageType
    {
        /// <summary>
        /// Message Content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MessageText { get; set; }

        /// <summary>
        /// Date the message was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MessageDate { get; set; }

        /// <summary>
        /// Type of message (Voice/Text)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeOfMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeOfMessageType? TypeOfMessage { get; set; }

        /// <summary>
        /// Recipient of the Message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Recipient { get; set; }

        /// <summary>
        /// User who created the Message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Operator { get; set; }

    }

    /// <summary>
    /// The type of Message for Guest Messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TypeOfMessageType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tm")]
        Tm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Vm")]
        Vm = 1,

    }

    /// <summary>
    /// Holds the Delivery Information of the Message
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageDeliveryType
    {
        /// <summary>
        /// Status of the Message (Received or Not Received)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageStatusType? DeliveryStatus { get; set; }

        /// <summary>
        /// Date the message has been delivered (marked as received)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeliveryDate { get; set; }

        /// <summary>
        /// User who delivered the message (who marked message as received)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveredBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string DeliveredBy { get; set; }

        /// <summary>
        /// Date when message has been printed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PrintDate { get; set; }

        /// <summary>
        /// Date when message has been sent via SMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textMessageSentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TextMessageSentDate { get; set; }

        /// <summary>
        /// User who sent the message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textMessageSentBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string TextMessageSentBy { get; set; }

        /// <summary>
        /// User Id of who sent the message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textMessageSentById", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TextMessageSentById { get; set; }

        /// <summary>
        /// Number in which the message is to be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textMessageRecipientNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string TextMessageRecipientNo { get; set; }

    }

    /// <summary>
    /// Status of the Message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Mr")]
        Mr = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Nr")]
        Nr = 1,

    }

    /// <summary>
    /// List of override actions done.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverrideInstructionsType : System.Collections.ObjectModel.Collection<OverrideInstructionType>
    {

    }

    /// <summary>
    /// Type for Overrides. Contains information for the override action performed while booking a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverrideInstructionType
    {
        /// <summary>
        /// The description of the restriction for which the override was done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// The date when the override was done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// The type of override done. If done for Availability, then it will be AVAILABILITY.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Type { get; set; }

        /// <summary>
        /// Login ID of the user who performed the override.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string UserId { get; set; }

    }

    /// <summary>
    /// Collection of ECouponType object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ECouponsType : System.Collections.ObjectModel.Collection<ECouponType>
    {

    }

    /// <summary>
    /// Reservation eCoupon Type Information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ECouponType
    {
        /// <summary>
        /// ECouponID to attach the eCoupon to Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCouponId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ECouponId { get; set; }

        /// <summary>
        /// Code to attach the eCoupon to Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Description of the eCoupon attached to the Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Determines whether the eCoupon is attached through the Rate Code or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoAttached", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoAttached { get; set; }

        /// <summary>
        /// Assigned Quantity for the eCoupon when attached to Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IssuedQuantity { get; set; }

        /// <summary>
        /// Used Quantity of the eCoupon for the Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsedQuantity { get; set; }

        /// <summary>
        /// Reason for attaching/modifing eCoupon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Reason { get; set; }

        /// <summary>
        /// Rate plan of the attached eCoupon to Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Determines whether this eCoupon is eligible for welcome offer or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("welcomeOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WelcomeOffer { get; set; }

    }

    /// <summary>
    /// List of Transaction Diversion rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationTransactionDiversionsType : System.Collections.ObjectModel.Collection<ReservationTransactionDiversionType>
    {

    }

    /// <summary>
    /// A Transaction Diversion Rule Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationTransactionDiversionType
    {
        /// <summary>
        /// VIP code to consider while applying Diversion Instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string VipCode { get; set; }

        /// <summary>
        /// Membership type to consider while applying Diversion Instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("membership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MembershipTypeLevelType Membership { get; set; }

        /// <summary>
        /// Room number to receive all the diverted transactions configured for this instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TargetRoom { get; set; }

        /// <summary>
        /// Collection of Transaction Code List
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CodeDescriptionType> TransactionCodes { get; set; }

        /// <summary>
        /// User defined message for the Transaction Diversion Rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Level of the Transaction Diversion rule that can be Property or Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionDiversionRuleLevelType? Level { get; set; }

        /// <summary>
        /// Threshold Details related to the Transaction diversion rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thresholds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThresholdDetailsType Thresholds { get; set; }

        /// <summary>
        /// Transaction Diversion Rule Types
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionDiversionRuleTypeType? Type { get; set; }

        /// <summary>
        /// Hotel code with which Transaction Diversion Rule is associated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Transaction Diversion Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// User configured Sequence number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displaySequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DisplaySequence { get; set; }

        /// <summary>
        /// Indicator that tells whether the transaction diversion rule is active or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// The Note details related to the Transaction Diversion Rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommentInfoType Notes { get; set; }

        /// <summary>
        /// Transaction diversions that are posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("posted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Posted { get; set; }

        /// <summary>
        /// Transaction diversions that are diverted .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diverted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Diverted { get; set; }

        /// <summary>
        /// Collection of daily details of a Transaction diversion rule for a particular reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TransactionDiversionDailyDetailsType DailyDetails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MembershipTypeLevelType
    {
        /// <summary>
        /// Code type for Rule Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Type { get; set; }

        /// <summary>
        /// Description type for Rule Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Level { get; set; }

    }

    /// <summary>
    /// Reservation level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionDiversionRuleLevelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 1,

    }

    /// <summary>
    /// Type for the threshold elements.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ThresholdDetailsType
    {
        /// <summary>
        /// Diversion entity type associated with the charge for the transaction diversion rule .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType? Entity { get; set; }

        /// <summary>
        /// Diversion scope for the transaction diversion rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScopeType? Scope { get; set; }

        /// <summary>
        /// Minimum required number of quantities, counts or minutes that must be posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinRequired { get; set; }

        /// <summary>
        /// The number of quantities, counts or minutes for which transaction diversion is allowed .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complimentary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Complimentary { get; set; }

        /// <summary>
        /// Configuring this flag to be TRUE will make the thresholds editable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEditable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEditable { get; set; }

    }

    /// <summary>
    /// Indicates the rule is based on Minutes associated with the charge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ThresholdCount")]
        ThresholdCount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ThresholdQuantity")]
        ThresholdQuantity = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ThresholdMinutes")]
        ThresholdMinutes = 2,

    }

    /// <summary>
    /// Minimum required and complimentary values are applicable Per Stay.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PerDay")]
        PerDay = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStay")]
        PerStay = 1,

    }

    /// <summary>
    /// The rule type on which the Transaction Diversion Rule is based. If a reservation has any of the following code, Transaction Diversion rule gets active for that reservation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionDiversionRuleTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Vip")]
        Vip = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Membership")]
        Membership = 1,

    }

    /// <summary>
    /// List of daily details for Transaction Diversion rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionDiversionDailyDetailsType : System.Collections.ObjectModel.Collection<TransactionDiversionDailyDetailType>
    {

    }

    /// <summary>
    /// List of daily details for Transaction Diversion rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionDiversionDailyDetailType
    {
        /// <summary>
        /// Transaction diversion rules that are posted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("posted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Posted { get; set; }

        /// <summary>
        /// Transaction diversion rules that are diverted .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diverted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Diverted { get; set; }

        /// <summary>
        /// Daily details Date about when the rules are posted or diverted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

    }

    /// <summary>
    /// Collection of TicketType objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TicketsType : System.Collections.ObjectModel.Collection<TicketType>
    {

    }

    /// <summary>
    /// Reservation Ticket Type Information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TicketType
    {
        /// <summary>
        /// Internal Unique ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ticketId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type TicketId { get; set; }

        /// <summary>
        /// Package Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PackageCode { get; set; }

        /// <summary>
        /// Reference to the reservation product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ReservationProductId { get; set; }

        /// <summary>
        /// Ticket number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ticketNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type TicketNumber { get; set; }

        /// <summary>
        /// Package description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Tickets issue date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }

        /// <summary>
        /// Tickets price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }

        /// <summary>
        /// Tickets comsumption date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consumptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ConsumptionDate { get; set; }

        /// <summary>
        /// The Rate Code to which tickets belong to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateCode { get; set; }

        /// <summary>
        /// Number of tickets used to create multiple tickets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Free text field for reference information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Reference { get; set; }

        /// <summary>
        /// The Status Code for outbound WS call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Status { get; set; }

        /// <summary>
        /// The Status Description for outbound WS call.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string StatusDescription { get; set; }

    }

    /// <summary>
    /// Collection of ECertificateType object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationECertificatesType : System.Collections.ObjectModel.Collection<ReservationECertificateType>
    {

    }

    /// <summary>
    /// Reservation ECertificate Type Information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationECertificateType
    {
        /// <summary>
        /// ECertificate Number for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificateNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ECertificateNo { get; set; }

        /// <summary>
        /// ECertificate status for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestActionType? ActionType { get; set; }

        /// <summary>
        /// ECertificate Type where value can be PROMOTION,AWARD,BENEFIT and OTHER
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateClassficationType? ECertificateType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Query")]
        Query = 2,

    }

    /// <summary>
    /// Enumeration of the different type of Ecertificate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ECertificateClassficationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Promotion")]
        Promotion = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Award")]
        Award = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Benefit")]
        Benefit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    /// <summary>
    /// Detailed information returned during name value search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValueDetailType
    {
        /// <summary>
        /// Name Value List.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public NameValuesType NameValues { get; set; }

    }

    /// <summary>
    /// List of name value pairs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValuesType : System.Collections.ObjectModel.Collection<NameValueType>
    {

    }

    /// <summary>
    /// Contains name value pair.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValueType
    {
        /// <summary>
        /// Contains unique key which represents for record field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// Contains value for the record/column.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Value { get; set; }

        /// <summary>
        /// Contains format string for values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formatString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FormatString { get; set; }

        /// <summary>
        /// Contains data type for values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NameValueDataTypeType? DataType { get; set; }

        /// <summary>
        /// Contains Origin information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameValueOriginType Origin { get; set; }

        /// <summary>
        /// Contains value(s) to identify the reports to include the collected information in e.g. PFH=Print Folio Header, PFD=Print Folio Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usageInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CodeListType UsageInstruction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NameValueDataTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Number")]
        Number = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Datetime")]
        Datetime = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Time")]
        Time = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 5,

    }

    /// <summary>
    /// Contains origin details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValueOriginType
    {
        /// <summary>
        /// Contains origin i.e. Reseravtion, Profile, Folio or FinTrx.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NameValueModuleType? OriginName { get; set; }

        /// <summary>
        /// Contains destination column for Origin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Destination { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NameValueModuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Folio")]
        Folio = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Profile")]
        Profile = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Fintrix")]
        Fintrix = 3,

    }

    /// <summary>
    /// List of Custom Charge Exemptions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomChargeExemptionsType : System.Collections.ObjectModel.Collection<CustomChargeExemptionType>
    {

    }

    /// <summary>
    /// Contains custom charges exemption information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomChargeExemptionType
    {
        /// <summary>
        /// Contains exemption code and description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customChargesExemption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType CustomChargesExemption { get; set; }

        /// <summary>
        /// Contains exemption quantity for the stay. When this value is configured, daily exemption quantities are not permitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customChargeQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomChargeQuantityType CustomChargeQuantity { get; set; }

        /// <summary>
        /// Contains exemption detail information for each date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customChargeDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CustomChargeExemptionDatesType CustomChargeDates { get; set; }

        /// <summary>
        /// Contains list of dates which are not valid for custom charge exemptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludedDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ExcludedDatesType ExcludedDates { get; set; }

        /// <summary>
        /// Exemption Percentage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? Percentage { get; set; }

        /// <summary>
        /// Flag specifying if custom charge exemptions is property level or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyExemption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PropertyExemption { get; set; }

    }

    /// <summary>
    /// Contains quantity of custom charge exemptions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomChargeQuantityType
    {
        /// <summary>
        /// Contains number of Custom Charge Exemption for a day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Indicates if Custom Charges Exemption information is editable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Available { get; set; }

    }

    /// <summary>
    /// Contains List of Custom Charge Exemption information for a day.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomChargeExemptionDatesType : System.Collections.ObjectModel.Collection<CustomChargeExemptionDateType>
    {

    }

    /// <summary>
    /// Contains Custom Charge Exemption information for a day.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomChargeExemptionDateType
    {
        /// <summary>
        /// Contains Custom Charge Exemption date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Contains number of Custom Charge Exemption for a day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

    }

    /// <summary>
    /// Contains list of dates which are valid for custom charge exemptions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExcludedDatesType : System.Collections.ObjectModel.Collection<ExcludedDateType>
    {

    }

    /// <summary>
    /// Specifies all the enabled dates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExcludedDateType
    {
        /// <summary>
        /// Contains exclusion date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Contains reason for exclusion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExclusionReasonType? Reason { get; set; }

    }

    /// <summary>
    /// Custom Charge has already been Processed for this date within the reservation stay.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExclusionReasonType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotConfigured")]
        NotConfigured = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomChargeProcessed")]
        CustomChargeProcessed = 1,

    }

    /// <summary>
    /// Instruction to fetch whether the room was assigned/upgraded by AI. This will also include Reservation instruction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReservationInstructionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Comments")]
        Comments = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestComments")]
        GuestComments = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Packages")]
        Packages = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InventoryItems")]
        InventoryItems = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationPaymentMethods")]
        ReservationPaymentMethods = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RoutingInstructions")]
        RoutingInstructions = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Preferences")]
        Preferences = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Memberships")]
        Memberships = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Alerts")]
        Alerts = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Traces")]
        Traces = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ConfirmationLetters")]
        ConfirmationLetters = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"CallHistory")]
        CallHistory = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FixedCharges")]
        FixedCharges = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMessages")]
        GuestMessages = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationPolicies")]
        ReservationPolicies = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedReservations")]
        LinkedReservations = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"RevenuesAndBalances")]
        RevenuesAndBalances = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestLastStay")]
        GuestLastStay = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ECoupons")]
        ECoupons = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackItItems")]
        TrackItItems = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"TotalCostOfStay")]
        TotalCostOfStay = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationAwards")]
        ReservationAwards = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WebRegistrationCards")]
        WebRegistrationCards = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceRequests")]
        ServiceRequests = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationActivities")]
        ReservationActivities = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledActivities")]
        ScheduledActivities = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepaidCards")]
        PrepaidCards = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"Shares")]
        Shares = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"Attachments")]
        Attachments = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"Locators")]
        Locators = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"ProfileAwards")]
        ProfileAwards = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"TransactionDiversions")]
        TransactionDiversions = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Tickets")]
        Tickets = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMemberships")]
        GuestMemberships = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"ECertificates")]
        ECertificates = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"UpsellInfo")]
        UpsellInfo = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomAssignedByAI")]
        RoomAssignedByAI = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomNameValue")]
        CustomNameValue = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomChargeExemptions")]
        CustomChargeExemptions = 40,

    }

    /// <summary>
    /// Instructions for a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationsInstructionsType
    {
        /// <summary>
        /// Instructions for linked reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LinkReservationInstructionType LinkReservations { get; set; }

        /// <summary>
        /// Instruction to assign rate on each share reservation. This can be FULL: Full Rate for each Sharer. SPLIT: Split the Rate amount between Sharer Reservations. ENTIRE: This Sharer provided as ShareToReservationID will get the total amount of the rate code for all the Sharer Reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareReservationInstructionType ShareReservations { get; set; }

    }

    /// <summary>
    /// Instructions for a linked reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkReservationInstructionType
    {
        /// <summary>
        /// Parent reservation id where reservations to be linked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkToReservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type LinkToReservationId { get; set; }

        /// <summary>
        /// Child reservation id where reservations to be linked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkFromReservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type LinkFromReservationId { get; set; }

        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Link { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareReservationInstructionType
    {
        /// <summary>
        /// Effective rates to apply on share reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public EffectiveRatesType EffectiveRates { get; set; }

        /// <summary>
        /// Payment Method to be applied to any sharing reservation that has a reservation type that requires a credit card and does not have a credit card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationPaymentMethodType PaymentMethod { get; set; }

        /// <summary>
        /// Instruction to assign rate on each share reservation. This can be FULL: Full Rate for each Sharer. SPLIT: Split the Rate amount between Sharer Reservations. ENTIRE: This Sharer provided as ShareToReservationID will get the total amount of the rate code for all the Sharer Reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateAmountShare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareDistributionInstructionType? RateAmountShare { get; set; }

        /// <summary>
        /// Indicates the share instruction to process from the reservation request object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareTypeType? ShareType { get; set; }

        /// <summary>
        /// Indicates whether fixed rate will be applied to all shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FixedRate { get; set; }

    }

    /// <summary>
    /// Collection of effective rate amount per guest on specific dates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EffectiveRatesType : System.Collections.ObjectModel.Collection<EffectiveRateType>
    {

    }

    /// <summary>
    /// Effective rate amount per guest on specific dates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EffectiveRateType
    {
        /// <summary>
        /// Rate amount for one person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onePersonRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OnePersonRate { get; set; }

        /// <summary>
        /// Rate amount for two persons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoPersonRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TwoPersonRate { get; set; }

        /// <summary>
        /// Rate amount for three persons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threePersonRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThreePersonRate { get; set; }

        /// <summary>
        /// Rate amount for four persons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fourPersonRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FourPersonRate { get; set; }

        /// <summary>
        /// Rate amount for five persons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fivePersonRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FivePersonRate { get; set; }

        /// <summary>
        /// Rate amount for each extra person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extraPersonRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtraPersonRate { get; set; }

        /// <summary>
        /// Rate amount for each extra Child.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extraChildRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExtraChildRate { get; set; }

        /// <summary>
        /// Rate amount for one Child.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oneChildRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OneChildRate { get; set; }

        /// <summary>
        /// Rate amount for two Children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twoChildrenRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TwoChildrenRate { get; set; }

        /// <summary>
        /// Rate amount for three Children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("threeChildrenRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ThreeChildrenRate { get; set; }

        /// <summary>
        /// Rate amount for four Children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fourChildrenRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FourChildrenRate { get; set; }

        /// <summary>
        /// Collection of rate amount by age bracket.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateByAgeBuckets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public RateByAgeBucketsType RateByAgeBuckets { get; set; }

        /// <summary>
        /// Minimum number of children needed to get free stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumChildrenForFreeStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumChildrenForFreeStay { get; set; }

        /// <summary>
        /// The number of award points required for applying this rate plan schedule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pointsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PointsRequired { get; set; }

        /// <summary>
        /// true if floor amount needs to be override
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideFloorAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideFloorAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfRooms { get; set; }

        /// <summary>
        /// Rate amount Before Tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountBeforeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountBeforeTax { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    /// <summary>
    /// Rate amount by age bucket.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateByAgeBucketsType : System.Collections.ObjectModel.Collection<RateByAgeBucketType>
    {

    }

    /// <summary>
    /// Rate amount by age bucket.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateByAgeBucketType
    {
        /// <summary>
        /// Rate amount by age bucket.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RateAmount { get; set; }

        /// <summary>
        /// Minimum age for age bucket.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimumAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumAge { get; set; }

        /// <summary>
        /// Maximum age for age bucket.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumAge { get; set; }

    }

    /// <summary>
    /// Indicates that only profile information will be retrieved from the reservation request object and the rest will be provided from the master reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShareTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Profile")]
        Profile = 1,

    }

    /// <summary>
    /// Holds all the channel reservation specific information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelResvRQInfoType
    {
        /// <summary>
        /// Holds channel details such as type, code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelSummaryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelSummaryInfoType ChannelSummaryInfo { get; set; }

        /// <summary>
        /// Holds type of action to be taken on a channel reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelResvAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChannelResvActionType? ChannelResvAction { get; set; }

        /// <summary>
        /// This attribute indicates true if the message is resubmitted for processing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("retransmissionIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RetransmissionIndicator { get; set; }

    }

    /// <summary>
    /// Depicts channel information such as the type and code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelSummaryInfoType
    {
        [Newtonsoft.Json.JsonProperty("bookingChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BookingChannelType BookingChannel { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BookingChannelType
    {
        [Newtonsoft.Json.JsonProperty("channelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChannelCode { get; set; }

        [Newtonsoft.Json.JsonProperty("channelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ChannelName { get; set; }

    }

    /// <summary>
    /// Cancel a reservation in OPERA through a channel. The cancellation of the reservation is committed in OPERA at once. There is no session reservation involved.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChannelResvActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Book")]
        Book = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Hold")]
        Hold = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Initiate")]
        Initiate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Ignore")]
        Ignore = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Modify")]
        Modify = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Commit")]
        Commit = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CommitOverrideEdits")]
        CommitOverrideEdits = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Change")]
        Change = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 9,

    }

    /// <summary>
    /// Existing Operations Responses will eventually be modified to be extended from this type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Status
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

    }

    /// <summary>
    /// Request to combine sharer reservations. This request requires a Reservation Name Id(Joining to) and a Joining Reservation Id
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CombineShareReservations
    {
        /// <summary>
        /// Criteria required to combine the reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("criteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CombineShareReservationsType Criteria { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Record Type for Combining Share Reservations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CombineShareReservationsType
    {
        /// <summary>
        /// Instructions for overriding checks during combine share operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("combineShareInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CombineShareInstructionType CombineShareInstruction { get; set; }

        /// <summary>
        /// Opera Hotel/Resort code for the Combine Share Reservations request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Collection of unique reservation identifiers. Currently supported are Reservation Id and/or Confirmation Number which may include the leg number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareToReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareToReservation ShareToReservation { get; set; }

        /// <summary>
        /// Id of an existing reservation which is going to be combined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("existingReservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ExistingReservationId { get; set; }

        /// <summary>
        /// Details for creating a new reservations from profiles which will be combined to create a sharer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CombineShareFromProfilesType NewReservations { get; set; }

        /// <summary>
        /// Collection of fetch reservation instructions to be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fetchInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FetchInstructions FetchInstructions { get; set; }

    }

    /// <summary>
    /// Instructions for overriding checks during combine share operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CombineShareInstructionType
    {
        /// <summary>
        /// Defines rate change instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateChangeInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RateChangeInstructionType RateChangeInstruction { get; set; }

        /// <summary>
        /// Instruction to apply new effective rates to the reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public EffectiveRatesType EffectiveRates { get; set; }

        /// <summary>
        /// Contains user information for the override action performed while booking a reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideInstructionType OverrideInstruction { get; set; }

        /// <summary>
        /// Instruction to distribute rate on each share reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShareDistributionInstructionType? DistributionType { get; set; }

        /// <summary>
        /// Indicate to override the room inventory check if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInventoryCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideInventoryCheck { get; set; }

        /// <summary>
        /// If the joining sharer is checked in, do a room move to the main sharer's room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomMoveCheckedinResv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomMoveCheckedinResv { get; set; }

        /// <summary>
        /// Indicate to override the check on maximum room occupancy if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideMaxOccupancyCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideMaxOccupancyCheck { get; set; }

    }

    /// <summary>
    /// Defines override rate type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateChangeInstructionType
    {
        /// <summary>
        /// Discount percentage and/or amount, code and textual reason for discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiscountType Discount { get; set; }

        /// <summary>
        /// Rate change type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RateChangeType? RateChange { get; set; }

    }

    /// <summary>
    /// Simple type for rate change type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RateChangeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Verify")]
        Verify = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OldRate")]
        OldRate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NewRate")]
        NewRate = 2,

    }

    /// <summary>
    /// Defines room rate information on a daily basis.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DailyRatesType : System.Collections.ObjectModel.Collection<DailyRateType>
    {

    }

    /// <summary>
    /// The total amount charged for the service including additional amounts and fees.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DailyRateType
    {
        /// <summary>
        /// A collection of taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxesType Taxes { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// The total amount not including any associated tax (e.g., sales tax, VAT, GST or any associated tax).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountBeforeTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountBeforeTax { get; set; }

        /// <summary>
        /// The total amount including all associated taxes (e.g., sales tax, VAT, GST or any associated tax).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountAfterTax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountAfterTax { get; set; }

        /// <summary>
        /// The code specifying a monetary unit. Use ISO 4217, three alpha code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The symbol for the currency, e.g, for currencyCode USD the symbol is $.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimalPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Type of charge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// When true indicates that the rate amount has been overridden.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateOverride { get; set; }

        /// <summary>
        /// Room rate discount percentage or amount, code and textual reason for discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiscountType Discount { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

    }

    /// <summary>
    /// Type for the profile information to create a new share reservation. This is used to create sharers from profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CombineShareFromProfilesType : System.Collections.ObjectModel.Collection<CombineShareFromProfileType>
    {

    }

    /// <summary>
    /// Type for the profile information to create a new share reservation. This is used to create sharers from profiles.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CombineShareFromProfileType
    {
        /// <summary>
        /// Collection of unique reservation identifiers. Currently supported are Reservation Id and/or Confirmation Number which may include the leg number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newSharerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type NewSharerId { get; set; }

        /// <summary>
        /// The number of guests information to create the share reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestCounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestCountsType GuestCounts { get; set; }

        /// <summary>
        /// Defines single payment method for the share reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationPaymentMethodType ReservationPaymentMethod { get; set; }

        /// <summary>
        /// Defines collection of payment methods for the share reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CopyReservationPaymentMethodsType ReservationPaymentMethods { get; set; }

        /// <summary>
        /// Guarantee code information of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        /// <summary>
        /// Collection of room rate information on a daily basis.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DailyRatesType DailyRates { get; set; }

        /// <summary>
        /// Stay arrival and departure dates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType TimeSpan { get; set; }

    }

    /// <summary>
    /// A collection of Reservation Payment Methods.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CopyReservationPaymentMethodsType
    {
        /// <summary>
        /// Defines reservation payment methods.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationPaymentMethodType> ReservationPaymentMethod { get; set; }

        /// <summary>
        /// Indicates copying of credit card payment methods. This flag will only be applied to payment method windows not sent in the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copyCreditCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CopyCreditCards { get; set; }

        /// <summary>
        /// Indicates copying of other payment methods. This flag will only be applied to payment method windows not sent in the collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copyOthers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CopyOthers { get; set; }

    }

    /// <summary>
    /// Response for the combine share reservation request. Based on the request, this will return all sharer reservations including the request reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CombineShareReservationsDetails
    {
        /// <summary>
        /// Collection of guests who share this reservation. Reservation information will only include the Room Information and Guest Information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationsType ShareReservations { get; set; }

        /// <summary>
        /// Collection of old room rate information on a daily basis.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DailyRatesType OldRates { get; set; }

        /// <summary>
        /// Collection of new room rate information on a daily basis.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DailyRatesType NewRates { get; set; }

        /// <summary>
        /// Collection of effective rates per stay dates per guest to be applied on reservation including its shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public EffectiveRatesType EffectiveRates { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Response object for the request for the reservation user activity log.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityLog
    {
        /// <summary>
        /// Collection of the list of Activities(Log) requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activityLog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActivityLogListType ActivityLog1 { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityLogListType
    {
        [Newtonsoft.Json.JsonProperty("activityLog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ActivityLogType> ActivityLog { get; set; }

        /// <summary>
        /// Evaluated total page count based on the requested max fetch count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>
        /// Indicates maximum number of records a Web Service should return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivityLogType
    {
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("module", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Module { get; set; }

        [Newtonsoft.Json.JsonProperty("logDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LogDate { get; set; }

        [Newtonsoft.Json.JsonProperty("refActionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RefActionId { get; set; }

        [Newtonsoft.Json.JsonProperty("logUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("logUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LogUserName { get; set; }

        [Newtonsoft.Json.JsonProperty("machineStation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string MachineStation { get; set; }

        [Newtonsoft.Json.JsonProperty("croCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string CroCode { get; set; }

        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ActionType { get; set; }

        [Newtonsoft.Json.JsonProperty("actionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ActionDescription { get; set; }

        /// <summary>
        /// The IP Address of the machine that performed the activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string IPAddress { get; set; }

    }

    /// <summary>
    /// Request to link a list of reservations with another existing reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkReservationsCriteria
    {
        /// <summary>
        /// Collection of unique identifiers of the reservations to be linked with another reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// Unique identifier of the reservation to be linked with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkToReservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type LinkToReservationId { get; set; }

        /// <summary>
        /// Response instruction for the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responseInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResponseInstruction ResponseInstruction { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Response will either be Summary or Detail type, but not both. See the request for the summary attribute flag.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RateInfo
    {
        /// <summary>
        /// The revenue information for the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationRateSummaryType Summary { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationRateSummaryType
    {
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationRateSummaryDetailType> Details { get; set; }

        /// <summary>
        /// Amount of revenue and package excluding tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gross", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Gross { get; set; }

        /// <summary>
        /// Amount of revenue and package including tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("net", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Net { get; set; }

        /// <summary>
        /// Amount of automatically posted charges along with room and taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FixedCharges { get; set; }

        /// <summary>
        /// Amount paid prior to the stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Deposit { get; set; }

        /// <summary>
        /// Amount of total cost of stay.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCostOfStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalCostOfStay { get; set; }

        /// <summary>
        /// Remaining amount to be paid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outStandingCostOfStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OutStandingCostOfStay { get; set; }

        /// <summary>
        /// Amount to be paid by Guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestPay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GuestPay { get; set; }

        /// <summary>
        /// Amount of automatically forwarded charges for specific transaction codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Routing { get; set; }

        /// <summary>
        /// Currency revenue calculation is based on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The starting value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>
        /// The ending value of the date range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

        /// <summary>
        /// Whether suppressed rate is present or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasSuppressedRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasSuppressedRate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationRateSummaryDetailType
    {
        /// <summary>
        /// Stay date for which revenue calculation is done.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? SummaryDate { get; set; }

        /// <summary>
        /// Base Amount of rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Revenue { get; set; }

        /// <summary>
        /// Amount of an additional product or service that is sold as part of the rate or in addition to the rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("package", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Package { get; set; }

        /// <summary>
        /// Amount of tax generated separately on the revenue and package.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Tax { get; set; }

        /// <summary>
        /// Amount of revenue and package excluding tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gross", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Gross { get; set; }

        /// <summary>
        /// Amount of revenue and package including tax.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("net", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Net { get; set; }

        /// <summary>
        /// Rate code calculation is based on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Date revenue calculation is based on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueSimulationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? RevenueSimulationDate { get; set; }

        /// <summary>
        /// Currency revenue calculation is based on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Indicates if the rate is to be hidden.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateSuppressed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateSuppressed { get; set; }

    }

    /// <summary>
    /// Request to validate reservation changes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidateReservationChanges
    {
        /// <summary>
        /// Reservation to be validated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationType Reservation { get; set; }

        /// <summary>
        /// Stay Duration to validate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType TimeSpan { get; set; }

        /// <summary>
        /// Collection of validation instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Instructions Instructions { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Instruction to validate changes in reservation and returns validated inventory item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReservationValidationInstructionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StayHeader")]
        StayHeader = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"StayDates")]
        StayDates = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OverlappingStay")]
        OverlappingStay = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Packages")]
        Packages = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RefreshPackages")]
        RefreshPackages = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Preferences")]
        Preferences = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AccessRestrictions")]
        AccessRestrictions = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Ecertificates")]
        Ecertificates = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Promotions")]
        Promotions = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackItItems")]
        TrackItItems = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TotalCostOfStay")]
        TotalCostOfStay = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationAwards")]
        ReservationAwards = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"WebRegistrationCards")]
        WebRegistrationCards = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceRequests")]
        ServiceRequests = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationActivities")]
        ReservationActivities = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledActivities")]
        ScheduledActivities = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepaidCards")]
        PrepaidCards = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Shares")]
        Shares = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Attachments")]
        Attachments = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Locators")]
        Locators = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ProfileAwards")]
        ProfileAwards = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"RefreshRates")]
        RefreshRates = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationGuarantee")]
        ReservationGuarantee = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"UpsellsAvailable")]
        UpsellsAvailable = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"InventoryItems")]
        InventoryItems = 24,

    }

    /// <summary>
    /// Instruction to remove the upsell and recalculate the rate based on the upsell target room type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpsellRateInstructionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HonorUpsellRateForAdditionalNights")]
        HonorUpsellRateForAdditionalNights = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OriginalRoomType")]
        OriginalRoomType = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TargetRoomType")]
        TargetRoomType = 2,

    }

    /// <summary>
    /// Response for validating reservation changes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidateReservationChangesDetails
    {
        /// <summary>
        /// Collection of validation messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ValidationsReturnType ValidationMessages { get; set; }

        /// <summary>
        /// Contains validated reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationType Reservation { get; set; }

        /// <summary>
        /// Guarantee Code information with cancellation penalty and deposit policy information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationGuarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuaranteePolicyType ReservationGuarantee { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationsReturnType : System.Collections.ObjectModel.Collection<ValidationReturnType>
    {

    }

    /// <summary>
    /// Validations type record returned after Validations are done.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationReturnType
    {
        /// <summary>
        /// The type of Validation Record. Example would be OVERBOOK_INVENTORY, OVERRIDE_MAX_OCCUPANCY, CREDIT_CARD_REQUIRED In some cases this will match a permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ValidationType { get; set; }

        /// <summary>
        /// The message returned after validating.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ValidationMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("validationAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ValidationActionType? ValidationAction { get; set; }

        /// <summary>
        /// The code returned after validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ValidationCode { get; set; }

        /// <summary>
        /// List of Reservations for which this validation type is applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invalidReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationSummaryListType InvalidReservations { get; set; }

    }

    /// <summary>
    /// Validation Actions returned after validations are done. STOP-PROCESSING implies that the user cannot continue with the operation as some validation failed. USER-RESPONSE-REQUIRED implies that some validations can be overridden and the User can continue if they wish to override.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ValidationActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StopProcessing")]
        StopProcessing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UserResponseRequired")]
        UserResponseRequired = 1,

    }

    /// <summary>
    /// List of Reservations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationSummaryListType : System.Collections.ObjectModel.Collection<ReservationSummaryType>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationSummaryType
    {
        /// <summary>
        /// Unique reservation identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ReservationIdList { get; set; }

        /// <summary>
        /// Guarantee Information for Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuaranteeType Guarantee { get; set; }

        /// <summary>
        /// Guest First Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GuestFirstName { get; set; }

        /// <summary>
        /// Guest Last Name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string GuestLastName { get; set; }

        /// <summary>
        /// Stay Duration of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stayPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRangeType StayPeriod { get; set; }

    }

    /// <summary>
    /// Specifies Guarantee Code attributes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuaranteePolicyType
    {
        /// <summary>
        /// Description of the Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies various requirements for the guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuaranteeRequirementsType Requirements { get; set; }

        /// <summary>
        /// Brief description of the Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslationTextType80 ShortDescription { get; set; }

        /// <summary>
        /// Specifies various payment types for the guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PaymentTypesType PaymentTypes { get; set; }

        /// <summary>
        /// Code assigned to the Guarantee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guaranteeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GuaranteeCode { get; set; }

        /// <summary>
        /// If true indicates this Guarantee Code is used only to hold the inventory during reservation process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onHold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnHold { get; set; }

        /// <summary>
        /// If true indicates inventory will be reserved/deducted when reservation uses this Guarantee Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reserveInventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReserveInventory { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Represents the late arrival time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lateArrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LateArrival { get; set; }

        /// <summary>
        /// The CancelPenalty class defines the cancellation policy of the hotel facility.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancelPenalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancelPenalty CancelPenalty { get; set; }

        /// <summary>
        /// A deposit policy attached with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("depositPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepositPolicy DepositPolicy { get; set; }

        /// <summary>
        /// If true indicates this can be the default guarantee type to be selected for a reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultGuarantee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultGuarantee { get; set; }

    }

    /// <summary>
    /// Specifies various requirement for the guarantee code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuaranteeRequirementsType
    {
        /// <summary>
        /// Requirement Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requirementCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RequirementCode { get; set; }

        /// <summary>
        /// When true indicates cancellation on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Cancellation { get; set; }

        /// <summary>
        /// When true indicates phone number on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PhoneNumber { get; set; }

        /// <summary>
        /// When true indicates address on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Address { get; set; }

        /// <summary>
        /// When true indicates Credit Card on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreditCard { get; set; }

        /// <summary>
        /// When true indicates arrival Time on the reservation is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ArrivalTime { get; set; }

        /// <summary>
        /// When true indicates deposit is required for this guarantee code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deposit { get; set; }

    }

    /// <summary>
    /// Contains Multiple translated texts and language codes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TranslationTextType80
    {
        /// <summary>
        /// Default text with Character length from 0 to 80.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string DefaultText { get; set; }

        /// <summary>
        /// List of translated text and language codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("translatedTexts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TranslationsTextType TranslatedTexts { get; set; }

    }

    /// <summary>
    /// Language code for the translation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TranslationsTextType : System.Collections.ObjectModel.Collection<Anonymous26>
    {

    }

    /// <summary>
    /// Payment card code like AX,VI etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentTypesType : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// Return object to the request for information regarding a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reservation
    {
        /// <summary>
        /// Collection of Reservations returned/fetched as per the criteria in the fetch request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationsType Reservations { get; set; }

        [Newtonsoft.Json.JsonProperty("masterInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MasterInfoType> MasterInfoList { get; set; }

        /// <summary>
        /// Channel specific information to be received in case the reservation is being created through a channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationChannelInfoType ChannelInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Holds all the channel reservation specific information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationChannelInfoType
    {
        /// <summary>
        /// Holds channel details such as type, code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelSummaryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelSummaryInfoType ChannelSummaryInfo { get; set; }

        /// <summary>
        /// Holds the reservation status to be returned to channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelResvStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChannelResvStatusType? ChannelResvStatus { get; set; }

    }

    /// <summary>
    /// Depicts that the operation was failed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChannelResvStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Modified")]
        Modified = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Committed")]
        Committed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Ignored")]
        Ignored = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Unsuccessful")]
        Unsuccessful = 5,

    }

    /// <summary>
    /// Request method to change a reservations information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeReservation
    {
        /// <summary>
        /// A collection of Reservations with information that needs to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HotelReservationInstructionType> Reservations { get; set; }

        /// <summary>
        /// Collection of Reservations which have to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationsInstructionsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationsInstructionsType ReservationsInstructionsType { get; set; }

        /// <summary>
        /// Channel specific information to be received in case the reservation is being created through a channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelResvRQInfoType ChannelInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// The Reservation class contains the current reservation being created or altered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotelReservationInstructionType
    {
        /// <summary>
        /// Used to provide PMS and/or CRS identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// External Reference information for Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ExternalReferencesType ExternalReferences { get; set; }

        /// <summary>
        /// Information regarding associated reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associatedReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssociatedResType AssociatedReservations { get; set; }

        /// <summary>
        /// Point of Sale of reservation. Identifies the entity/channel who made the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOfSale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOfSaleType SourceOfSale { get; set; }

        /// <summary>
        /// Room stays information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoomStayType RoomStay { get; set; }

        /// <summary>
        /// Reservation Comp Authorizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compAuthorizer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompAuthorizerInfoType CompAuthorizer { get; set; }

        /// <summary>
        /// Collection of guests associated with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ResGuestType> ReservationGuests { get; set; }

        /// <summary>
        /// Collection of guests who share this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResSharedGuestListType SharedGuests { get; set; }

        /// <summary>
        /// Entry Date into the country. (Croatian Requirements).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalGuestInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuestAdditionalInfoType AdditionalGuestInfo { get; set; }

        /// <summary>
        /// Collection of guests associated with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationProfiles2 ReservationProfiles { get; set; }

        /// <summary>
        /// Collection of reservation communication details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCommunicationType ReservationCommunication { get; set; }

        /// <summary>
        /// Collection of Awards,Certificates for the guest profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationAwards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AwardsType ReservationAwards { get; set; }

        /// <summary>
        /// Collection of TrackIt Items available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackItItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TrackItItemsType TrackItItems { get; set; }

        /// <summary>
        /// Collection of share reservation available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationsType Shares { get; set; }

        /// <summary>
        /// Collection of Locators available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationLocatorsType Locators { get; set; }

        /// <summary>
        /// Collection of attachments available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AttachmentsType Attachments { get; set; }

        /// <summary>
        /// Collection of Web Registration Cards available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webRegistrationCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AttachmentsType WebRegistrationCards { get; set; }

        /// <summary>
        /// Collection of Service Requests available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceRequests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ServiceRequests ServiceRequests { get; set; }

        /// <summary>
        /// Collection of Reservation Activities available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ActivityLookUpList ReservationActivities { get; set; }

        /// <summary>
        /// Collection of Scheduled Activities available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduledActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ActivityLookUpList ScheduledActivities { get; set; }

        /// <summary>
        /// Collection of Prepaid Cards available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prepaidCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public PrepaidCardsType PrepaidCards { get; set; }

        /// <summary>
        /// Collection of profile awards available for that reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileAwards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AwardsType ProfileAwards { get; set; }

        /// <summary>
        /// A Service object represents a non-room product provided to guests. Service products may have associated inventory and charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPackages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationPackageType> ReservationPackages { get; set; }

        /// <summary>
        /// A collection of inventory items attached to a reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inventoryItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResInventoryItemsType InventoryItems { get; set; }

        /// <summary>
        /// List of Notes for the Guest related to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> Comments { get; set; }

        /// <summary>
        /// List of Notes for the Guest related to the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestComments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> GuestComments { get; set; }

        /// <summary>
        /// List of Memberships for the Guest related to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<MembershipType> GuestMemberships { get; set; }

        /// <summary>
        /// Collection of reservation preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceTypeType> PreferenceCollection { get; set; }

        /// <summary>
        /// List of reservation memberships.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationMemberships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationMembershipType> ReservationMemberships { get; set; }

        /// <summary>
        /// A collection of Payment Method objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationPaymentMethodsType ReservationPaymentMethods { get; set; }

        /// <summary>
        /// Set of Routing Instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routingInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public RoutingInfoListType RoutingInstructions { get; set; }

        /// <summary>
        /// A collection of Cancellation Penalties objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationPoliciesType ReservationPolicies { get; set; }

        /// <summary>
        /// Holds cashiering related information for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCashieringType Cashiering { get; set; }

        /// <summary>
        /// Holds rooms housekeeping information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("housekeeping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResHousekeepingType Housekeeping { get; set; }

        /// <summary>
        /// Reservations related to the current Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LinkedReservationsInfoType LinkedReservation { get; set; }

        [Newtonsoft.Json.JsonProperty("extSystemSync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExtSystemSync { get; set; }

        /// <summary>
        /// Collections of user defined fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userDefinedFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDefinedFieldsType UserDefinedFields { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ReservationIndicators { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was waitlisted. This could hold information as history even if reservation is no more in Waitlist status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("waitlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WaitlistResType Waitlist { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was cancelled. This could hold information as history even if reservation is no more in in Cancelled status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Cancellation2 Cancellation { get; set; }

        /// <summary>
        /// Catering event information if reservation is associated with the catering event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("catering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CateringResInfoType Catering { get; set; }

        /// <summary>
        /// Catering event information if reservation is associated with the catering event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticalClassification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResStatClassificationType StatisticalClassification { get; set; }

        /// <summary>
        /// List of reservation alerts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alerts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public AlertsType Alerts { get; set; }

        /// <summary>
        /// List of reservation Traces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("traces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public HotelReservationTracesType Traces { get; set; }

        /// <summary>
        /// List of reservation confirmation letters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmationLetters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ConfirmationsType ConfirmationLetters { get; set; }

        /// <summary>
        /// List of reservation calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("callHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CallHistoryType CallHistory { get; set; }

        /// <summary>
        /// List of reservation fixed charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixedCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public FixedChargesType FixedCharges { get; set; }

        /// <summary>
        /// List of Messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public GuestMessagesType GuestMessages { get; set; }

        /// <summary>
        /// An id representing the record lock for this reservation. When passed, update operation will verify that this lock is still valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lockHandle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LockHandle { get; set; }

        /// <summary>
        /// List of overrides done for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public OverrideInstructionsType OverrideInstructions { get; set; }

        /// <summary>
        /// Information about the time and duration this reservation was on Queue for Checkin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationQueueInformationType Queue { get; set; }

        /// <summary>
        /// Collection of allowed actions for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(11)]
        public ReservationAllowedActionsType AllowedActions { get; set; }

        /// <summary>
        /// List of eCoupons.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCoupons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ECouponsType ECoupons { get; set; }

        /// <summary>
        /// List of transaction diversions attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionDiversions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionDiversions2 TransactionDiversions { get; set; }

        /// <summary>
        /// Information relating to Reservation's Advance Checked In state and Expected Time of Return
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advanceCheckIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvanceCheckInType AdvanceCheckIn { get; set; }

        /// <summary>
        /// List of Reservation Tickets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tickets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public TicketsType Tickets { get; set; }

        /// <summary>
        /// Configurable Access Restriction Message for Excluded Block or Rate Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessRestrictionMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string AccessRestrictionMessage { get; set; }

        /// <summary>
        /// List of ECertificates attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationECertificatesType ECertificates { get; set; }

        /// <summary>
        /// List of Custom Name Value Information attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customNameValueDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameValueDetailType CustomNameValueDetail { get; set; }

        /// <summary>
        /// List of Custom Charge Exemptions attached to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customChargeExemptionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public CustomChargeExemptionsType CustomChargeExemptionDetails { get; set; }

        /// <summary>
        /// This flag will force to borrow from house if borrow required for number of rooms requested, this will only applicable when reservation is attached to a Block.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoBorrowFromHouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoBorrowFromHouse { get; set; }

        /// <summary>
        /// Forcefully override the create/update action on the Reservation. For real-time CRS interfaces, this element is used as force selling indicator in case of Create or Update Reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideExternalChecks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideExternalChecks { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Boolean True if this reservation is reserving rooms. False if it is only reserving services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStayReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomStayReservation { get; set; }

        /// <summary>
        /// Indicates the Actual status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        /// <summary>
        /// Indicates the Computed status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

        /// <summary>
        /// When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("walkIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WalkIn { get; set; }

        /// <summary>
        /// Indicates whether to show the rate or not on a printed document which includes the rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("printRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrintRate { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// Business Date when the reservation was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createBusinessDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CreateBusinessDate { get; set; }

        /// <summary>
        /// Business Date when the reservation was last reinstated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reinstateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ReinstateDate { get; set; }

        /// <summary>
        /// Party/PartyCode when reservation is part of a party(a small group).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("party", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Party { get; set; }

        /// <summary>
        /// Name Of the Resort/Hotel for the primary enrollment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryEnrollmentResort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string PrimaryEnrollmentResort { get; set; }

        /// <summary>
        /// Name of the Chain for the primary enrollment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryEnrollmentChain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string PrimaryEnrollmentChain { get; set; }

        /// <summary>
        /// Custom Reference to identify reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CustomReference { get; set; }

        /// <summary>
        /// The color to display this reservation on room grid displays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisplayColor { get; set; }

        /// <summary>
        /// Mark this reservation as recently accessed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("markAsRecentlyAccessed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MarkAsRecentlyAccessed { get; set; }

        /// <summary>
        /// Indicates to Override the Room Inventory Check if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInventoryCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideInventoryCheck { get; set; }

        /// <summary>
        /// Indicates user restriction on the reservation based on the Access exclusion functionality such as Restriction on Changes, Cancellation or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResAccessRestrictionType? AccessRestriction { get; set; }

        /// <summary>
        /// Is the reservation pre-registered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreRegistered { get; set; }

        /// <summary>
        /// Indicates whether the reservation is eligible for upgrade.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upgradeEligible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpgradeEligible { get; set; }

        [Newtonsoft.Json.JsonProperty("overrideBlockRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideBlockRestriction { get; set; }

        /// <summary>
        /// Flag to allow auto checkin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowAutoCheckin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowAutoCheckin { get; set; }

        [Newtonsoft.Json.JsonProperty("hasOpenFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasOpenFolio { get; set; }

        /// <summary>
        /// Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileCheckout { get; set; }

        /// <summary>
        /// Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileViewFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileViewFolio { get; set; }

        /// <summary>
        /// Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowPreRegistration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowPreRegistration { get; set; }

        /// <summary>
        /// Flag containing true or false value to determine if the guest has opted for communications pertaining to this reservation.Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is marked for communication. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optedForCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptedForCommunication { get; set; }

        /// <summary>
        /// This attribute represents Hotel charge card number. This number is generated automatically in OPERA when a reservation is created in OPERA. It is part of a functionality that provide the guest with the convenience of placing all their charges directly on their reservation folio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chargeCardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ChargeCardNumber { get; set; }

        /// <summary>
        /// Collection of instructions to be returned as a set of reservation information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responseInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResponseInstructions ResponseInstructions { get; set; }

        /// <summary>
        /// Collection of instructions for changing the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeInstrunctions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChangeInstructionType ChangeInstrunctions { get; set; }

    }

    /// <summary>
    /// Information regarding associated reservations to the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssociatedResType
    {

    }

    /// <summary>
    /// Statistical Classification information for the reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResStatClassificationType
    {
        /// <summary>
        /// Room Type used to calculate statistics for export(DRS).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        /// <summary>
        /// Rate Tier used calculate statistics for export(DRS).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateTier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RateTier { get; set; }

    }

    /// <summary>
    /// Instructions for Changing a Reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeInstructionType
    {
        /// <summary>
        /// Collection of unique identifiers of the sharing reservations to be modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ShareReservations { get; set; }

        /// <summary>
        /// Indicates whether package prices will be updated with the latest configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatePackagePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdatePackagePrice { get; set; }

        [Newtonsoft.Json.JsonProperty("changeAllShares", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChangeAllShares { get; set; }

        [Newtonsoft.Json.JsonProperty("overrideInventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideInventory { get; set; }

        [Newtonsoft.Json.JsonProperty("facilitySchedulerOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FacilitySchedulerOptionType? FacilitySchedulerOption { get; set; }

    }

    /// <summary>
    /// Facility Scheduler Option value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FacilitySchedulerOptionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Noupdate")]
        Noupdate = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeReservationDetails
    {
        /// <summary>
        /// Reservation Information for the reservations which have been changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationsType Reservations { get; set; }

        /// <summary>
        /// Refer to Generic common types document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("masterInfoList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MasterInfoType> MasterInfoList { get; set; }

        /// <summary>
        /// Information to be returned, if the request is received through a channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelResvRSInfoType ChannelInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Holds all the channel reservation specific information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelResvRSInfoType
    {
        /// <summary>
        /// Holds channel details such as type, code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelSummaryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelSummaryInfoType ChannelSummaryInfo { get; set; }

        /// <summary>
        /// Holds the reservation status to be returned to channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelResvStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChannelResvStatusType? ChannelResvStatus { get; set; }

        /// <summary>
        /// Channel Marketing Text like cancel,deposit,tax,commission policy etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelMarketingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ChannelMarketingInfoType ChannelMarketingInfo { get; set; }

    }

    /// <summary>
    /// Marketing Text like cancel policy, deposit policy etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelMarketingInfoType : System.Collections.ObjectModel.Collection<Anonymous27>
    {

    }

    /// <summary>
    /// Indicates the channel policy type like deposit,cancel etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MarketingPolicyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Deposit")]
        Deposit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Commission")]
        Commission = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Guarantee")]
        Guarantee = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Penalty")]
        Penalty = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Tax")]
        Tax = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Promotion")]
        Promotion = 7,

    }

    /// <summary>
    /// Overriding the validation check will log the supposed errors in the warnings log if they would fail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReinstateReservation
    {
        /// <summary>
        /// Property code of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Unique internal Id of the reservation that is to be reinstated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationLockHandle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReservationLockHandle { get; set; }

        /// <summary>
        /// Reservation Information of the reservation that is to be reinstated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelReservationType Reservation { get; set; }

        /// <summary>
        /// Flag that indicates if room inventory check should be skipped when the reservation is being reinstated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideInventory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideInventory { get; set; }

        /// <summary>
        /// Flag that indicates if rate code inventory check should be skipped when the reservation is being reinstated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideRates { get; set; }

        /// <summary>
        /// Flag that indicates if the check on the housekeeping status for out of service should be skipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideRoomOutOfService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideRoomOutOfService { get; set; }

        /// <summary>
        /// Flag that indicates if the check on room allocation should be skipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideRoomAllocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideRoomAllocation { get; set; }

        /// <summary>
        /// Collection of unique reservation identifiers to be sent as Shared reservation. Each Unique ID element represents one reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalReservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType AdditionalReservationIdList { get; set; }

        /// <summary>
        /// Instruction to apply new effective rates among shares.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effectiveRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public EffectiveRatesType EffectiveRates { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Existing Operations Responses will eventually be modified to be extended from this type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReinstateReservationDetails
    {
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Request object for canceling reservations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelReservation
    {
        /// <summary>
        /// Defines rate change instruction to use relevant for sharing reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateChangeInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RateChangeInstructionType RateChangeInstruction { get; set; }

        /// <summary>
        /// The reason for Cancelling the reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReasonType Reason { get; set; }

        /// <summary>
        /// Information on the reservation that is to be canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CancelReservationType> Reservations { get; set; }

        /// <summary>
        /// Channel specific information to be received in case the reservation is being created through a channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelResvRQInfoType ChannelInformation { get; set; }

        /// <summary>
        /// Indicator if the request is a verification on whether the reservation can be canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verificationOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VerificationOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancellationReasonType
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

    }

    /// <summary>
    /// The Reservation class contains the current reservation being created or altered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelReservationType
    {
        /// <summary>
        /// Unique identifiers for the reservation for both internal and external systems
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// External Reference information for Reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ExternalReferencesType ExternalReferences { get; set; }

        /// <summary>
        /// Collection of room stays.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StayInfoType RoomStay { get; set; }

        /// <summary>
        /// Collection of guests associated with the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationGuest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResGuestInfoType ReservationGuest { get; set; }

        /// <summary>
        /// Collection of guests who share this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedGuests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResSharedGuestListType SharedGuests { get; set; }

        /// <summary>
        /// List of attached profiles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachedProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ResAttachedProfileListType AttachedProfiles { get; set; }

        /// <summary>
        /// Payment method used for this reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationPaymentMethodType ReservationPaymentMethod { get; set; }

        /// <summary>
        /// Collection of reservation folio windows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationFolioWindows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationFolioWindowsType ReservationFolioWindows { get; set; }

        /// <summary>
        /// Set of reservation preferences which belongs to the Specials group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Specials { get; set; }

        /// <summary>
        /// Last Privacy Prompt Date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastPrivacyPromptDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? LastPrivacyPromptDate { get; set; }

        /// <summary>
        /// Color setting of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string DisplayColor { get; set; }

        /// <summary>
        /// Indicators of additional information attached to the reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIndicators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public IndicatorsType ReservationIndicators { get; set; }

        /// <summary>
        /// Current room status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HousekeepingRoomStatusType? RoomStatus { get; set; }

        /// <summary>
        /// Super Search matching terms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchMatches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public SearchMatchesType SearchMatches { get; set; }

        /// <summary>
        /// Point of Sale of reservation. Identifies the entity/channel who made the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOfSale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOfSaleType SourceOfSale { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was waitlisted. This could hold information as history even if reservation is not in Waitlist status anymore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("waitlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WaitlistResType Waitlist { get; set; }

        /// <summary>
        /// Information about the time and duration this reservation was on Queue for Checkin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationQueueInformationType Queue { get; set; }

        /// <summary>
        /// Information regarding housekeeping for this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("housekeeping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResHousekeepingType Housekeeping { get; set; }

        /// <summary>
        /// Holds cashiering related information for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cashiering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCashieringType Cashiering { get; set; }

        /// <summary>
        /// This stores the code for the type of tax calculation especially with tax exemption, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxTypeType TaxType { get; set; }

        /// <summary>
        /// Holds reservation deposit information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationDepositType Deposit { get; set; }

        /// <summary>
        /// Collection of reservation allowed actions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(11)]
        public ReservationAllowedActionsType AllowedActions { get; set; }

        /// <summary>
        /// Revenues and Balances Amount summary for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenuesAndBalances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResRevenueBalanceType RevenuesAndBalances { get; set; }

        /// <summary>
        /// Collection of Hotel Interfaces and rights, this is populated only when fetching interface status for rooms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelInterfaceStatusList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInterfaceStatusType> HotelInterfaceStatusList { get; set; }

        /// <summary>
        /// Currency code preferred by guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turndownInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationTurndownInfoType TurndownInfo { get; set; }

        /// <summary>
        /// Denotes the status of Room Ready, Key Ready messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileNotifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResMobileNotificationsType MobileNotifications { get; set; }

        /// <summary>
        /// Collection of reservation communication details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResCommunicationType ReservationCommunication { get; set; }

        /// <summary>
        /// Information relating to Reservation's Advance Checked In state and Expected Time of Return
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advanceCheckIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdvanceCheckInType AdvanceCheckIn { get; set; }

        /// <summary>
        /// This flag will determine wheather the reservation is eligible for Welcome Offer or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("welcomeOffer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WelcomeOffer { get; set; }

        /// <summary>
        /// Information regarding why reservation has been/was cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationInfo2 CancellationInfo { get; set; }

        /// <summary>
        /// Number of keys created for the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? KeyCount { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelName { get; set; }

        [Newtonsoft.Json.JsonProperty("expectedServiceTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ExpectedServiceTime { get; set; }

        /// <summary>
        /// Boolean True if this reservation is reserving rooms. False if it is only reserving services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomStayReservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RoomStayReservation { get; set; }

        /// <summary>
        /// Time stamp of the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateDateTime { get; set; }

        /// <summary>
        /// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creatorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifyDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifyDateTime { get; set; }

        /// <summary>
        /// Identifies the last software system or person to modify a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string LastModifierId { get; set; }

        /// <summary>
        /// Date an item will be purged from a database (e.g., from a live database to an archive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? PurgeDate { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ReservationStatus { get; set; }

        /// <summary>
        /// Indicates the status of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("computedReservationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PMS_ResStatusType? ComputedReservationStatus { get; set; }

        /// <summary>
        /// When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("walkInIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WalkInIndicator { get; set; }

        /// <summary>
        /// Indicates user restriction on the reservation based on the Access exclusion functionality such as Restriction on Changes, Cancellation or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResAccessRestrictionType? AccessRestriction { get; set; }

        /// <summary>
        /// If not null, reservation is considered to pay out commission to either Travel Agent, Source or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionPayoutTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommissionPayoutToType? CommissionPayoutTo { get; set; }

        /// <summary>
        /// Payment Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Defines if the reservation is pre-registered or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preRegistered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreRegistered { get; set; }

        /// <summary>
        /// Returns true when reservation has an open folio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OpenFolio { get; set; }

        /// <summary>
        /// Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the ‘true’ or ‘false’ values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileCheckout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileCheckout { get; set; }

        /// <summary>
        /// Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileViewFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileViewFolio { get; set; }

        /// <summary>
        /// Attribute OptedForCommunication is set to true when the guest has opted for receiving communicationsl related to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optedForCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptedForCommunication { get; set; }

        [Newtonsoft.Json.JsonProperty("cxlInstr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationInstructionsType CxlInstr { get; set; }

        [Newtonsoft.Json.JsonProperty("refResId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type RefResId { get; set; }

        [Newtonsoft.Json.JsonProperty("reservationLockHandle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ReservationLockHandle { get; set; }

        /// <summary>
        /// This forcefully overrides the cancel operation on Reservation. For real-time CRS interface, it is used as cancellation override flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overrideExternalChecks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideExternalChecks { get; set; }

    }

    /// <summary>
    /// Hotel Interface Type for a reservation and status of the various services
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationInterfaceStatusType
    {
        /// <summary>
        /// Identifier for the room extension
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomExtension { get; set; }

        /// <summary>
        /// Hotel interface information for the reservation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelInterface", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HotelInterfaceType HotelInterface { get; set; }

        /// <summary>
        /// Contains a list of status/rights for the various services under this interface
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<InterfaceRightsStatusType> InterfaceRights { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HotelInterfaceType
    {
        /// <summary>
        /// Unique DB internal number of a Hotel Interface record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type InterfaceId { get; set; }

        /// <summary>
        /// Hotel Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Name of the Hotel Interface
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InterfaceName { get; set; }

        /// <summary>
        /// Three letter code for each interface that identifies the interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interfaceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HotelInterfaceTypeType? InterfaceType { get; set; }

        /// <summary>
        /// Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Logo { get; set; }

        /// <summary>
        /// Unique machine name of the running IFC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("machineName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string MachineName { get; set; }

        /// <summary>
        /// The current status of the IFC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HotelInterfaceStatusType? Status { get; set; }

        /// <summary>
        /// Indicator if the Hotel Interface is active or not. This is different from the Interface Status, which is either STOPPED or RUNNING.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activeFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ActiveFlag { get; set; }

    }

    /// <summary>
    /// XML Posting Interface
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HotelInterfaceTypeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Bms")]
        Bms = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cas")]
        Cas = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ccw")]
        Ccw = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Dls")]
        Dls = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Eft")]
        Eft = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Exp")]
        Exp = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Mak")]
        Mak = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Mbs")]
        Mbs = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Msc")]
        Msc = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Pbx")]
        Pbx = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Pos")]
        Pos = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Svs")]
        Svs = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Tik")]
        Tik = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Vid")]
        Vid = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Vms")]
        Vms = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Www")]
        Www = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Xml")]
        Xml = 16,

    }

    /// <summary>
    /// Status of the Hotel Interface either STOPPED or RUNNING.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HotelInterfaceStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Stopped")]
        Stopped = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Running")]
        Running = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
        Waiting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"StopInitiated")]
        StopInitiated = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"StartInitiated")]
        StartInitiated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RebootInitiated")]
        RebootInitiated = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InterfaceRightsStatusType
    {
        /// <summary>
        /// Internal code for each allowed right of a Hotel Interface record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("right", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Right { get; set; }

        /// <summary>
        /// User defined code for an Interface Right.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string StatusCode { get; set; }

        /// <summary>
        /// User defined description for an Interface Right.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Description { get; set; }

        /// <summary>
        /// Category code of this interface right.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string Category { get; set; }

    }

    /// <summary>
    /// Turndown information for a reservation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationTurndownInfoType
    {
        /// <summary>
        /// Indicates if turndown is allowed or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allowed { get; set; }

        /// <summary>
        /// Indicates turndown status, values could be required, not required, completed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TurndownStatusType? Status { get; set; }

    }

    /// <summary>
    /// Simple type for turndown status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Required, Not Required and Completed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TurndownStatusType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Required")]
        Required = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotRequired")]
        NotRequired = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Compeleted")]
        Compeleted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancellationInstructionsType
    {
        /// <summary>
        /// Detailed description such as why reservation cannot be cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("deleteResTraces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeleteResTraces { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Status { get; set; }

    }

    /// <summary>
    /// Response object for the request to cancel reservations. Response contains the reservations which were successfully canceled.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelReservationDetails
    {
        /// <summary>
        /// Cancellation information includes information regarding Reason, Date of Cancellation etc..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cxlActivityLog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CancellationActivityType> CxlActivityLog { get; set; }

        /// <summary>
        /// Collection of old room rate information on a daily basis for the old guest count in case of sharing reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DailyRatesType OldRates { get; set; }

        /// <summary>
        /// Collection of new room rate information on a daily basis for the new remaining guest count in case of sharing reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DailyRatesType NewRates { get; set; }

        /// <summary>
        /// Information regarding the reservation which was canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CancelReservationType> Reservations { get; set; }

        /// <summary>
        /// Information to be returned, if the request is received through a channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChannelResvRSInfoType ChannelInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancellationActivityType
    {
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReasonType Reason { get; set; }

        [Newtonsoft.Json.JsonProperty("cxlDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? CxlDate { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string UserName { get; set; }

        /// <summary>
        /// Cancellation IDs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType CancellationIdList { get; set; }

    }

    /// <summary>
    /// Request to pre-register a reservation eligible for pre-registration and change arrival details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreCheckInReservation
    {
        /// <summary>
        /// The reservation desired to change with its relevant pre-registration details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationPreCheckInDetailsType Reservation { get; set; }

        /// <summary>
        /// Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileViewFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileViewFolio { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Type describing the different details regarding a pre-registered reservation including ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationPreCheckInDetailsType
    {
        /// <summary>
        /// Hotel Code of this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The id of this reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationId ReservationId { get; set; }

        /// <summary>
        /// The time at which the guest arrives at the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preCheckInDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreCheckInDetailsType PreCheckInDetails { get; set; }

    }

    /// <summary>
    /// Type describing the different details regarding a pre-registered reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreCheckInDetailsType
    {
        /// <summary>
        /// The time at which the guest arrives at the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arrival", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationArrivalInfoType Arrival { get; set; }

        /// <summary>
        /// Room Number to be assigned to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// Currency code preferred by guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestPreferredCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GuestPreferredCurrency { get; set; }

        /// <summary>
        /// Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowMobileViewFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMobileViewFolio { get; set; }

        /// <summary>
        /// The payment methods of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationPaymentMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationPaymentMethodsType ReservationPaymentMethods { get; set; }

        /// <summary>
        /// The arrival transportation details of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arrivalTransport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportInfoType ArrivalTransport { get; set; }

    }

    /// <summary>
    /// Type describing information regarding the arrival of a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationArrivalInfoType
    {
        /// <summary>
        /// The time at which the guest arrives at the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalTime { get; set; }

    }

    /// <summary>
    /// Request to upsell a reservation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpsellReservation
    {
        /// <summary>
        /// Property Code of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// Unique identifier of the reservation to be upsold.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReservationId ReservationId { get; set; }

        /// <summary>
        /// Upsell information to be applied to the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsell", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpsellType Upsell { get; set; }

        /// <summary>
        /// Indicates whether to override validation or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("override", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Override { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Holds upsell information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpsellType
    {
        /// <summary>
        /// Rule unique identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type RuleId { get; set; }

        /// <summary>
        /// Upsell rule code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RuleCode { get; set; }

        /// <summary>
        /// Upsell rule description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RuleDescription { get; set; }

        /// <summary>
        /// Percentage savings resulting from accepting upsell offer. This will be calculated as the ratio of the amount saved by accepting the upsell offer to the actual room rate (i.e. room rate when upsell is not offered)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentageSavings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? PercentageSavings { get; set; }

        /// <summary>
        /// Rate code redemption type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string UpsellType1 { get; set; }

        /// <summary>
        /// Rate code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

        /// <summary>
        /// Detailed information regarding room type to upsell to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoomTypeInfoType RoomType { get; set; }

        /// <summary>
        /// First night upsell amount / number of points required
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstNightAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountPointsType FirstNightAmount { get; set; }

        /// <summary>
        /// Total stay upsell amount / number of points required
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStayAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountPointsType TotalStayAmount { get; set; }

        /// <summary>
        /// List of reservation date and its corresponding upsell rate amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UpsellDailyRatesType Rates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomTypeInfoType
    {
        /// <summary>
        /// Detail description of the Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Name corresponding to a RoomType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string WebName { get; set; }

        /// <summary>
        /// URL providing more information about the Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string WebPage { get; set; }

        /// <summary>
        /// Collection of room features.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public RoomFeaturesType RoomFeatures { get; set; }

        /// <summary>
        /// Room type attributes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypeAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RoomTypeAttributesType RoomTypeAttributes { get; set; }

        /// <summary>
        /// Booking Channels mapping for the Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookingChannelMappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<BookingChannelMappingType> BookingChannelMappings { get; set; }

        /// <summary>
        /// Bed type code associated with room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bedTypeCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> BedTypeCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomType { get; set; }

        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        [Newtonsoft.Json.JsonProperty("roomClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomClass { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates room type is a suite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Suite { get; set; }

        /// <summary>
        /// Indicates room type is a Component Room.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Component { get; set; }

        /// <summary>
        /// Block code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invBlockCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string InvBlockCode { get; set; }

        /// <summary>
        /// Represents the room view code like City view, River view, Ocean view etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomViewCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RoomViewCode { get; set; }

        /// <summary>
        /// Represents the promotional code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("promotionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PromotionCode { get; set; }

        /// <summary>
        /// Represents the room qualifier code like Deluxe,Economy,Suite etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomQualifierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RoomQualifierCode { get; set; }

        /// <summary>
        /// Represents the match indicator of room qualifier code returned in the response with the requested room qualifier code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomQualifierMatchIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomQualifierMatchIndicator { get; set; }

    }

    /// <summary>
    /// A recurring element that identifies the room features.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomFeaturesType : System.Collections.ObjectModel.Collection<RoomFeatureType>
    {

    }

    /// <summary>
    /// Room Feature Information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomFeatureType
    {
        /// <summary>
        /// A code representing a room feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// A code representing a room feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        /// <summary>
        /// Display Order sequence.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OrderSequence { get; set; }

        /// <summary>
        /// Indicates quantity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

    }

    /// <summary>
    /// Attributes of property room type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomTypeAttributesType
    {
        /// <summary>
        /// Default occupancy of property room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultOccupancy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultOccupancy { get; set; }

        /// <summary>
        /// Max occupancy of property room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumOccupancy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumOccupancy { get; set; }

        /// <summary>
        /// Number of physical rooms of property room type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noOfPhysicalRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NoOfPhysicalRooms { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BookingChannelMappingType
    {
        [Newtonsoft.Json.JsonProperty("bookingChannelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BookingChannelCode { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Holds monetary value expressed with a currency code / number of points
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AmountPointsType
    {
        /// <summary>
        /// Monetary value expressed with a currency code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Amount { get; set; }

        /// <summary>
        /// Number of points
        /// </summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Points { get; set; }

    }

    /// <summary>
    /// Reservation date and its corresponding upsell rate amount
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpsellDailyRatesType : System.Collections.ObjectModel.Collection<UpsellDailyRateType>
    {

    }

    /// <summary>
    /// Reservation date and its corresponding upsell rate amount
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpsellDailyRateType
    {
        /// <summary>
        /// Reservation date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Amount / number of points required to upgrade
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AmountPointsType RequiredAmount { get; set; }

    }

    /// <summary>
    /// Response object to the that contains information for a reservation prior to upgrade.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationUpsellInfo
    {
        /// <summary>
        /// Reservation Upsale information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpsellInfoType UpsellInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// FetchReservationStatistics response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationStatistics
    {
        /// <summary>
        /// Collection of statistic data of a reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatisticType> StatisticsType { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public WarningsType Warnings { get; set; }

    }

    /// <summary>
    /// Defines all details needed to create a statistical report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatisticType
    {
        /// <summary>
        /// Statistic Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticCodesType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StatisticCodeType> StatisticCodesType { get; set; }

        /// <summary>
        /// The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ChainCode { get; set; }

        /// <summary>
        /// The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

        /// <summary>
        /// The IATA city code; for example DCA, ORD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string HotelCityCode { get; set; }

        /// <summary>
        /// A text field used to communicate the proper name of the hotel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string HotelName { get; set; }

        /// <summary>
        /// A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelCodeContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string HotelCodeContext { get; set; }

        /// <summary>
        /// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chainName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ChainName { get; set; }

        /// <summary>
        /// Hotel fiscal date for statistics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fiscalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? FiscalDate { get; set; }

        /// <summary>
        /// Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string ReportCode { get; set; }

        /// <summary>
        /// This element has revenue amount data for its revenue category such as Room Revenue, Food and Beverage Revenue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Defines the codes and corresponding categories for which the data in the other elements has been gathered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatisticCodeType
    {
        /// <summary>
        /// Collection of statistic summary data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticSetsType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<StatisticSetType> StatisticSetsType { get; set; }

        /// <summary>
        /// Actual code used by the system to collect the statistics (e.g. CORP, RACK if category is Market Segment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string StatCode { get; set; }

        /// <summary>
        /// Category Code category of StatCode attribute (e.g. Market Segment).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string StatCategoryCode { get; set; }

        /// <summary>
        /// Class grouping of StatCode attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statCodeClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string StatCodeClass { get; set; }

        /// <summary>
        /// Statistic code description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

    }

    /// <summary>
    /// An instance of a statistic, which is a set containing revenue category and number category summaries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatisticSetType
    {
        /// <summary>
        /// Collection of RevenueCategorySummary elements. Used if revenue values reported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueCategorySummariesType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RevenueCategorySummaryType> RevenueCategorySummariesType { get; set; }

        /// <summary>
        /// Collection of CountCategorySummary elements. Used if count values reported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numericCategorySummariesType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<NumericCategorySummaryType> NumericCategorySummariesType { get; set; }

        /// <summary>
        /// Date of the statistic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statisticDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StatisticDate { get; set; }

        /// <summary>
        /// Determines whether statistic date is a weekend date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weekendDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WeekendDate { get; set; }

    }

    /// <summary>
    /// This element has revenue amount data for its revenue category such as Room Revenue, Food and Beverage Revenue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevenueCategorySummaryType
    {
        /// <summary>
        /// The representation of a revenue category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RevenueCategoryCode { get; set; }

        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// This element has count data for each count category such as number of guests, rooms occupied, etc.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumericCategorySummaryType
    {
        /// <summary>
        /// The total count for the category in NumericCategoryCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numericSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumericSummary { get; set; }

        /// <summary>
        /// The representation of a numeric category such as Guests : Number of guests, RoomsOcc : Rooms occupied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numericCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string NumericCategoryCode { get; set; }

    }

    /// <summary>
    /// Represents Reservation search type Player Snapshot.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DayUse")]
        DayUse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrival")]
        Arrival = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrived")]
        Arrived = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Departure")]
        Departure = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancellation")]
        Cancellation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Complimentary")]
        Complimentary = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PostStayPendingBalance")]
        PostStayPendingBalance = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PreRegistered")]
        PreRegistered = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToRoom")]
        PostToRoom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenFolio")]
        OpenFolio = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledCheckOut")]
        ScheduledCheckOut = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileCheckout")]
        MobileCheckout = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredAndInHouse")]
        RegisteredAndInHouse = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ResvBlockTraces")]
        ResvBlockTraces = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMessages")]
        GuestMessages = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MassCancellation")]
        MassCancellation = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Operator")]
        Operator = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Turndown")]
        Turndown = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WalkIn")]
        WalkIn = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvanceCheckedIn")]
        AdvanceCheckedIn = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenBalance")]
        OpenBalance = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoFolioSettlement")]
        AutoFolioSettlement = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Routing")]
        Routing = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PlayerSnapshot")]
        PlayerSnapshot = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Nights")]
        Nights = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ArrivalDate")]
        ArrivalDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ArrivalDateETR")]
        ArrivalDateETR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DepartureDate")]
        DepartureDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestSurname")]
        GuestSurname = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RateAmount")]
        RateAmount = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RateCode")]
        RateCode = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Room")]
        Room = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomType")]
        RoomType = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Desc")]
        Desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Clean")]
        Clean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Dirty")]
        Dirty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Pickup")]
        Pickup = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inspected")]
        Inspected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfOrder")]
        OutOfOrder = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfService")]
        OutOfService = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationID")]
        ReservationID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deposits")]
        Deposits = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RevenuesAndBalances")]
        RevenuesAndBalances = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestServiceStatus")]
        GuestServiceStatus = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MasterInfo")]
        MasterInfo = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CancellationInfo")]
        CancellationInfo = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BlockReservations")]
        BlockReservations = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxType")]
        TaxType = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestDeviceNotification")]
        GuestDeviceNotification = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomAssignedByAI")]
        RoomAssignedByAI = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DayUse")]
        DayUse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrival")]
        Arrival = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrived")]
        Arrived = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Departure")]
        Departure = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancellation")]
        Cancellation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Complimentary")]
        Complimentary = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PostStayPendingBalance")]
        PostStayPendingBalance = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PreRegistered")]
        PreRegistered = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToRoom")]
        PostToRoom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenFolio")]
        OpenFolio = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledCheckOut")]
        ScheduledCheckOut = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileCheckout")]
        MobileCheckout = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredAndInHouse")]
        RegisteredAndInHouse = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ResvBlockTraces")]
        ResvBlockTraces = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMessages")]
        GuestMessages = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MassCancellation")]
        MassCancellation = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Operator")]
        Operator = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Turndown")]
        Turndown = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WalkIn")]
        WalkIn = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvanceCheckedIn")]
        AdvanceCheckedIn = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenBalance")]
        OpenBalance = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoFolioSettlement")]
        AutoFolioSettlement = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Routing")]
        Routing = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PlayerSnapshot")]
        PlayerSnapshot = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedIn")]
        CheckedIn = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DueIn")]
        DueIn = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DueOut")]
        DueOut = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingAvailability")]
        PendingAvailability = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateReservation2 : CreateReservation
    {

    }

    /// <summary>
    /// Represents Reservation search type Player Snapshot.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DayUse")]
        DayUse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrival")]
        Arrival = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrived")]
        Arrived = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Departure")]
        Departure = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancellation")]
        Cancellation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Complimentary")]
        Complimentary = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PostStayPendingBalance")]
        PostStayPendingBalance = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PreRegistered")]
        PreRegistered = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToRoom")]
        PostToRoom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenFolio")]
        OpenFolio = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledCheckOut")]
        ScheduledCheckOut = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileCheckout")]
        MobileCheckout = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredAndInHouse")]
        RegisteredAndInHouse = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ResvBlockTraces")]
        ResvBlockTraces = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMessages")]
        GuestMessages = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MassCancellation")]
        MassCancellation = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Operator")]
        Operator = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Turndown")]
        Turndown = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WalkIn")]
        WalkIn = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvanceCheckedIn")]
        AdvanceCheckedIn = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenBalance")]
        OpenBalance = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoFolioSettlement")]
        AutoFolioSettlement = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Routing")]
        Routing = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PlayerSnapshot")]
        PlayerSnapshot = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Nights")]
        Nights = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ArrivalDate")]
        ArrivalDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ArrivalDateETR")]
        ArrivalDateETR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DepartureDate")]
        DepartureDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestSurname")]
        GuestSurname = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RateAmount")]
        RateAmount = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RateCode")]
        RateCode = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Room")]
        Room = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomType")]
        RoomType = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Desc")]
        Desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Clean")]
        Clean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Dirty")]
        Dirty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Pickup")]
        Pickup = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inspected")]
        Inspected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfOrder")]
        OutOfOrder = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfService")]
        OutOfService = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationID")]
        ReservationID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deposits")]
        Deposits = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RevenuesAndBalances")]
        RevenuesAndBalances = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestServiceStatus")]
        GuestServiceStatus = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MasterInfo")]
        MasterInfo = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CancellationInfo")]
        CancellationInfo = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BlockReservations")]
        BlockReservations = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxType")]
        TaxType = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestDeviceNotification")]
        GuestDeviceNotification = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomAssignedByAI")]
        RoomAssignedByAI = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Move")]
        Move = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PreCharge")]
        PreCharge = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PostCharge")]
        PostCharge = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FacilitySchedule")]
        FacilitySchedule = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Upsell")]
        Upsell = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PreCheckIn")]
        PreCheckIn = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToNoShowCancel")]
        PostToNoShowCancel = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NameChange")]
        NameChange = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollToPrimaryMembership")]
        EnrollToPrimaryMembership = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollInProgress")]
        EnrollInProgress = 12,

    }

    /// <summary>
    /// Periodic folio type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PeriodicFolio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Days")]
        Days = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DayUse")]
        DayUse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrival")]
        Arrival = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrived")]
        Arrived = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Departure")]
        Departure = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancellation")]
        Cancellation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Complimentary")]
        Complimentary = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PostStayPendingBalance")]
        PostStayPendingBalance = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PreRegistered")]
        PreRegistered = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToRoom")]
        PostToRoom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenFolio")]
        OpenFolio = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledCheckOut")]
        ScheduledCheckOut = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileCheckout")]
        MobileCheckout = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredAndInHouse")]
        RegisteredAndInHouse = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ResvBlockTraces")]
        ResvBlockTraces = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMessages")]
        GuestMessages = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MassCancellation")]
        MassCancellation = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Operator")]
        Operator = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Turndown")]
        Turndown = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WalkIn")]
        WalkIn = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvanceCheckedIn")]
        AdvanceCheckedIn = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenBalance")]
        OpenBalance = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoFolioSettlement")]
        AutoFolioSettlement = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Routing")]
        Routing = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PlayerSnapshot")]
        PlayerSnapshot = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedIn")]
        CheckedIn = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DueIn")]
        DueIn = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DueOut")]
        DueOut = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingAvailability")]
        PendingAvailability = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateReservation3 : CreateReservation
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkReservationsCriteria2 : LinkReservationsCriteria
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidateReservationChanges2 : ValidateReservationChanges
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Comments")]
        Comments = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestComments")]
        GuestComments = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Packages")]
        Packages = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TotalCostOfStay")]
        TotalCostOfStay = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InventoryItems")]
        InventoryItems = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationPaymentMethods")]
        ReservationPaymentMethods = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RoutingInstructions")]
        RoutingInstructions = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Preferences")]
        Preferences = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Memberships")]
        Memberships = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Alerts")]
        Alerts = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Traces")]
        Traces = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ConfirmationLetters")]
        ConfirmationLetters = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"CallHistory")]
        CallHistory = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FixedCharges")]
        FixedCharges = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMessages")]
        GuestMessages = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationPolicies")]
        ReservationPolicies = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedReservations")]
        LinkedReservations = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"RevenuesAndBalances")]
        RevenuesAndBalances = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestLastStay")]
        GuestLastStay = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"ECoupons")]
        ECoupons = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"TrackItItems")]
        TrackItItems = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationAwards")]
        ReservationAwards = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WebRegistrationCards")]
        WebRegistrationCards = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationActivities")]
        ReservationActivities = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledActivities")]
        ScheduledActivities = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepaidCards")]
        PrepaidCards = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Shares")]
        Shares = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"Attachments")]
        Attachments = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"Locators")]
        Locators = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"ProfileAwards")]
        ProfileAwards = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"TransactionDiversions")]
        TransactionDiversions = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"Tickets")]
        Tickets = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMemberships")]
        GuestMemberships = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"ECertificates")]
        ECertificates = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"UpsellInfo")]
        UpsellInfo = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomAssignedByAI")]
        RoomAssignedByAI = 37,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous17
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancel")]
        Cancel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Move")]
        Move = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PreCharge")]
        PreCharge = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PostCharge")]
        PostCharge = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FacilitySchedule")]
        FacilitySchedule = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Upsell")]
        Upsell = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PreCheckIn")]
        PreCheckIn = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToNoShowCancel")]
        PostToNoShowCancel = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NameChange")]
        NameChange = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Discount")]
        Discount = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollToPrimaryMembership")]
        EnrollToPrimaryMembership = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"EnrollInProgress")]
        EnrollInProgress = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeReservation2 : ChangeReservation
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelReservation2 : CancelReservation
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreCheckInReservation2 : PreCheckInReservation
    {

    }

    /// <summary>
    /// Simple type for indicating if credit card number is tokenized.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CardOrToken
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CardNumber")]
        CardNumber = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Token")]
        Token = 1,

    }

    /// <summary>
    /// This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CardType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ab")]
        Ab = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Am")]
        Am = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ax")]
        Ax = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cb")]
        Cb = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Dc")]
        Dc = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Ds")]
        Ds = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Dt")]
        Dt = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Ec")]
        Ec = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Er")]
        Er = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Jc")]
        Jc = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Jl")]
        Jl = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Mc")]
        Mc = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Nb")]
        Nb = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"So")]
        So = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"St")]
        St = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Sw")]
        Sw = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Va")]
        Va = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Xy")]
        Xy = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Zz")]
        Zz = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Cp")]
        Cp = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Cu")]
        Cu = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Processing
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Eft")]
        Eft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,

    }

    /// <summary>
    /// Supported Email format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailFolioEmailFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Html")]
        Html = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpsellReservation2 : UpsellReservation
    {

    }

    /// <summary>
    /// Represents Reservation search type Player Snapshot.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchType3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DayUse")]
        DayUse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrival")]
        Arrival = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrived")]
        Arrived = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Departure")]
        Departure = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancellation")]
        Cancellation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Complimentary")]
        Complimentary = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PostStayPendingBalance")]
        PostStayPendingBalance = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PreRegistered")]
        PreRegistered = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToRoom")]
        PostToRoom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenFolio")]
        OpenFolio = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledCheckOut")]
        ScheduledCheckOut = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileCheckout")]
        MobileCheckout = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredAndInHouse")]
        RegisteredAndInHouse = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ResvBlockTraces")]
        ResvBlockTraces = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMessages")]
        GuestMessages = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MassCancellation")]
        MassCancellation = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Operator")]
        Operator = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Turndown")]
        Turndown = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WalkIn")]
        WalkIn = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvanceCheckedIn")]
        AdvanceCheckedIn = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenBalance")]
        OpenBalance = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoFolioSettlement")]
        AutoFolioSettlement = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Routing")]
        Routing = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PlayerSnapshot")]
        PlayerSnapshot = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous18
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Nights")]
        Nights = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ArrivalDate")]
        ArrivalDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ArrivalDateETR")]
        ArrivalDateETR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DepartureDate")]
        DepartureDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestSurname")]
        GuestSurname = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RateAmount")]
        RateAmount = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"RateCode")]
        RateCode = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Room")]
        Room = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomType")]
        RoomType = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous19
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Desc")]
        Desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous20
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Clean")]
        Clean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Dirty")]
        Dirty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Pickup")]
        Pickup = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Inspected")]
        Inspected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfOrder")]
        OutOfOrder = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OutOfService")]
        OutOfService = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous21
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Reservation")]
        Reservation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationID")]
        ReservationID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicators")]
        Indicators = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deposits")]
        Deposits = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RevenuesAndBalances")]
        RevenuesAndBalances = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestServiceStatus")]
        GuestServiceStatus = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MasterInfo")]
        MasterInfo = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CancellationInfo")]
        CancellationInfo = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BlockReservations")]
        BlockReservations = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxType")]
        TaxType = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestDeviceNotification")]
        GuestDeviceNotification = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RoomAssignedByAI")]
        RoomAssignedByAI = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous22
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DayUse")]
        DayUse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrival")]
        Arrival = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Arrived")]
        Arrived = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Departure")]
        Departure = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancellation")]
        Cancellation = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Complimentary")]
        Complimentary = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PostStayPendingBalance")]
        PostStayPendingBalance = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PreRegistered")]
        PreRegistered = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PostToRoom")]
        PostToRoom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenFolio")]
        OpenFolio = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ScheduledCheckOut")]
        ScheduledCheckOut = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Queued")]
        Queued = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileCheckout")]
        MobileCheckout = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredAndInHouse")]
        RegisteredAndInHouse = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ResvBlockTraces")]
        ResvBlockTraces = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestMessages")]
        GuestMessages = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MassCancellation")]
        MassCancellation = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Operator")]
        Operator = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Turndown")]
        Turndown = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WalkIn")]
        WalkIn = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"AdvanceCheckedIn")]
        AdvanceCheckedIn = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenBalance")]
        OpenBalance = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"AutoFolioSettlement")]
        AutoFolioSettlement = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"Routing")]
        Routing = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"PlayerSnapshot")]
        PlayerSnapshot = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous23
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedOut")]
        CheckedOut = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckedIn")]
        CheckedIn = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DueIn")]
        DueIn = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DueOut")]
        DueOut = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InHouse")]
        InHouse = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WaitList")]
        WaitList = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous24
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PendingAvailability")]
        PendingAvailability = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reservation2
    {
        /// <summary>
        /// Holds Reservation related Ids.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// Holds Hotel Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hotelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HotelId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InstanceLinkMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIONS")]
        OPTIONS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HEAD")]
        HEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reservations
    {
        /// <summary>
        /// Contains details of the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInfoType> ReservationInfo { get; set; }

        /// <summary>
        /// Evaluated total page count based on the requested max fetch count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>
        /// Indicates maximum number of records a Web Service should return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancellationInfo
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Date when reservation was last cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailFolioInfo
    {
        /// <summary>
        /// eMail deatils for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EmailType Email { get; set; }

        [Newtonsoft.Json.JsonProperty("emailFolio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EmailFolio { get; set; }

        /// <summary>
        /// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Id { get; set; }

        /// <summary>
        /// A reference to the type of object defined by the UniqueID element.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmailTypeEmailFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Html")]
        Html = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeSpan
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }

        /// <summary>
        /// The total duration, in seconds, the reservation is on Queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DurationInSeconds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Telephones
    {
        /// <summary>
        /// Collection of Detailed information on telephone/fax for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TelephoneInfoType> TelephoneInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Emails
    {
        /// <summary>
        /// Collection of Detailed information on an eMail address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<EmailInfoType> EmailInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationProfiles
    {
        [Newtonsoft.Json.JsonProperty("reservationProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationProfileType> ReservationProfile { get; set; }

        /// <summary>
        /// If not null, reservation is considered to pay out commission to either Travel Agent, Source or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionPayoutTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommissionPayoutToType? CommissionPayoutTo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cancellation
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Cancellation Number given when reservation was last cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type CancellationNo { get; set; }

        /// <summary>
        /// Date when reservation was last cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionDiversions
    {
        [Newtonsoft.Json.JsonProperty("transactionDiversions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationTransactionDiversionsType> TransactionDiversions1 { get; set; }

        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ActionType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Addresses
    {
        /// <summary>
        /// Collection of Detailed information on an address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<AddressInfoType> AddressInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Telephones2
    {
        /// <summary>
        /// Collection of Detailed information on telephone/fax for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephoneInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<TelephoneInfoType> TelephoneInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Emails2
    {
        /// <summary>
        /// Collection of Detailed information on an eMail address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<EmailInfoType> EmailInfo { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class URLs
    {
        /// <summary>
        /// Collection of Detailed information on web url/address for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<URLInfoType> URLInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Comments
    {
        /// <summary>
        /// Collection of Detailed information on comments for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<CommentInfoType> CommentInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileDeliveryMethods
    {
        /// <summary>
        /// Collection of delivery methods for this Profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileDeliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileDeliveryMethod> ProfileDeliveryMethod { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileMemberships
    {
        /// <summary>
        /// Collection of Detailed information on memberships for the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ProfileMembershipType> ProfileMembership { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreferenceCollection
    {
        /// <summary>
        /// Collection of Detailed information on preferences of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PreferenceTypeType> PreferenceType { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Relationships
    {
        /// <summary>
        /// A collection of the profiles that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelationshipsSummary
    {
        /// <summary>
        /// A collection of the profiles summary that have a relationship with this profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RelationshipInfoSummaryType> Relationship { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomOwnershipsList
    {
        /// <summary>
        /// Collection of Detailed information on Room Ownership records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomOwnershipInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoomOwnershipType> RoomOwnershipInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identifications
    {
        /// <summary>
        /// Collection of detailed information on the identification of the customer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identificationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<IdentificationInfoType> IdentificationInfo { get; set; }

        /// <summary>
        /// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Total number of rows queried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalResults { get; set; }

        /// <summary>
        /// Total number of rows returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomerTypeGender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Hotels
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Code { get; set; }

        /// <summary>
        /// Scope of e-cert: global,single property or multi property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ECertificateScopeType? Scope { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OriginalInfo
    {
        /// <summary>
        /// The Rate Code of the Reservation before it was upgraded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RateCode { get; set; }

        /// <summary>
        /// Total Amount of the reservation before it was upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalAmount { get; set; }

        /// <summary>
        /// Original Reservation Room Type before being upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType RoomType { get; set; }

        /// <summary>
        /// The number of nights of the reservation before being upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nights { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpsellInfo
    {
        /// <summary>
        /// Amount that was charged for the upsell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUpsellCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalUpsellCharge { get; set; }

        /// <summary>
        /// Total Amount that was charged including upsell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUpsellMoneyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalUpsellMoneyAmount { get; set; }

        /// <summary>
        /// First Night Total Amount including Upsell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstNightUpsellAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType FirstNightUpsellAmount { get; set; }

        /// <summary>
        /// First Night Upsell Charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstNightUpsellCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType FirstNightUpsellCharge { get; set; }

        /// <summary>
        /// Total Upsell Points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalUpsellPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalUpsellPoints { get; set; }

        /// <summary>
        /// Actual Total Room Rate for the Target Upsell Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalActualRateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType TotalActualRateAmount { get; set; }

        /// <summary>
        /// Reservation Room Type for Upsell.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeDescriptionType RoomType { get; set; }

        /// <summary>
        /// Detail description of the Room Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomLongDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RoomLongDescription { get; set; }

        /// <summary>
        /// Upsell Rule Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RuleId { get; set; }

        /// <summary>
        /// Upsell rule code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RuleCode { get; set; }

        /// <summary>
        /// Upsell rule description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string RuleDescription { get; set; }

        /// <summary>
        /// Percentage savings resulting from accepting upsell offer. This will be calculated as the ratio of the amount saved by accepting the upsell offer to the actual room rate (i.e. room rate when upsell is not offered)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentageSavings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double? PercentageSavings { get; set; }

        /// <summary>
        /// The date on which reservation is upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? UpsellDate { get; set; }

        /// <summary>
        /// User who upgraded the reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string UpsellUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProfileInfo
    {
        /// <summary>
        /// Unique identifiers for the Profile for both internal and external systems. In case of Travel Agent the IATA code and in case of Company can be any form of identifier as id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

        /// <summary>
        /// Provides detailed information regarding either a company or a customer profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileType Profile { get; set; }

        /// <summary>
        /// Cashiering details for the profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileCashieringDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProfileCashieringDetailType ProfileCashieringDetail { get; set; }

        /// <summary>
        /// Unique identifier of the police registration card number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registrationCardNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string RegistrationCardNo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmployeeInfoTypeGender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,

    }

    /// <summary>
    /// Represents a single instance of a scheduled activity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous25
    {
        /// <summary>
        /// A collection of reference ID values that identify this uniquely scheduled activity instance. May contain one ID per external system plus an internal identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activityIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public UniqueIDListType ActivityIds { get; set; }

        /// <summary>
        /// The Type of the activity. Eg: SPA, Golf etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Type { get; set; }

        /// <summary>
        /// The Location where the activity takes place. Eg: Salon
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Location { get; set; }

        /// <summary>
        /// Name of the people for whom the activity is scheduled. Can be more than one but should be equal to the number of persons
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Name { get; set; }

        /// <summary>
        /// The total number of the people for whom the activity is scheduled. Can be more than one but should be equal to the number of persons
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfPersons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPersons { get; set; }

        /// <summary>
        /// The time with-in which an activity falls (Starts/Ends/Spans)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeSpanType TimeSpan { get; set; }

        /// <summary>
        /// The time span of the activity falls
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeSpanType Duration { get; set; }

        /// <summary>
        /// Description of the activity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Description { get; set; }

        /// <summary>
        /// Any additional notes or comments regarding the scheduled activity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Note { get; set; }

        /// <summary>
        /// Any Block code associated with the activity if its a Group booking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string GroupCode { get; set; }

        /// <summary>
        /// The amount charged for the activity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType Amount { get; set; }

        /// <summary>
        /// A monetary value expressed with a currency code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Deposit Deposit { get; set; }

        /// <summary>
        /// The Date by which the activity is deemed Cancelled/Deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inactiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InactiveDate { get; set; }

        /// <summary>
        /// The names of the participants.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("participants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<PersonNameType> Participants { get; set; }

        /// <summary>
        /// The URL link to launch the Activity Reservation System to view or edit full details of this activity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uRLLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string URLLink { get; set; }

        /// <summary>
        /// Vendor extensions to the activity record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<string> Extensions { get; set; }

        /// <summary>
        /// Activity reservation status. Typical examples are RESERVED, BOOKED, CANCELLED, and TENTATIVE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Status { get; set; }

        /// <summary>
        /// When true indicates that activity link only needs to be inserted or deleted for this record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Link { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EveryXNightsStartingNightY
    {
        /// <summary>
        /// Starting night for consumption and posting prices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startOnNightY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartOnNightY { get; set; }

        /// <summary>
        /// Occurance of nights when the package needs to be posted and consumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postEveryXNights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PostEveryXNights { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertainNightsOfTheWeek
    {
        [Newtonsoft.Json.JsonProperty("sunday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sunday { get; set; }

        [Newtonsoft.Json.JsonProperty("monday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Monday { get; set; }

        [Newtonsoft.Json.JsonProperty("tuesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tuesday { get; set; }

        [Newtonsoft.Json.JsonProperty("wednesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Wednesday { get; set; }

        [Newtonsoft.Json.JsonProperty("thursday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Thursday { get; set; }

        [Newtonsoft.Json.JsonProperty("friday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Friday { get; set; }

        [Newtonsoft.Json.JsonProperty("saturday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Saturday { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomStaySchedule
    {
        /// <summary>
        /// Night 1 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night1 { get; set; }

        /// <summary>
        /// Night 2 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night2 { get; set; }

        /// <summary>
        /// Night 3 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night3 { get; set; }

        /// <summary>
        /// Night 4 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night4 { get; set; }

        /// <summary>
        /// Night 5 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night5 { get; set; }

        /// <summary>
        /// Night 6 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night6 { get; set; }

        /// <summary>
        /// Night 7 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night7 { get; set; }

        /// <summary>
        /// Night 8 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night8 { get; set; }

        /// <summary>
        /// Night 9 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night9 { get; set; }

        /// <summary>
        /// Night 10 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night10 { get; set; }

        /// <summary>
        /// Night 11 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night11", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night11 { get; set; }

        /// <summary>
        /// Night 12 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night12", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night12 { get; set; }

        /// <summary>
        /// Night 13 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night13", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night13 { get; set; }

        /// <summary>
        /// Night 14 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night14", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night14 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomNightSchedule
    {
        /// <summary>
        /// Night 1 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night1 { get; set; }

        /// <summary>
        /// Night 2 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night2 { get; set; }

        /// <summary>
        /// Night 3 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night3 { get; set; }

        /// <summary>
        /// Night 4 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night4 { get; set; }

        /// <summary>
        /// Night 5 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night5 { get; set; }

        /// <summary>
        /// Night 6 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night6 { get; set; }

        /// <summary>
        /// Night 7 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night7 { get; set; }

        /// <summary>
        /// Night 8 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night8 { get; set; }

        /// <summary>
        /// Night 9 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night9 { get; set; }

        /// <summary>
        /// Night 10 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night10 { get; set; }

        /// <summary>
        /// Night 11 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night11", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night11 { get; set; }

        /// <summary>
        /// Night 12 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night12", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night12 { get; set; }

        /// <summary>
        /// Night 13 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night13", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night13 { get; set; }

        /// <summary>
        /// Night 14 indicator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("night14", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Night14 { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Folio
    {
        /// <summary>
        /// Guest details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GuestInfo GuestInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("payeeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayeeInfoType PayeeInfo { get; set; }

        /// <summary>
        /// Accounts Receivable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aRNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ARNumber { get; set; }

        /// <summary>
        /// Set of routing instructions associated to this routing type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoutingInstructionType> Instructions { get; set; }

        [Newtonsoft.Json.JsonProperty("folioWindowNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolioWindowNo { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PaymentMethod { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Room
    {
        /// <summary>
        /// Room number to route the instructions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RoomId { get; set; }

        /// <summary>
        /// Guest unique identifier to which the instruction will be routed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestNameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type GuestNameId { get; set; }

        /// <summary>
        /// Display Name for the guest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guestDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string GuestDisplayName { get; set; }

        /// <summary>
        /// Reservation name id to which the instruction will be routed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationNameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type ReservationNameId { get; set; }

        /// <summary>
        /// Set of routing instructions associated to this routing type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoutingInstructionType> Instructions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Comp
    {
        [Newtonsoft.Json.JsonProperty("compAccountingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompAccountingType CompAccountingInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("compRequestInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompRoutingRequestType CompRequestInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("payeeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PayeeInfoType PayeeInfo { get; set; }

        /// <summary>
        /// Set of routing instructions associated to this routing type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoutingInstructionType> Instructions { get; set; }

        [Newtonsoft.Json.JsonProperty("folioWindowNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolioWindowNo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Request
    {
        [Newtonsoft.Json.JsonProperty("compRequestInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompRoutingRequestType CompRequestInfo { get; set; }

        /// <summary>
        /// Set of routing instructions associated to this routing type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<RoutingInstructionType> Instructions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Duration
    {
        [Newtonsoft.Json.JsonProperty("timeSpan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSpanType TimeSpan { get; set; }

        [Newtonsoft.Json.JsonProperty("sunday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sunday { get; set; }

        [Newtonsoft.Json.JsonProperty("monday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Monday { get; set; }

        [Newtonsoft.Json.JsonProperty("tuesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Tuesday { get; set; }

        [Newtonsoft.Json.JsonProperty("wednesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Wednesday { get; set; }

        [Newtonsoft.Json.JsonProperty("thursday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Thursday { get; set; }

        [Newtonsoft.Json.JsonProperty("friday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Friday { get; set; }

        [Newtonsoft.Json.JsonProperty("saturday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Saturday { get; set; }

        /// <summary>
        /// Flag to indicate if the routing instruction is a daily instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("daily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Daily { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareToReservation
    {
        [Newtonsoft.Json.JsonProperty("reservationIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ReservationIdList ReservationIdList { get; set; }

        /// <summary>
        /// Collection of room rate information on a daily basis.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dailyRates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public DailyRatesType DailyRates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FetchInstructions
    {
        /// <summary>
        /// Instruction on what information has to be fetched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fetchInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInstructionType> FetchInstruction { get; set; }

        /// <summary>
        /// After the combine shares operation, return the new list of share reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("returnShareReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnShareReservations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseInstruction
    {
        /// <summary>
        /// If set to TRUE, response will have the list of linked reservations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fetchLinkedReservations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FetchLinkedReservations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail
    {
        /// <summary>
        /// The revenue information for the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalType Revenue { get; set; }

        /// <summary>
        /// Package information for the rate code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TotalType> Packages { get; set; }

        /// <summary>
        /// Indicates if the rate is to be hidden.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rateSuppressed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateSuppressed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Instructions
    {
        /// <summary>
        /// Reservation validation instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ReservationValidationInstructionType> Instruction { get; set; }

        /// <summary>
        /// Instruction for recalculation of rate when the reservations has already been upsold.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("upsellRateInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpsellRateInstructionType? UpsellRateInstruction { get; set; }

        /// <summary>
        /// Whether the current operation is copy reservation or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copyOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CopyOperation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelPenalty
    {
        /// <summary>
        /// Cancellation deadline, absolute or relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deadline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyDeadlineType Deadline { get; set; }

        /// <summary>
        /// Cancellation fee expressed as a fixed amount, or percentage of/or room nights.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PolicyAmountPercentType AmountPercent { get; set; }

        /// <summary>
        /// Text description of the Penalty in a given language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("penaltyDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string PenaltyDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OffsetUnitType? OffsetUnit { get; set; }

        /// <summary>
        /// Formatted Text Rule of the Cancellation Penalty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string FormattedRule { get; set; }

        /// <summary>
        /// Policy Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PolicyCode { get; set; }

        /// <summary>
        /// Flag to indicate if the cancellation policy is manual.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Manual { get; set; }

        /// <summary>
        /// Indicates if the amount is refundable if booking is canceled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonRefundable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonRefundable { get; set; }

        /// <summary>
        /// Indicator if Cancellation Penalty is currently applicable or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("effective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Effective { get; set; }

        /// <summary>
        /// Message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedAmount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DepositPolicy
    {
        /// <summary>
        /// Type of reservation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("revenueType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DepositCancelRevenueType? RevenueType { get; set; }

        /// <summary>
        /// Reservation deposit policy details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepositPolicyType Policy { get; set; }

        /// <summary>
        /// Comments attached with a deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Comments { get; set; }

        /// <summary>
        /// Total amount paid against the reservation deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountPaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType AmountPaid { get; set; }

        /// <summary>
        /// Total amount due against the reservation deposit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmountType AmountDue { get; set; }

        /// <summary>
        /// Unique ID of the Reservation Policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type PolicyId { get; set; }

        /// <summary>
        /// Message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? EstimatedAmount { get; set; }

    }

    /// <summary>
    /// Language code for the translation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous26
    {
        /// <summary>
        /// Used for Character Strings, length 0 to 2000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Value { get; set; }

        /// <summary>
        /// Language identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*")]
        public string Language { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservationProfiles2
    {
        [Newtonsoft.Json.JsonProperty("reservationProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationProfileType> ReservationProfile { get; set; }

        /// <summary>
        /// If not null, reservation is considered to pay out commission to either Travel Agent, Source or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commissionPayoutTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CommissionPayoutToType? CommissionPayoutTo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Cancellation2
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Cancellation Number given when reservation was last cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cancellationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UniqueID_Type CancellationNo { get; set; }

        /// <summary>
        /// Date when reservation was last cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionDiversions2
    {
        [Newtonsoft.Json.JsonProperty("transactionDiversions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationTransactionDiversionsType> TransactionDiversions { get; set; }

        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string ActionType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseInstructions
    {
        [Newtonsoft.Json.JsonProperty("responseInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public System.Collections.Generic.ICollection<ReservationInstructionType> ResponseInstruction { get; set; }

        /// <summary>
        /// If this value is set to TRUE, then the operation will only return for a Success or Failed flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmationOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConfirmationOnly { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous27
    {
        /// <summary>
        /// Marketing Text like cancel policy, deposit policy etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates the policy type like cancel,deposit etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarketingPolicyType? PolicyType { get; set; }

        /// <summary>
        /// Indicates the rate code for which the policy is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratePlanCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string RatePlanCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancellationInfo2
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Code { get; set; }

        /// <summary>
        /// Date when reservation was last cancelled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit
    {
        /// <summary>
        /// A monetary amount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        /// <summary>
        /// Provides a currency code to reflect the currency in which an amount may be expressed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("collectedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DepositCollectedBy? CollectedBy { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuestInfo
    {
        /// <summary>
        /// Unique identifiers for the Profile for both internal and external systems.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profileIdList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4000)]
        public ProfileIdList ProfileIdList { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DepositCollectedBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Vendor")]
        Vendor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "MM'-'dd'-'yy";
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse<TResult> : SwaggerResponse
    {
        public TResult Result { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservasExeption : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ReservasExeption(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReservasExeption<TResult> : ReservasExeption
    {
        public TResult Result { get; private set; }

        public ReservasExeption(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603